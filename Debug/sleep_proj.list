
sleep_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005290  08005290  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005298  08005298  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  08005310  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005310  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c614  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d34  00000000  00000000  0002c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017103  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f20  00000000  00000000  00046d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cdb7  00000000  00000000  0004fc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc9ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000dca68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005118 	.word	0x08005118

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005118 	.word	0x08005118

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fdc6 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f830 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9be 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f99c 	bl	80008cc <MX_DMA_Init>

  //TIM3_sConfigOC ={0};
  //was MX_TIM1_Init();
  MX_TIM1_Init(&TIM1_sConfigOC);
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <main+0x50>)
 8000596:	f000 f895 	bl	80006c4 <MX_TIM1_Init>
  //was MX_TIM3_Init();
  MX_TIM3_Init(&TIM3_sConfigOC);
 800059a:	480e      	ldr	r0, [pc, #56]	; (80005d4 <main+0x54>)
 800059c:	f000 f916 	bl	80007cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f96a 	bl	8000878 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2 );
 80005a4:	2104      	movs	r1, #4
 80005a6:	480c      	ldr	r0, [pc, #48]	; (80005d8 <main+0x58>)
 80005a8:	f002 f984 	bl	80028b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <main+0x5c>)
 80005b0:	f002 f980 	bl	80028b4 <HAL_TIM_PWM_Start>

	printf("Starting my application...\r\n");
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x60>)
 80005b6:	f003 fe8b 	bl	80042d0 <puts>

	//** Fixed size command of 3 bytes *[]#, Initialise
	//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 21);	//3); //
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9); //dma return
 80005ba:	2209      	movs	r2, #9
 80005bc:	4909      	ldr	r1, [pc, #36]	; (80005e4 <main+0x64>)
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x68>)
 80005c0:	f002 fe48 	bl	8003254 <HAL_UART_Receive_DMA>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f000 fe17 	bl	80011f8 <HAL_Delay>
	process_keystroke();
 80005ca:	f000 fadb 	bl	8000b84 <process_keystroke>
  {	HAL_Delay(100);
 80005ce:	e7f9      	b.n	80005c4 <main+0x44>
 80005d0:	20000090 	.word	0x20000090
 80005d4:	200000ac 	.word	0x200000ac
 80005d8:	20000198 	.word	0x20000198
 80005dc:	2000013c 	.word	0x2000013c
 80005e0:	08005130 	.word	0x08005130
 80005e4:	2000017c 	.word	0x2000017c
 80005e8:	200001d8 	.word	0x200001d8

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fdd8 	bl	80041b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a28      	ldr	r2, [pc, #160]	; (80006bc <SystemClock_Config+0xd0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd4>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc8e 	bl	8001f98 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000682:	f000 fac1 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fee8 	bl	8002478 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ae:	f000 faab 	bl	8000c08 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(TIM_OC_InitTypeDef *sConfigOC)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	; 0x30
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
//move to be global separate for TIM1 & 3  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2220      	movs	r2, #32
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fd66 	bl	80041b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e4:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <MX_TIM1_Init+0x100>)
 80006e6:	4a38      	ldr	r2, [pc, #224]	; (80007c8 <MX_TIM1_Init+0x104>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 80006ea:	4b36      	ldr	r3, [pc, #216]	; (80007c4 <MX_TIM1_Init+0x100>)
 80006ec:	f244 2268 	movw	r2, #17000	; 0x4268
 80006f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_TIM1_Init+0x100>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80006f8:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <MX_TIM1_Init+0x100>)
 80006fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80006fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000700:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <MX_TIM1_Init+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <MX_TIM1_Init+0x100>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_TIM1_Init+0x100>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000712:	482c      	ldr	r0, [pc, #176]	; (80007c4 <MX_TIM1_Init+0x100>)
 8000714:	f002 f8a2 	bl	800285c <HAL_TIM_PWM_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800071e:	f000 fa73 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	4619      	mov	r1, r3
 8000730:	4824      	ldr	r0, [pc, #144]	; (80007c4 <MX_TIM1_Init+0x100>)
 8000732:	f002 fbe9 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 fa64 	bl	8000c08 <Error_Handler>
  }

  sConfigOC->OCMode = TIM_OCMODE_PWM1;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2260      	movs	r2, #96	; 0x60
 8000744:	601a      	str	r2, [r3, #0]
  sConfigOC->Pulse = 1000;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800074c:	605a      	str	r2, [r3, #4]
  sConfigOC->OCPolarity = TIM_OCPOLARITY_HIGH;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  sConfigOC->OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  sConfigOC->OCFastMode = TIM_OCFAST_DISABLE;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  sConfigOC->OCIdleState = TIM_OCIDLESTATE_RESET;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  sConfigOC->OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  //jvm was if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800076c:	2204      	movs	r2, #4
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM1_Init+0x100>)
 8000772:	f002 f8d1 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800077c:	f000 fa44 	bl	8000c08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM1_Init+0x100>)
 80007a6:	f002 fc1d 	bl	8002fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80007b0:	f000 fa2a 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM1_Init+0x100>)
 80007b6:	f000 fa8f 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3730      	adds	r7, #48	; 0x30
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000198 	.word	0x20000198
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_TIM3_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM3_Init(TIM_OC_InitTypeDef *sConfigOC)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  //jvm TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007de:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MX_TIM3_Init+0xa4>)
 80007e0:	4a24      	ldr	r2, [pc, #144]	; (8000874 <MX_TIM3_Init+0xa8>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <MX_TIM3_Init+0xa4>)
 80007e6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <MX_TIM3_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_TIM3_Init+0xa4>)
 80007f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80007f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_TIM3_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <MX_TIM3_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_TIM3_Init+0xa4>)
 8000808:	f002 f828 	bl	800285c <HAL_TIM_PWM_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8000812:	f000 f9f9 	bl	8000c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <MX_TIM3_Init+0xa4>)
 8000826:	f002 fb6f 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000830:	f000 f9ea 	bl	8000c08 <Error_Handler>
  }
  sConfigOC->OCMode = TIM_OCMODE_PWM1;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2260      	movs	r2, #96	; 0x60
 8000838:	601a      	str	r2, [r3, #0]
  sConfigOC->Pulse = 1400;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8000840:	605a      	str	r2, [r3, #4]
  sConfigOC->OCPolarity = TIM_OCPOLARITY_HIGH;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  sConfigOC->OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084e:	2200      	movs	r2, #0
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <MX_TIM3_Init+0xa4>)
 8000854:	f002 f860 	bl	8002918 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800085e:	f000 f9d3 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <MX_TIM3_Init+0xa4>)
 8000864:	f000 fa38 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000013c 	.word	0x2000013c
 8000874:	40000400 	.word	0x40000400

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f002 fbea 	bl	8003088 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f9a5 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200001d8 	.word	0x200001d8
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_DMA_Init+0x3c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <MX_DMA_Init+0x3c>)
 80008dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_DMA_Init+0x3c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2010      	movs	r0, #16
 80008f4:	f000 fd7d 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f000 fd96 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a2c      	ldr	r2, [pc, #176]	; (80009dc <MX_GPIO_Init+0xd0>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a25      	ldr	r2, [pc, #148]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2120      	movs	r1, #32
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <MX_GPIO_Init+0xd4>)
 8000998:	f001 fae4 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_GPIO_Init+0xd8>)
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_GPIO_Init+0xdc>)
 80009b2:	f001 f955 	bl	8001c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b6:	2320      	movs	r3, #32
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0xd4>)
 80009ce:	f001 f947 	bl	8001c60 <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	10210000 	.word	0x10210000
 80009e8:	40020800 	.word	0x40020800

080009ec <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fa:	2201      	movs	r2, #1
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <__io_putchar+0x20>)
 80009fe:	f002 fb90 	bl	8003122 <HAL_UART_Transmit>

  return ch;
 8000a02:	687b      	ldr	r3, [r7, #4]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200001d8 	.word	0x200001d8

08000a10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	echo_ptr=rxBuf+count;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <HAL_UART_RxCpltCallback+0xe0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a20:	4413      	add	r3, r2
 8000a22:	4a35      	ldr	r2, [pc, #212]	; (8000af8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a24:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a28:	6819      	ldr	r1, [r3, #0]
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4833      	ldr	r0, [pc, #204]	; (8000afc <HAL_UART_RxCpltCallback+0xec>)
 8000a30:	f002 fb77 	bl	8003122 <HAL_UART_Transmit>
	printf("\r\n");
 8000a34:	4832      	ldr	r0, [pc, #200]	; (8000b00 <HAL_UART_RxCpltCallback+0xf0>)
 8000a36:	f003 fc4b 	bl	80042d0 <puts>
	switch(myUART_State)
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <HAL_UART_RxCpltCallback+0xf4>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <HAL_UART_RxCpltCallback+0x38>
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d037      	beq.n	8000ab6 <HAL_UART_RxCpltCallback+0xa6>
 8000a46:	e047      	b.n	8000ad8 <HAL_UART_RxCpltCallback+0xc8>
	{
		case UT_START:
			if(rxBuf[0] == '*' && rxBuf[2] == '#')
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8000a4e:	d128      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x92>
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	2b23      	cmp	r3, #35	; 0x23
 8000a56:	d124      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x92>
			{
				//Start UART DMA receive based on User specified length (Caviat: always ensure user requested)
				rxBuf[1]=rxBuf[1]-'0';
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	3b30      	subs	r3, #48	; 0x30
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a62:	705a      	strb	r2, [r3, #1]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	2b19      	cmp	r3, #25
 8000a6a:	d811      	bhi.n	8000a90 <HAL_UART_RxCpltCallback+0x80>
				{
					printf("Send CMD %i characters long:\r\n", rxBuf[1]);
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	4619      	mov	r1, r3
 8000a72:	4825      	ldr	r0, [pc, #148]	; (8000b08 <HAL_UART_RxCpltCallback+0xf8>)
 8000a74:	f003 fba4 	bl	80041c0 <iprintf>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, rxBuf[1]);
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	491c      	ldr	r1, [pc, #112]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a82:	481e      	ldr	r0, [pc, #120]	; (8000afc <HAL_UART_RxCpltCallback+0xec>)
 8000a84:	f002 fbe6 	bl	8003254 <HAL_UART_Receive_DMA>
					myUART_State = UT_APP;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_UART_RxCpltCallback+0xf4>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a8e:	e011      	b.n	8000ab4 <HAL_UART_RxCpltCallback+0xa4>
				}
				else
				{
					printf("Invalid size\r\n");
 8000a90:	481e      	ldr	r0, [pc, #120]	; (8000b0c <HAL_UART_RxCpltCallback+0xfc>)
 8000a92:	f003 fc1d 	bl	80042d0 <puts>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000a96:	2203      	movs	r2, #3
 8000a98:	4916      	ldr	r1, [pc, #88]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <HAL_UART_RxCpltCallback+0xec>)
 8000a9c:	f002 fbda 	bl	8003254 <HAL_UART_Receive_DMA>
				if(rxBuf[1] <= sizeof(rxBuf))
 8000aa0:	e008      	b.n	8000ab4 <HAL_UART_RxCpltCallback+0xa4>
				}
			}
			else
			{
				printf("Invalid command\r\n");
 8000aa2:	481b      	ldr	r0, [pc, #108]	; (8000b10 <HAL_UART_RxCpltCallback+0x100>)
 8000aa4:	f003 fc14 	bl	80042d0 <puts>
				HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	4912      	ldr	r1, [pc, #72]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <HAL_UART_RxCpltCallback+0xec>)
 8000aae:	f002 fbd1 	bl	8003254 <HAL_UART_Receive_DMA>
			}
			break;
 8000ab2:	e011      	b.n	8000ad8 <HAL_UART_RxCpltCallback+0xc8>
 8000ab4:	e010      	b.n	8000ad8 <HAL_UART_RxCpltCallback+0xc8>

		case UT_APP:
			application_handling(rxBuf);
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000ab8:	f000 f82c 	bl	8000b14 <application_handling>
			memset(rxBuf,'\0', sizeof(rxBuf));
 8000abc:	2219      	movs	r2, #25
 8000abe:	2100      	movs	r1, #0
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000ac2:	f003 fb75 	bl	80041b0 <memset>
			//Get back to state 1
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	490a      	ldr	r1, [pc, #40]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_UART_RxCpltCallback+0xec>)
 8000acc:	f002 fbc2 	bl	8003254 <HAL_UART_Receive_DMA>
			myUART_State = UT_START;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_UART_RxCpltCallback+0xf4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
			break;
 8000ad6:	bf00      	nop
	}

//resets index for echo
	memset(rxBuf,'\0', sizeof(rxBuf));
 8000ad8:	2219      	movs	r2, #25
 8000ada:	2100      	movs	r1, #0
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_RxCpltCallback+0xe4>)
 8000ade:	f003 fb67 	bl	80041b0 <memset>
	count=0;
 8000ae2:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_UART_RxCpltCallback+0xe0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]

}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000008c 	.word	0x2000008c
 8000af4:	2000017c 	.word	0x2000017c
 8000af8:	20000138 	.word	0x20000138
 8000afc:	200001d8 	.word	0x200001d8
 8000b00:	0800514c 	.word	0x0800514c
 8000b04:	200000c8 	.word	0x200000c8
 8000b08:	08005150 	.word	0x08005150
 8000b0c:	08005170 	.word	0x08005170
 8000b10:	08005180 	.word	0x08005180

08000b14 <application_handling>:


//UART Application handling function
void application_handling(char *cmd)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 8000b1c:	4913      	ldr	r1, [pc, #76]	; (8000b6c <application_handling+0x58>)
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f003 fbde 	bl	80042e0 <strstr>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <application_handling+0x28>
	{
		//Turn LED ON (GPIOA, GPIO_PIN_5);
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <application_handling+0x5c>)
 8000b30:	f001 fa18 	bl	8001f64 <HAL_GPIO_WritePin>
		printf("LED Turned ON\r\n");
 8000b34:	480f      	ldr	r0, [pc, #60]	; (8000b74 <application_handling+0x60>)
 8000b36:	f003 fbcb 	bl	80042d0 <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 8000b3a:	e012      	b.n	8000b62 <application_handling+0x4e>
	else if(strstr(cmd, "LED OFF") != NULL)
 8000b3c:	490e      	ldr	r1, [pc, #56]	; (8000b78 <application_handling+0x64>)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f003 fbce 	bl	80042e0 <strstr>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d008      	beq.n	8000b5c <application_handling+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <application_handling+0x5c>)
 8000b50:	f001 fa08 	bl	8001f64 <HAL_GPIO_WritePin>
		printf("LED Turned OFF\r\n");
 8000b54:	4809      	ldr	r0, [pc, #36]	; (8000b7c <application_handling+0x68>)
 8000b56:	f003 fbbb 	bl	80042d0 <puts>
}
 8000b5a:	e002      	b.n	8000b62 <application_handling+0x4e>
		printf("Invalid Command!\r\n");
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <application_handling+0x6c>)
 8000b5e:	f003 fbb7 	bl	80042d0 <puts>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	08005194 	.word	0x08005194
 8000b70:	40020000 	.word	0x40020000
 8000b74:	0800519c 	.word	0x0800519c
 8000b78:	080051ac 	.word	0x080051ac
 8000b7c:	080051b4 	.word	0x080051b4
 8000b80:	080051c4 	.word	0x080051c4

08000b84 <process_keystroke>:
/*
 * function will echo last keystroke, if '\n' it will see if it is a valid command
 */
void process_keystroke()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	if(rxBuf[count] != '\0')
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <process_keystroke+0x74>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <process_keystroke+0x78>)
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d02f      	beq.n	8000bf4 <process_keystroke+0x70>
	{	echo_ptr=rxBuf+count;
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <process_keystroke+0x74>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <process_keystroke+0x78>)
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <process_keystroke+0x7c>)
 8000ba0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <process_keystroke+0x7c>)
 8000ba4:	6819      	ldr	r1, [r3, #0]
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4816      	ldr	r0, [pc, #88]	; (8000c04 <process_keystroke+0x80>)
 8000bac:	f002 fab9 	bl	8003122 <HAL_UART_Transmit>

		if(rxBuf[count] == '\r')
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <process_keystroke+0x74>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <process_keystroke+0x78>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	2b0d      	cmp	r3, #13
 8000bba:	d116      	bne.n	8000bea <process_keystroke+0x66>
		{	//command may have been submitted.
			printf("\n");
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f003 fb17 	bl	80041f0 <putchar>
			application_handling(rxBuf);
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <process_keystroke+0x78>)
 8000bc4:	f7ff ffa6 	bl	8000b14 <application_handling>
			HAL_UART_DMAStop(&huart2);
 8000bc8:	480e      	ldr	r0, [pc, #56]	; (8000c04 <process_keystroke+0x80>)
 8000bca:	f002 fbc3 	bl	8003354 <HAL_UART_DMAStop>

			//printf("Message!\r\n");
		//	MX_DMA_Init();
			//MX_USART2_UART_Init();
			//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 7); //dma return
			memset(rxBuf,'\0', sizeof(rxBuf));
 8000bce:	2219      	movs	r2, #25
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	480a      	ldr	r0, [pc, #40]	; (8000bfc <process_keystroke+0x78>)
 8000bd4:	f003 faec 	bl	80041b0 <memset>
			count=0;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <process_keystroke+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9);
 8000bde:	2209      	movs	r2, #9
 8000be0:	4906      	ldr	r1, [pc, #24]	; (8000bfc <process_keystroke+0x78>)
 8000be2:	4808      	ldr	r0, [pc, #32]	; (8000c04 <process_keystroke+0x80>)
 8000be4:	f002 fb36 	bl	8003254 <HAL_UART_Receive_DMA>
		}
		else
			count++;
	}

}
 8000be8:	e004      	b.n	8000bf4 <process_keystroke+0x70>
			count++;
 8000bea:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <process_keystroke+0x74>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a01      	ldr	r2, [pc, #4]	; (8000bf8 <process_keystroke+0x74>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000008c 	.word	0x2000008c
 8000bfc:	2000017c 	.word	0x2000017c
 8000c00:	20000138 	.word	0x20000138
 8000c04:	200001d8 	.word	0x200001d8

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f000 fbc0 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <HAL_TIM_PWM_MspInit+0x64>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d10e      	bne.n	8000c98 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c96:	e012      	b.n	8000cbe <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d10d      	bne.n	8000cbe <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a09      	ldr	r2, [pc, #36]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <HAL_TIM_MspPostInit+0xb0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d11f      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_TIM_MspPostInit+0xb4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <HAL_TIM_MspPostInit+0xb4>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_TIM_MspPostInit+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4817      	ldr	r0, [pc, #92]	; (8000d90 <HAL_TIM_MspPostInit+0xb8>)
 8000d34:	f000 ff94 	bl	8001c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d38:	e022      	b.n	8000d80 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <HAL_TIM_MspPostInit+0xbc>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d11d      	bne.n	8000d80 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_TIM_MspPostInit+0xb4>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <HAL_TIM_MspPostInit+0xb4>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <HAL_TIM_MspPostInit+0xb4>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d70:	2302      	movs	r3, #2
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_TIM_MspPostInit+0xb8>)
 8000d7c:	f000 ff70 	bl	8001c60 <HAL_GPIO_Init>
}
 8000d80:	bf00      	nop
 8000d82:	3728      	adds	r7, #40	; 0x28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40000400 	.word	0x40000400

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a34      	ldr	r2, [pc, #208]	; (8000e88 <HAL_UART_MspInit+0xf0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d162      	bne.n	8000e80 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a32      	ldr	r2, [pc, #200]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_UART_MspInit+0xf4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000df2:	230c      	movs	r3, #12
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e02:	2307      	movs	r3, #7
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4820      	ldr	r0, [pc, #128]	; (8000e90 <HAL_UART_MspInit+0xf8>)
 8000e0e:	f000 ff27 	bl	8001c60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e14:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <HAL_UART_MspInit+0x100>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e56:	f000 fb03 	bl	8001460 <HAL_DMA_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e60:	f7ff fed2 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e68:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_UART_MspInit+0xfc>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2026      	movs	r0, #38	; 0x26
 8000e76:	f000 fabc 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e7a:	2026      	movs	r0, #38	; 0x26
 8000e7c:	f000 fad5 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	; 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	200000d8 	.word	0x200000d8
 8000e98:	40026088 	.word	0x40026088

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef0:	f000 f962 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <DMA1_Stream5_IRQHandler+0x10>)
 8000efe:	f000 fc47 	bl	8001790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000d8 	.word	0x200000d8

08000f0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <USART2_IRQHandler+0x10>)
 8000f12:	f002 fa7b 	bl	800340c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001d8 	.word	0x200001d8

08000f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
	}

return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fd39 	bl	80009ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x12>
	}
	return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	605a      	str	r2, [r3, #4]
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_isatty>:

int _isatty(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x50>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x16>
		heap_end = &end;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <_sbrk+0x50>)
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <_sbrk+0x54>)
 8001010:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <_sbrk+0x50>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <_sbrk+0x50>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4413      	add	r3, r2
 8001020:	466a      	mov	r2, sp
 8001022:	4293      	cmp	r3, r2
 8001024:	d907      	bls.n	8001036 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001026:	f003 f899 	bl	800415c <__errno>
 800102a:	4602      	mov	r2, r0
 800102c:	230c      	movs	r3, #12
 800102e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	e006      	b.n	8001044 <_sbrk+0x48>
	}

	heap_end += incr;
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <_sbrk+0x50>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a03      	ldr	r2, [pc, #12]	; (800104c <_sbrk+0x50>)
 8001040:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200000cc 	.word	0x200000cc
 8001050:	20000220 	.word	0x20000220

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <SystemInit+0x60>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <SystemInit+0x60>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <SystemInit+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <SystemInit+0x64>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <SystemInit+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <SystemInit+0x64>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <SystemInit+0x64>)
 8001080:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001088:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <SystemInit+0x64>)
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <SystemInit+0x68>)
 800108e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <SystemInit+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <SystemInit+0x64>)
 8001096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SystemInit+0x60>)
 80010a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a8:	609a      	str	r2, [r3, #8]
#endif
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	40023800 	.word	0x40023800
 80010bc:	24003010 	.word	0x24003010

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
  ldr  r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e0:	f842 3b04 	str.w	r3, [r2], #4

080010e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ea:	f7ff ffb3 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f003 f83b 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fa45 	bl	8000580 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80010fc:	080052a0 	.word	0x080052a0
  ldr  r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001104:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001108:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800110c:	20000220 	.word	0x20000220

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f94d 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fd66 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f965 	bl	8001446 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f92d 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000004 	.word	0x20000004

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000218 	.word	0x20000218

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000218 	.word	0x20000218

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_Delay+0x40>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffde 	bl	80011e0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
  {
  }
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000008 	.word	0x20000008

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff3e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff31 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff feb8 	bl	80011e0 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e099      	b.n	80015b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0201 	bic.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149c:	e00f      	b.n	80014be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149e:	f7ff fe9f 	bl	80011e0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d908      	bls.n	80014be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2220      	movs	r2, #32
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2203      	movs	r2, #3
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e078      	b.n	80015b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1e8      	bne.n	800149e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <HAL_DMA_Init+0x158>)
 80014d8:	4013      	ands	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4313      	orrs	r3, r2
 800150e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001514:	2b04      	cmp	r3, #4
 8001516:	d107      	bne.n	8001528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4313      	orrs	r3, r2
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4313      	orrs	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	f023 0307 	bic.w	r3, r3, #7
 800153e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	4313      	orrs	r3, r2
 8001548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	2b04      	cmp	r3, #4
 8001550:	d117      	bne.n	8001582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00e      	beq.n	8001582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fb01 	bl	8001b6c <DMA_CheckFifoParam>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800157e:	2301      	movs	r3, #1
 8001580:	e016      	b.n	80015b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fab8 	bl	8001b00 <DMA_CalcBaseAndBitshift>
 8001590:	4603      	mov	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001598:	223f      	movs	r2, #63	; 0x3f
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	f010803f 	.word	0xf010803f

080015bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_DMA_Start_IT+0x26>
 80015de:	2302      	movs	r3, #2
 80015e0:	e040      	b.n	8001664 <HAL_DMA_Start_IT+0xa8>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d12f      	bne.n	8001656 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2202      	movs	r2, #2
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fa4a 	bl	8001aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	223f      	movs	r2, #63	; 0x3f
 8001616:	409a      	lsls	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0216 	orr.w	r2, r2, #22
 800162a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0208 	orr.w	r2, r2, #8
 8001642:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e005      	b.n	8001662 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800165e:	2302      	movs	r3, #2
 8001660:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001662:	7dfb      	ldrb	r3, [r7, #23]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001678:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800167a:	f7ff fdb1 	bl	80011e0 <HAL_GetTick>
 800167e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d008      	beq.n	800169e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e052      	b.n	8001744 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0216 	bic.w	r2, r2, #22
 80016ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_DMA_Abort+0x62>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0208 	bic.w	r2, r2, #8
 80016dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ee:	e013      	b.n	8001718 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f0:	f7ff fd76 	bl	80011e0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d90c      	bls.n	8001718 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2220      	movs	r2, #32
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e015      	b.n	8001744 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1e4      	bne.n	80016f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172a:	223f      	movs	r2, #63	; 0x3f
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d004      	beq.n	800176a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00c      	b.n	8001784 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2205      	movs	r2, #5
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_DMA_IRQHandler+0x258>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a92      	ldr	r2, [pc, #584]	; (80019ec <HAL_DMA_IRQHandler+0x25c>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0a9b      	lsrs	r3, r3, #10
 80017a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ba:	2208      	movs	r2, #8
 80017bc:	409a      	lsls	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d01a      	beq.n	80017fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0204 	bic.w	r2, r2, #4
 80017e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2208      	movs	r2, #8
 80017ea:	409a      	lsls	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	2201      	movs	r2, #1
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d012      	beq.n	8001832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2201      	movs	r2, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	f043 0202 	orr.w	r2, r3, #2
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2204      	movs	r2, #4
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d012      	beq.n	8001868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001854:	2204      	movs	r2, #4
 8001856:	409a      	lsls	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	f043 0204 	orr.w	r2, r3, #4
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	2210      	movs	r2, #16
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d043      	beq.n	8001900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d03c      	beq.n	8001900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188a:	2210      	movs	r2, #16
 800188c:	409a      	lsls	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d018      	beq.n	80018d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d108      	bne.n	80018c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d024      	beq.n	8001900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
 80018be:	e01f      	b.n	8001900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01b      	beq.n	8001900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4798      	blx	r3
 80018d0:	e016      	b.n	8001900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d107      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0208 	bic.w	r2, r2, #8
 80018ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001904:	2220      	movs	r2, #32
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 808e 	beq.w	8001a2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 8086 	beq.w	8001a2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001926:	2220      	movs	r2, #32
 8001928:	409a      	lsls	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b05      	cmp	r3, #5
 8001938:	d136      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0216 	bic.w	r2, r2, #22
 8001948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <HAL_DMA_IRQHandler+0x1da>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0208 	bic.w	r2, r2, #8
 8001978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197e:	223f      	movs	r2, #63	; 0x3f
 8001980:	409a      	lsls	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199a:	2b00      	cmp	r3, #0
 800199c:	d07d      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
        }
        return;
 80019a6:	e078      	b.n	8001a9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01c      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d108      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d030      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
 80019d4:	e02b      	b.n	8001a2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d027      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	4798      	blx	r3
 80019e6:	e022      	b.n	8001a2e <HAL_DMA_IRQHandler+0x29e>
 80019e8:	20000000 	.word	0x20000000
 80019ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0210 	bic.w	r2, r2, #16
 8001a0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d032      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d022      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2205      	movs	r2, #5
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0201 	bic.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d307      	bcc.n	8001a76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f2      	bne.n	8001a5a <HAL_DMA_IRQHandler+0x2ca>
 8001a74:	e000      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a9a:	bf00      	nop
    }
  }
}
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop

08001aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d108      	bne.n	8001ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ae2:	e007      	b.n	8001af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3b10      	subs	r3, #16
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <DMA_CalcBaseAndBitshift+0x64>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <DMA_CalcBaseAndBitshift+0x68>)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d909      	bls.n	8001b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b36:	f023 0303 	bic.w	r3, r3, #3
 8001b3a:	1d1a      	adds	r2, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b40:	e007      	b.n	8001b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	aaaaaaab 	.word	0xaaaaaaab
 8001b68:	080051f0 	.word	0x080051f0

08001b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11f      	bne.n	8001bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d855      	bhi.n	8001c38 <DMA_CheckFifoParam+0xcc>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <DMA_CheckFifoParam+0x28>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bb7 	.word	0x08001bb7
 8001b9c:	08001ba5 	.word	0x08001ba5
 8001ba0:	08001c39 	.word	0x08001c39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d045      	beq.n	8001c3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb4:	e042      	b.n	8001c3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bbe:	d13f      	bne.n	8001c40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc4:	e03c      	b.n	8001c40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bce:	d121      	bne.n	8001c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d836      	bhi.n	8001c44 <DMA_CheckFifoParam+0xd8>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <DMA_CheckFifoParam+0x70>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bf3 	.word	0x08001bf3
 8001be4:	08001bed 	.word	0x08001bed
 8001be8:	08001c05 	.word	0x08001c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf0:	e02f      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d024      	beq.n	8001c48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c02:	e021      	b.n	8001c48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c0c:	d11e      	bne.n	8001c4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c12:	e01b      	b.n	8001c4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d902      	bls.n	8001c20 <DMA_CheckFifoParam+0xb4>
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d003      	beq.n	8001c26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c1e:	e018      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
      break;
 8001c24:	e015      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00e      	beq.n	8001c50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
      break;
 8001c36:	e00b      	b.n	8001c50 <DMA_CheckFifoParam+0xe4>
      break;
 8001c38:	bf00      	nop
 8001c3a:	e00a      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;
 8001c3c:	bf00      	nop
 8001c3e:	e008      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;
 8001c40:	bf00      	nop
 8001c42:	e006      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;
 8001c44:	bf00      	nop
 8001c46:	e004      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;
 8001c48:	bf00      	nop
 8001c4a:	e002      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c4c:	bf00      	nop
 8001c4e:	e000      	b.n	8001c52 <DMA_CheckFifoParam+0xe6>
      break;
 8001c50:	bf00      	nop
    }
  } 
  
  return status; 
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	e159      	b.n	8001f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8148 	bne.w	8001f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d00b      	beq.n	8001cba <HAL_GPIO_Init+0x5a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cae:	2b11      	cmp	r3, #17
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0xfc>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b12      	cmp	r3, #18
 8001d5a:	d123      	bne.n	8001da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	08da      	lsrs	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3208      	adds	r2, #8
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	220f      	movs	r2, #15
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	08da      	lsrs	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3208      	adds	r2, #8
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a2 	beq.w	8001f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <HAL_GPIO_Init+0x2e4>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_GPIO_Init+0x2e4>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_GPIO_Init+0x2e4>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e02:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_GPIO_Init+0x2e8>)
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_GPIO_Init+0x2ec>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0x202>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <HAL_GPIO_Init+0x2f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x1fe>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <HAL_GPIO_Init+0x2f4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x1fa>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a45      	ldr	r2, [pc, #276]	; (8001f58 <HAL_GPIO_Init+0x2f8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x1f6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a44      	ldr	r2, [pc, #272]	; (8001f5c <HAL_GPIO_Init+0x2fc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x1f2>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e008      	b.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e004      	b.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e002      	b.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x204>
 8001e62:	2300      	movs	r3, #0
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f002 0203 	and.w	r2, r2, #3
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	4093      	lsls	r3, r2
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e74:	4934      	ldr	r1, [pc, #208]	; (8001f48 <HAL_GPIO_Init+0x2e8>)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea6:	4a2e      	ldr	r2, [pc, #184]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a19      	ldr	r2, [pc, #100]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_GPIO_Init+0x300>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	f67f aea2 	bls.w	8001c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3724      	adds	r7, #36	; 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40020400 	.word	0x40020400
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020c00 	.word	0x40020c00
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e25b      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d075      	beq.n	80020a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb6:	4ba3      	ldr	r3, [pc, #652]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d00c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4ba0      	ldr	r3, [pc, #640]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d112      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b9d      	ldr	r3, [pc, #628]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4b99      	ldr	r3, [pc, #612]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x108>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d157      	bne.n	80020a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e236      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x74>
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a90      	ldr	r2, [pc, #576]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xb0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x98>
 8002016:	4b8b      	ldr	r3, [pc, #556]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a8a      	ldr	r2, [pc, #552]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a87      	ldr	r2, [pc, #540]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xb0>
 8002030:	4b84      	ldr	r3, [pc, #528]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a83      	ldr	r2, [pc, #524]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b81      	ldr	r3, [pc, #516]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a80      	ldr	r2, [pc, #512]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff f8c6 	bl	80011e0 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f8c2 	bl	80011e0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1fb      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xc0>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f8b2 	bl	80011e0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f8ae 	bl	80011e0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1e7      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b6c      	ldr	r3, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0xe8>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x152>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1bb      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b56      	ldr	r3, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4952      	ldr	r1, [pc, #328]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b4f      	ldr	r3, [pc, #316]	; (8002248 <HAL_RCC_OscConfig+0x2b0>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f867 	bl	80011e0 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff f863 	bl	80011e0 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e19c      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4940      	ldr	r1, [pc, #256]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b3f      	ldr	r3, [pc, #252]	; (8002248 <HAL_RCC_OscConfig+0x2b0>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f846 	bl	80011e0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002158:	f7ff f842 	bl	80011e0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e17b      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d030      	beq.n	80021e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d016      	beq.n	80021b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_RCC_OscConfig+0x2b4>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff f826 	bl	80011e0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f822 	bl	80011e0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e15b      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x200>
 80021b6:	e015      	b.n	80021e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x2b4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021be:	f7ff f80f 	bl	80011e0 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c6:	f7ff f80b 	bl	80011e0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e144      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a0 	beq.w	8002332 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_OscConfig+0x2b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d121      	bne.n	8002272 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x2b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_RCC_OscConfig+0x2b8>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe ffd1 	bl	80011e0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e011      	b.n	8002266 <HAL_RCC_OscConfig+0x2ce>
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	42470000 	.word	0x42470000
 800224c:	42470e80 	.word	0x42470e80
 8002250:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe ffc4 	bl	80011e0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0fd      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b81      	ldr	r3, [pc, #516]	; (800246c <HAL_RCC_OscConfig+0x4d4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d106      	bne.n	8002288 <HAL_RCC_OscConfig+0x2f0>
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	e01c      	b.n	80022c2 <HAL_RCC_OscConfig+0x32a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b05      	cmp	r3, #5
 800228e:	d10c      	bne.n	80022aa <HAL_RCC_OscConfig+0x312>
 8002290:	4b77      	ldr	r3, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a76      	ldr	r2, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a73      	ldr	r2, [pc, #460]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0x32a>
 80022aa:	4b71      	ldr	r3, [pc, #452]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a70      	ldr	r2, [pc, #448]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a6d      	ldr	r2, [pc, #436]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80022bc:	f023 0304 	bic.w	r3, r3, #4
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d015      	beq.n	80022f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7fe ff89 	bl	80011e0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe ff85 	bl	80011e0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0bc      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ee      	beq.n	80022d2 <HAL_RCC_OscConfig+0x33a>
 80022f4:	e014      	b.n	8002320 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff73 	bl	80011e0 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe ff6f 	bl	80011e0 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	; 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e0a6      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d105      	bne.n	8002332 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002326:	4b52      	ldr	r3, [pc, #328]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a51      	ldr	r2, [pc, #324]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 800232c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 8092 	beq.w	8002460 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233c:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d05c      	beq.n	8002402 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d141      	bne.n	80023d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7fe ff43 	bl	80011e0 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe ff3f 	bl	80011e0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e078      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002370:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f0      	bne.n	800235e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	019b      	lsls	r3, r3, #6
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	4933      	ldr	r1, [pc, #204]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe ff18 	bl	80011e0 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b4:	f7fe ff14 	bl	80011e0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e04d      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x41c>
 80023d2:	e045      	b.n	8002460 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe ff01 	bl	80011e0 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e2:	f7fe fefd 	bl	80011e0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e036      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x44a>
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e029      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_RCC_OscConfig+0x4d8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	429a      	cmp	r2, r3
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d115      	bne.n	800245c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002436:	4013      	ands	r3, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800243c:	4293      	cmp	r3, r2
 800243e:	d10d      	bne.n	800245c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40007000 	.word	0x40007000
 8002470:	40023800 	.word	0x40023800
 8002474:	42470060 	.word	0x42470060

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0cc      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d90c      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d044      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d119      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d003      	beq.n	8002536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	2b03      	cmp	r3, #3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e067      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4934      	ldr	r1, [pc, #208]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe fe3a 	bl	80011e0 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fe36 	bl	80011e0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d20c      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4601      	mov	r1, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	5cd3      	ldrb	r3, [r2, r3]
 8002612:	fa21 f303 	lsr.w	r3, r1, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fd9a 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00
 8002634:	40023800 	.word	0x40023800
 8002638:	080051d8 	.word	0x080051d8
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	2300      	movs	r3, #0
 8002654:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d007      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x32>
 8002666:	2b08      	cmp	r3, #8
 8002668:	d008      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x38>
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80b4 	bne.w	80027d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002670:	4b5e      	ldr	r3, [pc, #376]	; (80027ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002672:	60bb      	str	r3, [r7, #8]
       break;
 8002674:	e0b3      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002676:	4b5e      	ldr	r3, [pc, #376]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002678:	60bb      	str	r3, [r7, #8]
      break;
 800267a:	e0b0      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800267c:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002684:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002686:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d04a      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002692:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	099b      	lsrs	r3, r3, #6
 8002698:	f04f 0400 	mov.w	r4, #0
 800269c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	ea03 0501 	and.w	r5, r3, r1
 80026a8:	ea04 0602 	and.w	r6, r4, r2
 80026ac:	4629      	mov	r1, r5
 80026ae:	4632      	mov	r2, r6
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	f04f 0400 	mov.w	r4, #0
 80026b8:	0154      	lsls	r4, r2, #5
 80026ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026be:	014b      	lsls	r3, r1, #5
 80026c0:	4619      	mov	r1, r3
 80026c2:	4622      	mov	r2, r4
 80026c4:	1b49      	subs	r1, r1, r5
 80026c6:	eb62 0206 	sbc.w	r2, r2, r6
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	f04f 0400 	mov.w	r4, #0
 80026d2:	0194      	lsls	r4, r2, #6
 80026d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026d8:	018b      	lsls	r3, r1, #6
 80026da:	1a5b      	subs	r3, r3, r1
 80026dc:	eb64 0402 	sbc.w	r4, r4, r2
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	00e2      	lsls	r2, r4, #3
 80026ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026ee:	00d9      	lsls	r1, r3, #3
 80026f0:	460b      	mov	r3, r1
 80026f2:	4614      	mov	r4, r2
 80026f4:	195b      	adds	r3, r3, r5
 80026f6:	eb44 0406 	adc.w	r4, r4, r6
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	0262      	lsls	r2, r4, #9
 8002704:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002708:	0259      	lsls	r1, r3, #9
 800270a:	460b      	mov	r3, r1
 800270c:	4614      	mov	r4, r2
 800270e:	4618      	mov	r0, r3
 8002710:	4621      	mov	r1, r4
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f04f 0400 	mov.w	r4, #0
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	f7fd fdb0 	bl	8000280 <__aeabi_uldivmod>
 8002720:	4603      	mov	r3, r0
 8002722:	460c      	mov	r4, r1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e049      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	f04f 0400 	mov.w	r4, #0
 8002732:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	ea03 0501 	and.w	r5, r3, r1
 800273e:	ea04 0602 	and.w	r6, r4, r2
 8002742:	4629      	mov	r1, r5
 8002744:	4632      	mov	r2, r6
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	f04f 0400 	mov.w	r4, #0
 800274e:	0154      	lsls	r4, r2, #5
 8002750:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002754:	014b      	lsls	r3, r1, #5
 8002756:	4619      	mov	r1, r3
 8002758:	4622      	mov	r2, r4
 800275a:	1b49      	subs	r1, r1, r5
 800275c:	eb62 0206 	sbc.w	r2, r2, r6
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	f04f 0400 	mov.w	r4, #0
 8002768:	0194      	lsls	r4, r2, #6
 800276a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800276e:	018b      	lsls	r3, r1, #6
 8002770:	1a5b      	subs	r3, r3, r1
 8002772:	eb64 0402 	sbc.w	r4, r4, r2
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002784:	00d9      	lsls	r1, r3, #3
 8002786:	460b      	mov	r3, r1
 8002788:	4614      	mov	r4, r2
 800278a:	195b      	adds	r3, r3, r5
 800278c:	eb44 0406 	adc.w	r4, r4, r6
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	02a2      	lsls	r2, r4, #10
 800279a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800279e:	0299      	lsls	r1, r3, #10
 80027a0:	460b      	mov	r3, r1
 80027a2:	4614      	mov	r4, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	4621      	mov	r1, r4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f04f 0400 	mov.w	r4, #0
 80027ae:	461a      	mov	r2, r3
 80027b0:	4623      	mov	r3, r4
 80027b2:	f7fd fd65 	bl	8000280 <__aeabi_uldivmod>
 80027b6:	4603      	mov	r3, r0
 80027b8:	460c      	mov	r4, r1
 80027ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0c1b      	lsrs	r3, r3, #16
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	3301      	adds	r3, #1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	60bb      	str	r3, [r7, #8]
      break;
 80027d6:	e002      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027da:	60bb      	str	r3, [r7, #8]
      break;
 80027dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027de:	68bb      	ldr	r3, [r7, #8]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4601      	mov	r1, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	080051e8 	.word	0x080051e8

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4601      	mov	r1, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	080051e8 	.word	0x080051e8

0800285c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e01d      	b.n	80028aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f9f0 	bl	8000c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 f902 	bl	8002aa4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2201      	movs	r2, #1
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 faf8 	bl	8002ebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_TIM_PWM_Start+0x60>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d107      	bne.n	80028e6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d007      	beq.n	8002908 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40010000 	.word	0x40010000

08002918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800292e:	2302      	movs	r3, #2
 8002930:	e0b4      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	f200 809f 	bhi.w	8002a88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800294a:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800294c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002950:	08002985 	.word	0x08002985
 8002954:	08002a89 	.word	0x08002a89
 8002958:	08002a89 	.word	0x08002a89
 800295c:	08002a89 	.word	0x08002a89
 8002960:	080029c5 	.word	0x080029c5
 8002964:	08002a89 	.word	0x08002a89
 8002968:	08002a89 	.word	0x08002a89
 800296c:	08002a89 	.word	0x08002a89
 8002970:	08002a07 	.word	0x08002a07
 8002974:	08002a89 	.word	0x08002a89
 8002978:	08002a89 	.word	0x08002a89
 800297c:	08002a89 	.word	0x08002a89
 8002980:	08002a47 	.word	0x08002a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f90a 	bl	8002ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0208 	orr.w	r2, r2, #8
 800299e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0204 	bic.w	r2, r2, #4
 80029ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6999      	ldr	r1, [r3, #24]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	619a      	str	r2, [r3, #24]
      break;
 80029c2:	e062      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f950 	bl	8002c70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6999      	ldr	r1, [r3, #24]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	021a      	lsls	r2, r3, #8
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	619a      	str	r2, [r3, #24]
      break;
 8002a04:	e041      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f99b 	bl	8002d48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0208 	orr.w	r2, r2, #8
 8002a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69da      	ldr	r2, [r3, #28]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0204 	bic.w	r2, r2, #4
 8002a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
      break;
 8002a44:	e021      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f9e5 	bl	8002e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69d9      	ldr	r1, [r3, #28]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	021a      	lsls	r2, r3, #8
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	61da      	str	r2, [r3, #28]
      break;
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <TIM_Base_SetConfig+0xe4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d00f      	beq.n	8002adc <TIM_Base_SetConfig+0x38>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d00b      	beq.n	8002adc <TIM_Base_SetConfig+0x38>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a31      	ldr	r2, [pc, #196]	; (8002b8c <TIM_Base_SetConfig+0xe8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d007      	beq.n	8002adc <TIM_Base_SetConfig+0x38>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a30      	ldr	r2, [pc, #192]	; (8002b90 <TIM_Base_SetConfig+0xec>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d003      	beq.n	8002adc <TIM_Base_SetConfig+0x38>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <TIM_Base_SetConfig+0xf0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d108      	bne.n	8002aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a25      	ldr	r2, [pc, #148]	; (8002b88 <TIM_Base_SetConfig+0xe4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01b      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d017      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <TIM_Base_SetConfig+0xe8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <TIM_Base_SetConfig+0xec>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00f      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <TIM_Base_SetConfig+0xf0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <TIM_Base_SetConfig+0xf4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <TIM_Base_SetConfig+0xf8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0x8a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <TIM_Base_SetConfig+0xfc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <TIM_Base_SetConfig+0xe4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d103      	bne.n	8002b74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	615a      	str	r2, [r3, #20]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0201 	bic.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 0302 	bic.w	r3, r3, #2
 8002bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a1c      	ldr	r2, [pc, #112]	; (8002c6c <TIM_OC1_SetConfig+0xc8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d10c      	bne.n	8002c1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0308 	bic.w	r3, r3, #8
 8002c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <TIM_OC1_SetConfig+0xc8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d111      	bne.n	8002c46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	621a      	str	r2, [r3, #32]
}
 8002c60:	bf00      	nop
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40010000 	.word	0x40010000

08002c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0210 	bic.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0320 	bic.w	r3, r3, #32
 8002cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <TIM_OC2_SetConfig+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10d      	bne.n	8002cec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a15      	ldr	r2, [pc, #84]	; (8002d44 <TIM_OC2_SetConfig+0xd4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d113      	bne.n	8002d1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000

08002d48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0303 	bic.w	r3, r3, #3
 8002d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <TIM_OC3_SetConfig+0xd0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10d      	bne.n	8002dc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <TIM_OC3_SetConfig+0xd0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d113      	bne.n	8002df2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	40010000 	.word	0x40010000

08002e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	031b      	lsls	r3, r3, #12
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <TIM_OC4_SetConfig+0x9c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d109      	bne.n	8002e90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	019b      	lsls	r3, r3, #6
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40010000 	.word	0x40010000

08002ebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2201      	movs	r2, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e050      	b.n	8002fc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a1c      	ldr	r2, [pc, #112]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d018      	beq.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d013      	beq.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10c      	bne.n	8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40010000 	.word	0x40010000
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40000800 	.word	0x40000800
 8002fdc:	40000c00 	.word	0x40000c00
 8002fe0:	40014000 	.word	0x40014000

08002fe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e03d      	b.n	800307c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e03f      	b.n	800311a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fe72 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fcc9 	bl	8003a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af02      	add	r7, sp, #8
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	f040 8083 	bne.w	800324a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_UART_Transmit+0x2e>
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e07b      	b.n	800324c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_UART_Transmit+0x40>
 800315e:	2302      	movs	r3, #2
 8003160:	e074      	b.n	800324c <HAL_UART_Transmit+0x12a>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2221      	movs	r2, #33	; 0x21
 8003174:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003178:	f7fe f832 	bl	80011e0 <HAL_GetTick>
 800317c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003192:	e042      	b.n	800321a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d122      	bne.n	80031f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fad2 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e042      	b.n	800324c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	3302      	adds	r3, #2
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	e017      	b.n	800321a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	e013      	b.n	800321a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 faaf 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e01f      	b.n	800324c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	60ba      	str	r2, [r7, #8]
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1b7      	bne.n	8003194 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa96 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e006      	b.n	800324c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
  }
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d166      	bne.n	800333c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Receive_DMA+0x26>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e05f      	b.n	800333e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_UART_Receive_DMA+0x38>
 8003288:	2302      	movs	r3, #2
 800328a:	e058      	b.n	800333e <HAL_UART_Receive_DMA+0xea>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2222      	movs	r2, #34	; 0x22
 80032aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <HAL_UART_Receive_DMA+0xf4>)
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	4a24      	ldr	r2, [pc, #144]	; (800334c <HAL_UART_Receive_DMA+0xf8>)
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	4a23      	ldr	r2, [pc, #140]	; (8003350 <HAL_UART_Receive_DMA+0xfc>)
 80032c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	2200      	movs	r2, #0
 80032cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3304      	adds	r3, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	f7fe f969 	bl	80015bc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003316:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003336:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	08003649 	.word	0x08003649
 800334c:	080036b1 	.word	0x080036b1
 8003350:	080036cd 	.word	0x080036cd

08003354 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800336a:	2b80      	cmp	r3, #128	; 0x80
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b21      	cmp	r3, #33	; 0x21
 8003380:	d116      	bne.n	80033b0 <HAL_UART_DMAStop+0x5c>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003396:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fe f961 	bl	800166c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa22 	bl	80037f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b22      	cmp	r3, #34	; 0x22
 80033d0:	d116      	bne.n	8003400 <HAL_UART_DMAStop+0xac>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe f939 	bl	800166c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa10 	bl	8003820 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10d      	bne.n	800345e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <HAL_UART_IRQHandler+0x52>
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa82 	bl	8003960 <UART_Receive_IT>
      return;
 800345c:	e0d1      	b.n	8003602 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80b0 	beq.w	80035c6 <HAL_UART_IRQHandler+0x1ba>
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_UART_IRQHandler+0x70>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80a5 	beq.w	80035c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_UART_IRQHandler+0x90>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_UART_IRQHandler+0xb0>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	f043 0202 	orr.w	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_UART_IRQHandler+0xd0>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00f      	beq.n	8003506 <HAL_UART_IRQHandler+0xfa>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <HAL_UART_IRQHandler+0xee>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	f043 0208 	orr.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d078      	beq.n	8003600 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_UART_IRQHandler+0x11c>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa1c 	bl	8003960 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_UART_IRQHandler+0x144>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d031      	beq.n	80035b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f965 	bl	8003820 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d123      	bne.n	80035ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003572:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_UART_IRQHandler+0x1fc>)
 8003582:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe f8df 	bl	800174c <HAL_DMA_Abort_IT>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800359e:	4610      	mov	r0, r2
 80035a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a2:	e00e      	b.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f845 	bl	8003634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035aa:	e00a      	b.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f841 	bl	8003634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b2:	e006      	b.n	80035c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f83d 	bl	8003634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035c0:	e01e      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c2:	bf00      	nop
    return;
 80035c4:	e01c      	b.n	8003600 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1d6>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f952 	bl	8003884 <UART_Transmit_IT>
    return;
 80035e0:	e00f      	b.n	8003602 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_UART_IRQHandler+0x1f6>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f99a 	bl	8003930 <UART_EndTransmit_IT>
    return;
 80035fc:	bf00      	nop
 80035fe:	e000      	b.n	8003602 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003600:	bf00      	nop
  }
}
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	0800385d 	.word	0x0800385d

0800360c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11e      	bne.n	80036a2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003678:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695a      	ldr	r2, [r3, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003698:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7fd f9b4 	bl	8000a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff ffae 	bl	8003620 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b21      	cmp	r3, #33	; 0x21
 80036fe:	d108      	bne.n	8003712 <UART_DMAError+0x46>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f000 f871 	bl	80037f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b22      	cmp	r3, #34	; 0x22
 8003732:	d108      	bne.n	8003746 <UART_DMAError+0x7a>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003740:	68b8      	ldr	r0, [r7, #8]
 8003742:	f000 f86d 	bl	8003820 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	f043 0210 	orr.w	r2, r3, #16
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003752:	68b8      	ldr	r0, [r7, #8]
 8003754:	f7ff ff6e 	bl	8003634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003770:	e02c      	b.n	80037cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <UART_WaitOnFlagUntilTimeout+0x30>
 8003780:	f7fd fd2e 	bl	80011e0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	429a      	cmp	r2, r3
 800378e:	d21d      	bcs.n	80037cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800379e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e00f      	b.n	80037ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d0c3      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800380a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003836:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695a      	ldr	r2, [r3, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0201 	bic.w	r2, r2, #1
 8003846:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fedc 	bl	8003634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b21      	cmp	r3, #33	; 0x21
 8003896:	d144      	bne.n	8003922 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d11a      	bne.n	80038d8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	1c9a      	adds	r2, r3, #2
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	621a      	str	r2, [r3, #32]
 80038ca:	e00e      	b.n	80038ea <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]
 80038d6:	e008      	b.n	80038ea <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6211      	str	r1, [r2, #32]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4619      	mov	r1, r3
 80038f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800390c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003946:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fe5b 	bl	800360c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b22      	cmp	r3, #34	; 0x22
 8003972:	d171      	bne.n	8003a58 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d123      	bne.n	80039c6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10e      	bne.n	80039aa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
 80039a8:	e029      	b.n	80039fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
 80039c4:	e01b      	b.n	80039fe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6858      	ldr	r0, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	1c59      	adds	r1, r3, #1
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6291      	str	r1, [r2, #40]	; 0x28
 80039de:	b2c2      	uxtb	r2, r0
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e00c      	b.n	80039fe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	1c58      	adds	r0, r3, #1
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	6288      	str	r0, [r1, #40]	; 0x28
 80039f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d120      	bne.n	8003a54 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0220 	bic.w	r2, r2, #32
 8003a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0201 	bic.w	r2, r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fc ffe0 	bl	8000a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e002      	b.n	8003a5a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aa6:	f023 030c 	bic.w	r3, r3, #12
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad2:	f040 818b 	bne.w	8003dec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4ac1      	ldr	r2, [pc, #772]	; (8003de0 <UART_SetConfig+0x37c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d005      	beq.n	8003aec <UART_SetConfig+0x88>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4abf      	ldr	r2, [pc, #764]	; (8003de4 <UART_SetConfig+0x380>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	f040 80bd 	bne.w	8003c66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aec:	f7fe fea2 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003af0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	461d      	mov	r5, r3
 8003af6:	f04f 0600 	mov.w	r6, #0
 8003afa:	46a8      	mov	r8, r5
 8003afc:	46b1      	mov	r9, r6
 8003afe:	eb18 0308 	adds.w	r3, r8, r8
 8003b02:	eb49 0409 	adc.w	r4, r9, r9
 8003b06:	4698      	mov	r8, r3
 8003b08:	46a1      	mov	r9, r4
 8003b0a:	eb18 0805 	adds.w	r8, r8, r5
 8003b0e:	eb49 0906 	adc.w	r9, r9, r6
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b26:	4688      	mov	r8, r1
 8003b28:	4691      	mov	r9, r2
 8003b2a:	eb18 0005 	adds.w	r0, r8, r5
 8003b2e:	eb49 0106 	adc.w	r1, r9, r6
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	461d      	mov	r5, r3
 8003b38:	f04f 0600 	mov.w	r6, #0
 8003b3c:	196b      	adds	r3, r5, r5
 8003b3e:	eb46 0406 	adc.w	r4, r6, r6
 8003b42:	461a      	mov	r2, r3
 8003b44:	4623      	mov	r3, r4
 8003b46:	f7fc fb9b 	bl	8000280 <__aeabi_uldivmod>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4ba5      	ldr	r3, [pc, #660]	; (8003de8 <UART_SetConfig+0x384>)
 8003b52:	fba3 2302 	umull	r2, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	461d      	mov	r5, r3
 8003b60:	f04f 0600 	mov.w	r6, #0
 8003b64:	46a9      	mov	r9, r5
 8003b66:	46b2      	mov	sl, r6
 8003b68:	eb19 0309 	adds.w	r3, r9, r9
 8003b6c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b70:	4699      	mov	r9, r3
 8003b72:	46a2      	mov	sl, r4
 8003b74:	eb19 0905 	adds.w	r9, r9, r5
 8003b78:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b90:	4689      	mov	r9, r1
 8003b92:	4692      	mov	sl, r2
 8003b94:	eb19 0005 	adds.w	r0, r9, r5
 8003b98:	eb4a 0106 	adc.w	r1, sl, r6
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	f04f 0600 	mov.w	r6, #0
 8003ba6:	196b      	adds	r3, r5, r5
 8003ba8:	eb46 0406 	adc.w	r4, r6, r6
 8003bac:	461a      	mov	r2, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	f7fc fb66 	bl	8000280 <__aeabi_uldivmod>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <UART_SetConfig+0x384>)
 8003bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2164      	movs	r1, #100	; 0x64
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	4a86      	ldr	r2, [pc, #536]	; (8003de8 <UART_SetConfig+0x384>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bdc:	4498      	add	r8, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	461d      	mov	r5, r3
 8003be2:	f04f 0600 	mov.w	r6, #0
 8003be6:	46a9      	mov	r9, r5
 8003be8:	46b2      	mov	sl, r6
 8003bea:	eb19 0309 	adds.w	r3, r9, r9
 8003bee:	eb4a 040a 	adc.w	r4, sl, sl
 8003bf2:	4699      	mov	r9, r3
 8003bf4:	46a2      	mov	sl, r4
 8003bf6:	eb19 0905 	adds.w	r9, r9, r5
 8003bfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c12:	4689      	mov	r9, r1
 8003c14:	4692      	mov	sl, r2
 8003c16:	eb19 0005 	adds.w	r0, r9, r5
 8003c1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	461d      	mov	r5, r3
 8003c24:	f04f 0600 	mov.w	r6, #0
 8003c28:	196b      	adds	r3, r5, r5
 8003c2a:	eb46 0406 	adc.w	r4, r6, r6
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4623      	mov	r3, r4
 8003c32:	f7fc fb25 	bl	8000280 <__aeabi_uldivmod>
 8003c36:	4603      	mov	r3, r0
 8003c38:	460c      	mov	r4, r1
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <UART_SetConfig+0x384>)
 8003c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2164      	movs	r1, #100	; 0x64
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	3332      	adds	r3, #50	; 0x32
 8003c50:	4a65      	ldr	r2, [pc, #404]	; (8003de8 <UART_SetConfig+0x384>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 0207 	and.w	r2, r3, #7
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4442      	add	r2, r8
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e26f      	b.n	8004146 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c66:	f7fe fdd1 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003c6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	461d      	mov	r5, r3
 8003c70:	f04f 0600 	mov.w	r6, #0
 8003c74:	46a8      	mov	r8, r5
 8003c76:	46b1      	mov	r9, r6
 8003c78:	eb18 0308 	adds.w	r3, r8, r8
 8003c7c:	eb49 0409 	adc.w	r4, r9, r9
 8003c80:	4698      	mov	r8, r3
 8003c82:	46a1      	mov	r9, r4
 8003c84:	eb18 0805 	adds.w	r8, r8, r5
 8003c88:	eb49 0906 	adc.w	r9, r9, r6
 8003c8c:	f04f 0100 	mov.w	r1, #0
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ca0:	4688      	mov	r8, r1
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	eb18 0005 	adds.w	r0, r8, r5
 8003ca8:	eb49 0106 	adc.w	r1, r9, r6
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	461d      	mov	r5, r3
 8003cb2:	f04f 0600 	mov.w	r6, #0
 8003cb6:	196b      	adds	r3, r5, r5
 8003cb8:	eb46 0406 	adc.w	r4, r6, r6
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	f7fc fade 	bl	8000280 <__aeabi_uldivmod>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <UART_SetConfig+0x384>)
 8003ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	461d      	mov	r5, r3
 8003cda:	f04f 0600 	mov.w	r6, #0
 8003cde:	46a9      	mov	r9, r5
 8003ce0:	46b2      	mov	sl, r6
 8003ce2:	eb19 0309 	adds.w	r3, r9, r9
 8003ce6:	eb4a 040a 	adc.w	r4, sl, sl
 8003cea:	4699      	mov	r9, r3
 8003cec:	46a2      	mov	sl, r4
 8003cee:	eb19 0905 	adds.w	r9, r9, r5
 8003cf2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cf6:	f04f 0100 	mov.w	r1, #0
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d0a:	4689      	mov	r9, r1
 8003d0c:	4692      	mov	sl, r2
 8003d0e:	eb19 0005 	adds.w	r0, r9, r5
 8003d12:	eb4a 0106 	adc.w	r1, sl, r6
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	f04f 0600 	mov.w	r6, #0
 8003d20:	196b      	adds	r3, r5, r5
 8003d22:	eb46 0406 	adc.w	r4, r6, r6
 8003d26:	461a      	mov	r2, r3
 8003d28:	4623      	mov	r3, r4
 8003d2a:	f7fc faa9 	bl	8000280 <__aeabi_uldivmod>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	461a      	mov	r2, r3
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <UART_SetConfig+0x384>)
 8003d36:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2164      	movs	r1, #100	; 0x64
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <UART_SetConfig+0x384>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d56:	4498      	add	r8, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	461d      	mov	r5, r3
 8003d5c:	f04f 0600 	mov.w	r6, #0
 8003d60:	46a9      	mov	r9, r5
 8003d62:	46b2      	mov	sl, r6
 8003d64:	eb19 0309 	adds.w	r3, r9, r9
 8003d68:	eb4a 040a 	adc.w	r4, sl, sl
 8003d6c:	4699      	mov	r9, r3
 8003d6e:	46a2      	mov	sl, r4
 8003d70:	eb19 0905 	adds.w	r9, r9, r5
 8003d74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d8c:	4689      	mov	r9, r1
 8003d8e:	4692      	mov	sl, r2
 8003d90:	eb19 0005 	adds.w	r0, r9, r5
 8003d94:	eb4a 0106 	adc.w	r1, sl, r6
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	f04f 0600 	mov.w	r6, #0
 8003da2:	196b      	adds	r3, r5, r5
 8003da4:	eb46 0406 	adc.w	r4, r6, r6
 8003da8:	461a      	mov	r2, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	f7fc fa68 	bl	8000280 <__aeabi_uldivmod>
 8003db0:	4603      	mov	r3, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <UART_SetConfig+0x384>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	; 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	3332      	adds	r3, #50	; 0x32
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <UART_SetConfig+0x384>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4442      	add	r2, r8
 8003ddc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003dde:	e1b2      	b.n	8004146 <UART_SetConfig+0x6e2>
 8003de0:	40011000 	.word	0x40011000
 8003de4:	40011400 	.word	0x40011400
 8003de8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4ad7      	ldr	r2, [pc, #860]	; (8004150 <UART_SetConfig+0x6ec>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d005      	beq.n	8003e02 <UART_SetConfig+0x39e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4ad6      	ldr	r2, [pc, #856]	; (8004154 <UART_SetConfig+0x6f0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	f040 80d1 	bne.w	8003fa4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e02:	f7fe fd17 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003e06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	469a      	mov	sl, r3
 8003e0c:	f04f 0b00 	mov.w	fp, #0
 8003e10:	46d0      	mov	r8, sl
 8003e12:	46d9      	mov	r9, fp
 8003e14:	eb18 0308 	adds.w	r3, r8, r8
 8003e18:	eb49 0409 	adc.w	r4, r9, r9
 8003e1c:	4698      	mov	r8, r3
 8003e1e:	46a1      	mov	r9, r4
 8003e20:	eb18 080a 	adds.w	r8, r8, sl
 8003e24:	eb49 090b 	adc.w	r9, r9, fp
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e3c:	4688      	mov	r8, r1
 8003e3e:	4691      	mov	r9, r2
 8003e40:	eb1a 0508 	adds.w	r5, sl, r8
 8003e44:	eb4b 0609 	adc.w	r6, fp, r9
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	f04f 0400 	mov.w	r4, #0
 8003e5a:	0094      	lsls	r4, r2, #2
 8003e5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	461a      	mov	r2, r3
 8003e64:	4623      	mov	r3, r4
 8003e66:	4628      	mov	r0, r5
 8003e68:	4631      	mov	r1, r6
 8003e6a:	f7fc fa09 	bl	8000280 <__aeabi_uldivmod>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460c      	mov	r4, r1
 8003e72:	461a      	mov	r2, r3
 8003e74:	4bb8      	ldr	r3, [pc, #736]	; (8004158 <UART_SetConfig+0x6f4>)
 8003e76:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	469b      	mov	fp, r3
 8003e84:	f04f 0c00 	mov.w	ip, #0
 8003e88:	46d9      	mov	r9, fp
 8003e8a:	46e2      	mov	sl, ip
 8003e8c:	eb19 0309 	adds.w	r3, r9, r9
 8003e90:	eb4a 040a 	adc.w	r4, sl, sl
 8003e94:	4699      	mov	r9, r3
 8003e96:	46a2      	mov	sl, r4
 8003e98:	eb19 090b 	adds.w	r9, r9, fp
 8003e9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb4:	4689      	mov	r9, r1
 8003eb6:	4692      	mov	sl, r2
 8003eb8:	eb1b 0509 	adds.w	r5, fp, r9
 8003ebc:	eb4c 060a 	adc.w	r6, ip, sl
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	f04f 0300 	mov.w	r3, #0
 8003ece:	f04f 0400 	mov.w	r4, #0
 8003ed2:	0094      	lsls	r4, r2, #2
 8003ed4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ed8:	008b      	lsls	r3, r1, #2
 8003eda:	461a      	mov	r2, r3
 8003edc:	4623      	mov	r3, r4
 8003ede:	4628      	mov	r0, r5
 8003ee0:	4631      	mov	r1, r6
 8003ee2:	f7fc f9cd 	bl	8000280 <__aeabi_uldivmod>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b9a      	ldr	r3, [pc, #616]	; (8004158 <UART_SetConfig+0x6f4>)
 8003eee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2164      	movs	r1, #100	; 0x64
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a95      	ldr	r2, [pc, #596]	; (8004158 <UART_SetConfig+0x6f4>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0c:	4498      	add	r8, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	469b      	mov	fp, r3
 8003f12:	f04f 0c00 	mov.w	ip, #0
 8003f16:	46d9      	mov	r9, fp
 8003f18:	46e2      	mov	sl, ip
 8003f1a:	eb19 0309 	adds.w	r3, r9, r9
 8003f1e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f22:	4699      	mov	r9, r3
 8003f24:	46a2      	mov	sl, r4
 8003f26:	eb19 090b 	adds.w	r9, r9, fp
 8003f2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f42:	4689      	mov	r9, r1
 8003f44:	4692      	mov	sl, r2
 8003f46:	eb1b 0509 	adds.w	r5, fp, r9
 8003f4a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4619      	mov	r1, r3
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	f04f 0400 	mov.w	r4, #0
 8003f60:	0094      	lsls	r4, r2, #2
 8003f62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4623      	mov	r3, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	4631      	mov	r1, r6
 8003f70:	f7fc f986 	bl	8000280 <__aeabi_uldivmod>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b77      	ldr	r3, [pc, #476]	; (8004158 <UART_SetConfig+0x6f4>)
 8003f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	3332      	adds	r3, #50	; 0x32
 8003f8e:	4a72      	ldr	r2, [pc, #456]	; (8004158 <UART_SetConfig+0x6f4>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f003 020f 	and.w	r2, r3, #15
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4442      	add	r2, r8
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	e0d0      	b.n	8004146 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fa4:	f7fe fc32 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003fa8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	469a      	mov	sl, r3
 8003fae:	f04f 0b00 	mov.w	fp, #0
 8003fb2:	46d0      	mov	r8, sl
 8003fb4:	46d9      	mov	r9, fp
 8003fb6:	eb18 0308 	adds.w	r3, r8, r8
 8003fba:	eb49 0409 	adc.w	r4, r9, r9
 8003fbe:	4698      	mov	r8, r3
 8003fc0:	46a1      	mov	r9, r4
 8003fc2:	eb18 080a 	adds.w	r8, r8, sl
 8003fc6:	eb49 090b 	adc.w	r9, r9, fp
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fde:	4688      	mov	r8, r1
 8003fe0:	4691      	mov	r9, r2
 8003fe2:	eb1a 0508 	adds.w	r5, sl, r8
 8003fe6:	eb4b 0609 	adc.w	r6, fp, r9
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	f04f 0400 	mov.w	r4, #0
 8003ffc:	0094      	lsls	r4, r2, #2
 8003ffe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004002:	008b      	lsls	r3, r1, #2
 8004004:	461a      	mov	r2, r3
 8004006:	4623      	mov	r3, r4
 8004008:	4628      	mov	r0, r5
 800400a:	4631      	mov	r1, r6
 800400c:	f7fc f938 	bl	8000280 <__aeabi_uldivmod>
 8004010:	4603      	mov	r3, r0
 8004012:	460c      	mov	r4, r1
 8004014:	461a      	mov	r2, r3
 8004016:	4b50      	ldr	r3, [pc, #320]	; (8004158 <UART_SetConfig+0x6f4>)
 8004018:	fba3 2302 	umull	r2, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	469b      	mov	fp, r3
 8004026:	f04f 0c00 	mov.w	ip, #0
 800402a:	46d9      	mov	r9, fp
 800402c:	46e2      	mov	sl, ip
 800402e:	eb19 0309 	adds.w	r3, r9, r9
 8004032:	eb4a 040a 	adc.w	r4, sl, sl
 8004036:	4699      	mov	r9, r3
 8004038:	46a2      	mov	sl, r4
 800403a:	eb19 090b 	adds.w	r9, r9, fp
 800403e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800404e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004056:	4689      	mov	r9, r1
 8004058:	4692      	mov	sl, r2
 800405a:	eb1b 0509 	adds.w	r5, fp, r9
 800405e:	eb4c 060a 	adc.w	r6, ip, sl
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	4619      	mov	r1, r3
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	f04f 0400 	mov.w	r4, #0
 8004074:	0094      	lsls	r4, r2, #2
 8004076:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800407a:	008b      	lsls	r3, r1, #2
 800407c:	461a      	mov	r2, r3
 800407e:	4623      	mov	r3, r4
 8004080:	4628      	mov	r0, r5
 8004082:	4631      	mov	r1, r6
 8004084:	f7fc f8fc 	bl	8000280 <__aeabi_uldivmod>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	461a      	mov	r2, r3
 800408e:	4b32      	ldr	r3, [pc, #200]	; (8004158 <UART_SetConfig+0x6f4>)
 8004090:	fba3 1302 	umull	r1, r3, r3, r2
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	2164      	movs	r1, #100	; 0x64
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	3332      	adds	r3, #50	; 0x32
 80040a2:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <UART_SetConfig+0x6f4>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ae:	4498      	add	r8, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	469b      	mov	fp, r3
 80040b4:	f04f 0c00 	mov.w	ip, #0
 80040b8:	46d9      	mov	r9, fp
 80040ba:	46e2      	mov	sl, ip
 80040bc:	eb19 0309 	adds.w	r3, r9, r9
 80040c0:	eb4a 040a 	adc.w	r4, sl, sl
 80040c4:	4699      	mov	r9, r3
 80040c6:	46a2      	mov	sl, r4
 80040c8:	eb19 090b 	adds.w	r9, r9, fp
 80040cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e4:	4689      	mov	r9, r1
 80040e6:	4692      	mov	sl, r2
 80040e8:	eb1b 0509 	adds.w	r5, fp, r9
 80040ec:	eb4c 060a 	adc.w	r6, ip, sl
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	f04f 0400 	mov.w	r4, #0
 8004102:	0094      	lsls	r4, r2, #2
 8004104:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004108:	008b      	lsls	r3, r1, #2
 800410a:	461a      	mov	r2, r3
 800410c:	4623      	mov	r3, r4
 800410e:	4628      	mov	r0, r5
 8004110:	4631      	mov	r1, r6
 8004112:	f7fc f8b5 	bl	8000280 <__aeabi_uldivmod>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	461a      	mov	r2, r3
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <UART_SetConfig+0x6f4>)
 800411e:	fba3 1302 	umull	r1, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	2164      	movs	r1, #100	; 0x64
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	3332      	adds	r3, #50	; 0x32
 8004130:	4a09      	ldr	r2, [pc, #36]	; (8004158 <UART_SetConfig+0x6f4>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	f003 020f 	and.w	r2, r3, #15
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4442      	add	r2, r8
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	e7ff      	b.n	8004146 <UART_SetConfig+0x6e2>
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004150:	40011000 	.word	0x40011000
 8004154:	40011400 	.word	0x40011400
 8004158:	51eb851f 	.word	0x51eb851f

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	2000000c 	.word	0x2000000c

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4e0d      	ldr	r6, [pc, #52]	; (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 800416e:	1ba4      	subs	r4, r4, r6
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2500      	movs	r5, #0
 8004174:	42a5      	cmp	r5, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4e0b      	ldr	r6, [pc, #44]	; (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	; (80041ac <__libc_init_array+0x44>)
 800417c:	f000 ffcc 	bl	8005118 <_init>
 8004180:	1ba4      	subs	r4, r4, r6
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2500      	movs	r5, #0
 8004186:	42a5      	cmp	r5, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004190:	4798      	blx	r3
 8004192:	3501      	adds	r5, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800419a:	4798      	blx	r3
 800419c:	3501      	adds	r5, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08005298 	.word	0x08005298
 80041a4:	08005298 	.word	0x08005298
 80041a8:	08005298 	.word	0x08005298
 80041ac:	0800529c 	.word	0x0800529c

080041b0 <memset>:
 80041b0:	4402      	add	r2, r0
 80041b2:	4603      	mov	r3, r0
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d100      	bne.n	80041ba <memset+0xa>
 80041b8:	4770      	bx	lr
 80041ba:	f803 1b01 	strb.w	r1, [r3], #1
 80041be:	e7f9      	b.n	80041b4 <memset+0x4>

080041c0 <iprintf>:
 80041c0:	b40f      	push	{r0, r1, r2, r3}
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <iprintf+0x2c>)
 80041c4:	b513      	push	{r0, r1, r4, lr}
 80041c6:	681c      	ldr	r4, [r3, #0]
 80041c8:	b124      	cbz	r4, 80041d4 <iprintf+0x14>
 80041ca:	69a3      	ldr	r3, [r4, #24]
 80041cc:	b913      	cbnz	r3, 80041d4 <iprintf+0x14>
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 fa50 	bl	8004674 <__sinit>
 80041d4:	ab05      	add	r3, sp, #20
 80041d6:	9a04      	ldr	r2, [sp, #16]
 80041d8:	68a1      	ldr	r1, [r4, #8]
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	4620      	mov	r0, r4
 80041de:	f000 fc09 	bl	80049f4 <_vfiprintf_r>
 80041e2:	b002      	add	sp, #8
 80041e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e8:	b004      	add	sp, #16
 80041ea:	4770      	bx	lr
 80041ec:	2000000c 	.word	0x2000000c

080041f0 <putchar>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <putchar+0x24>)
 80041f4:	681c      	ldr	r4, [r3, #0]
 80041f6:	4605      	mov	r5, r0
 80041f8:	b124      	cbz	r4, 8004204 <putchar+0x14>
 80041fa:	69a3      	ldr	r3, [r4, #24]
 80041fc:	b913      	cbnz	r3, 8004204 <putchar+0x14>
 80041fe:	4620      	mov	r0, r4
 8004200:	f000 fa38 	bl	8004674 <__sinit>
 8004204:	68a2      	ldr	r2, [r4, #8]
 8004206:	4629      	mov	r1, r5
 8004208:	4620      	mov	r0, r4
 800420a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800420e:	f000 be8f 	b.w	8004f30 <_putc_r>
 8004212:	bf00      	nop
 8004214:	2000000c 	.word	0x2000000c

08004218 <_puts_r>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	460e      	mov	r6, r1
 800421c:	4605      	mov	r5, r0
 800421e:	b118      	cbz	r0, 8004228 <_puts_r+0x10>
 8004220:	6983      	ldr	r3, [r0, #24]
 8004222:	b90b      	cbnz	r3, 8004228 <_puts_r+0x10>
 8004224:	f000 fa26 	bl	8004674 <__sinit>
 8004228:	69ab      	ldr	r3, [r5, #24]
 800422a:	68ac      	ldr	r4, [r5, #8]
 800422c:	b913      	cbnz	r3, 8004234 <_puts_r+0x1c>
 800422e:	4628      	mov	r0, r5
 8004230:	f000 fa20 	bl	8004674 <__sinit>
 8004234:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <_puts_r+0xac>)
 8004236:	429c      	cmp	r4, r3
 8004238:	d117      	bne.n	800426a <_puts_r+0x52>
 800423a:	686c      	ldr	r4, [r5, #4]
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	071b      	lsls	r3, r3, #28
 8004240:	d51d      	bpl.n	800427e <_puts_r+0x66>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	b1db      	cbz	r3, 800427e <_puts_r+0x66>
 8004246:	3e01      	subs	r6, #1
 8004248:	68a3      	ldr	r3, [r4, #8]
 800424a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800424e:	3b01      	subs	r3, #1
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	b9e9      	cbnz	r1, 8004290 <_puts_r+0x78>
 8004254:	2b00      	cmp	r3, #0
 8004256:	da2e      	bge.n	80042b6 <_puts_r+0x9e>
 8004258:	4622      	mov	r2, r4
 800425a:	210a      	movs	r1, #10
 800425c:	4628      	mov	r0, r5
 800425e:	f000 f859 	bl	8004314 <__swbuf_r>
 8004262:	3001      	adds	r0, #1
 8004264:	d011      	beq.n	800428a <_puts_r+0x72>
 8004266:	200a      	movs	r0, #10
 8004268:	e011      	b.n	800428e <_puts_r+0x76>
 800426a:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <_puts_r+0xb0>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d101      	bne.n	8004274 <_puts_r+0x5c>
 8004270:	68ac      	ldr	r4, [r5, #8]
 8004272:	e7e3      	b.n	800423c <_puts_r+0x24>
 8004274:	4b15      	ldr	r3, [pc, #84]	; (80042cc <_puts_r+0xb4>)
 8004276:	429c      	cmp	r4, r3
 8004278:	bf08      	it	eq
 800427a:	68ec      	ldreq	r4, [r5, #12]
 800427c:	e7de      	b.n	800423c <_puts_r+0x24>
 800427e:	4621      	mov	r1, r4
 8004280:	4628      	mov	r0, r5
 8004282:	f000 f899 	bl	80043b8 <__swsetup_r>
 8004286:	2800      	cmp	r0, #0
 8004288:	d0dd      	beq.n	8004246 <_puts_r+0x2e>
 800428a:	f04f 30ff 	mov.w	r0, #4294967295
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	2b00      	cmp	r3, #0
 8004292:	da04      	bge.n	800429e <_puts_r+0x86>
 8004294:	69a2      	ldr	r2, [r4, #24]
 8004296:	429a      	cmp	r2, r3
 8004298:	dc06      	bgt.n	80042a8 <_puts_r+0x90>
 800429a:	290a      	cmp	r1, #10
 800429c:	d004      	beq.n	80042a8 <_puts_r+0x90>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	6022      	str	r2, [r4, #0]
 80042a4:	7019      	strb	r1, [r3, #0]
 80042a6:	e7cf      	b.n	8004248 <_puts_r+0x30>
 80042a8:	4622      	mov	r2, r4
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f832 	bl	8004314 <__swbuf_r>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d1c9      	bne.n	8004248 <_puts_r+0x30>
 80042b4:	e7e9      	b.n	800428a <_puts_r+0x72>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	200a      	movs	r0, #10
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	6022      	str	r2, [r4, #0]
 80042be:	7018      	strb	r0, [r3, #0]
 80042c0:	e7e5      	b.n	800428e <_puts_r+0x76>
 80042c2:	bf00      	nop
 80042c4:	0800521c 	.word	0x0800521c
 80042c8:	0800523c 	.word	0x0800523c
 80042cc:	080051fc 	.word	0x080051fc

080042d0 <puts>:
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <puts+0xc>)
 80042d2:	4601      	mov	r1, r0
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f7ff bf9f 	b.w	8004218 <_puts_r>
 80042da:	bf00      	nop
 80042dc:	2000000c 	.word	0x2000000c

080042e0 <strstr>:
 80042e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e2:	7803      	ldrb	r3, [r0, #0]
 80042e4:	b17b      	cbz	r3, 8004306 <strstr+0x26>
 80042e6:	4604      	mov	r4, r0
 80042e8:	7823      	ldrb	r3, [r4, #0]
 80042ea:	4620      	mov	r0, r4
 80042ec:	1c66      	adds	r6, r4, #1
 80042ee:	b17b      	cbz	r3, 8004310 <strstr+0x30>
 80042f0:	1e4a      	subs	r2, r1, #1
 80042f2:	1e63      	subs	r3, r4, #1
 80042f4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80042f8:	b14d      	cbz	r5, 800430e <strstr+0x2e>
 80042fa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80042fe:	42af      	cmp	r7, r5
 8004300:	4634      	mov	r4, r6
 8004302:	d0f7      	beq.n	80042f4 <strstr+0x14>
 8004304:	e7f0      	b.n	80042e8 <strstr+0x8>
 8004306:	780b      	ldrb	r3, [r1, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf18      	it	ne
 800430c:	2000      	movne	r0, #0
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004310:	4618      	mov	r0, r3
 8004312:	e7fc      	b.n	800430e <strstr+0x2e>

08004314 <__swbuf_r>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	460e      	mov	r6, r1
 8004318:	4614      	mov	r4, r2
 800431a:	4605      	mov	r5, r0
 800431c:	b118      	cbz	r0, 8004326 <__swbuf_r+0x12>
 800431e:	6983      	ldr	r3, [r0, #24]
 8004320:	b90b      	cbnz	r3, 8004326 <__swbuf_r+0x12>
 8004322:	f000 f9a7 	bl	8004674 <__sinit>
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <__swbuf_r+0x98>)
 8004328:	429c      	cmp	r4, r3
 800432a:	d12a      	bne.n	8004382 <__swbuf_r+0x6e>
 800432c:	686c      	ldr	r4, [r5, #4]
 800432e:	69a3      	ldr	r3, [r4, #24]
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	071a      	lsls	r2, r3, #28
 8004336:	d52e      	bpl.n	8004396 <__swbuf_r+0x82>
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	b363      	cbz	r3, 8004396 <__swbuf_r+0x82>
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	1ac0      	subs	r0, r0, r3
 8004342:	6963      	ldr	r3, [r4, #20]
 8004344:	b2f6      	uxtb	r6, r6
 8004346:	4283      	cmp	r3, r0
 8004348:	4637      	mov	r7, r6
 800434a:	dc04      	bgt.n	8004356 <__swbuf_r+0x42>
 800434c:	4621      	mov	r1, r4
 800434e:	4628      	mov	r0, r5
 8004350:	f000 f926 	bl	80045a0 <_fflush_r>
 8004354:	bb28      	cbnz	r0, 80043a2 <__swbuf_r+0x8e>
 8004356:	68a3      	ldr	r3, [r4, #8]
 8004358:	3b01      	subs	r3, #1
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	6022      	str	r2, [r4, #0]
 8004362:	701e      	strb	r6, [r3, #0]
 8004364:	6963      	ldr	r3, [r4, #20]
 8004366:	3001      	adds	r0, #1
 8004368:	4283      	cmp	r3, r0
 800436a:	d004      	beq.n	8004376 <__swbuf_r+0x62>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	07db      	lsls	r3, r3, #31
 8004370:	d519      	bpl.n	80043a6 <__swbuf_r+0x92>
 8004372:	2e0a      	cmp	r6, #10
 8004374:	d117      	bne.n	80043a6 <__swbuf_r+0x92>
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 f911 	bl	80045a0 <_fflush_r>
 800437e:	b190      	cbz	r0, 80043a6 <__swbuf_r+0x92>
 8004380:	e00f      	b.n	80043a2 <__swbuf_r+0x8e>
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <__swbuf_r+0x9c>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d101      	bne.n	800438c <__swbuf_r+0x78>
 8004388:	68ac      	ldr	r4, [r5, #8]
 800438a:	e7d0      	b.n	800432e <__swbuf_r+0x1a>
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <__swbuf_r+0xa0>)
 800438e:	429c      	cmp	r4, r3
 8004390:	bf08      	it	eq
 8004392:	68ec      	ldreq	r4, [r5, #12]
 8004394:	e7cb      	b.n	800432e <__swbuf_r+0x1a>
 8004396:	4621      	mov	r1, r4
 8004398:	4628      	mov	r0, r5
 800439a:	f000 f80d 	bl	80043b8 <__swsetup_r>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d0cc      	beq.n	800433c <__swbuf_r+0x28>
 80043a2:	f04f 37ff 	mov.w	r7, #4294967295
 80043a6:	4638      	mov	r0, r7
 80043a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043aa:	bf00      	nop
 80043ac:	0800521c 	.word	0x0800521c
 80043b0:	0800523c 	.word	0x0800523c
 80043b4:	080051fc 	.word	0x080051fc

080043b8 <__swsetup_r>:
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <__swsetup_r+0xcc>)
 80043ba:	b570      	push	{r4, r5, r6, lr}
 80043bc:	681d      	ldr	r5, [r3, #0]
 80043be:	4606      	mov	r6, r0
 80043c0:	460c      	mov	r4, r1
 80043c2:	b125      	cbz	r5, 80043ce <__swsetup_r+0x16>
 80043c4:	69ab      	ldr	r3, [r5, #24]
 80043c6:	b913      	cbnz	r3, 80043ce <__swsetup_r+0x16>
 80043c8:	4628      	mov	r0, r5
 80043ca:	f000 f953 	bl	8004674 <__sinit>
 80043ce:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <__swsetup_r+0xd0>)
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d10f      	bne.n	80043f4 <__swsetup_r+0x3c>
 80043d4:	686c      	ldr	r4, [r5, #4]
 80043d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	0715      	lsls	r5, r2, #28
 80043de:	d42c      	bmi.n	800443a <__swsetup_r+0x82>
 80043e0:	06d0      	lsls	r0, r2, #27
 80043e2:	d411      	bmi.n	8004408 <__swsetup_r+0x50>
 80043e4:	2209      	movs	r2, #9
 80043e6:	6032      	str	r2, [r6, #0]
 80043e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ec:	81a3      	strh	r3, [r4, #12]
 80043ee:	f04f 30ff 	mov.w	r0, #4294967295
 80043f2:	e03e      	b.n	8004472 <__swsetup_r+0xba>
 80043f4:	4b25      	ldr	r3, [pc, #148]	; (800448c <__swsetup_r+0xd4>)
 80043f6:	429c      	cmp	r4, r3
 80043f8:	d101      	bne.n	80043fe <__swsetup_r+0x46>
 80043fa:	68ac      	ldr	r4, [r5, #8]
 80043fc:	e7eb      	b.n	80043d6 <__swsetup_r+0x1e>
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <__swsetup_r+0xd8>)
 8004400:	429c      	cmp	r4, r3
 8004402:	bf08      	it	eq
 8004404:	68ec      	ldreq	r4, [r5, #12]
 8004406:	e7e6      	b.n	80043d6 <__swsetup_r+0x1e>
 8004408:	0751      	lsls	r1, r2, #29
 800440a:	d512      	bpl.n	8004432 <__swsetup_r+0x7a>
 800440c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800440e:	b141      	cbz	r1, 8004422 <__swsetup_r+0x6a>
 8004410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004414:	4299      	cmp	r1, r3
 8004416:	d002      	beq.n	800441e <__swsetup_r+0x66>
 8004418:	4630      	mov	r0, r6
 800441a:	f000 fa19 	bl	8004850 <_free_r>
 800441e:	2300      	movs	r3, #0
 8004420:	6363      	str	r3, [r4, #52]	; 0x34
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	2300      	movs	r3, #0
 800442c:	6063      	str	r3, [r4, #4]
 800442e:	6923      	ldr	r3, [r4, #16]
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	f043 0308 	orr.w	r3, r3, #8
 8004438:	81a3      	strh	r3, [r4, #12]
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	b94b      	cbnz	r3, 8004452 <__swsetup_r+0x9a>
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004448:	d003      	beq.n	8004452 <__swsetup_r+0x9a>
 800444a:	4621      	mov	r1, r4
 800444c:	4630      	mov	r0, r6
 800444e:	f000 f9bf 	bl	80047d0 <__smakebuf_r>
 8004452:	89a2      	ldrh	r2, [r4, #12]
 8004454:	f012 0301 	ands.w	r3, r2, #1
 8004458:	d00c      	beq.n	8004474 <__swsetup_r+0xbc>
 800445a:	2300      	movs	r3, #0
 800445c:	60a3      	str	r3, [r4, #8]
 800445e:	6963      	ldr	r3, [r4, #20]
 8004460:	425b      	negs	r3, r3
 8004462:	61a3      	str	r3, [r4, #24]
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	b953      	cbnz	r3, 800447e <__swsetup_r+0xc6>
 8004468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004470:	d1ba      	bne.n	80043e8 <__swsetup_r+0x30>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	0792      	lsls	r2, r2, #30
 8004476:	bf58      	it	pl
 8004478:	6963      	ldrpl	r3, [r4, #20]
 800447a:	60a3      	str	r3, [r4, #8]
 800447c:	e7f2      	b.n	8004464 <__swsetup_r+0xac>
 800447e:	2000      	movs	r0, #0
 8004480:	e7f7      	b.n	8004472 <__swsetup_r+0xba>
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c
 8004488:	0800521c 	.word	0x0800521c
 800448c:	0800523c 	.word	0x0800523c
 8004490:	080051fc 	.word	0x080051fc

08004494 <__sflush_r>:
 8004494:	898a      	ldrh	r2, [r1, #12]
 8004496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449a:	4605      	mov	r5, r0
 800449c:	0710      	lsls	r0, r2, #28
 800449e:	460c      	mov	r4, r1
 80044a0:	d458      	bmi.n	8004554 <__sflush_r+0xc0>
 80044a2:	684b      	ldr	r3, [r1, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dc05      	bgt.n	80044b4 <__sflush_r+0x20>
 80044a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	dc02      	bgt.n	80044b4 <__sflush_r+0x20>
 80044ae:	2000      	movs	r0, #0
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d0f9      	beq.n	80044ae <__sflush_r+0x1a>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044c0:	682f      	ldr	r7, [r5, #0]
 80044c2:	6a21      	ldr	r1, [r4, #32]
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	d032      	beq.n	800452e <__sflush_r+0x9a>
 80044c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	075a      	lsls	r2, r3, #29
 80044ce:	d505      	bpl.n	80044dc <__sflush_r+0x48>
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	1ac0      	subs	r0, r0, r3
 80044d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044d6:	b10b      	cbz	r3, 80044dc <__sflush_r+0x48>
 80044d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044da:	1ac0      	subs	r0, r0, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	4602      	mov	r2, r0
 80044e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044e2:	6a21      	ldr	r1, [r4, #32]
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b0      	blx	r6
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	d106      	bne.n	80044fc <__sflush_r+0x68>
 80044ee:	6829      	ldr	r1, [r5, #0]
 80044f0:	291d      	cmp	r1, #29
 80044f2:	d848      	bhi.n	8004586 <__sflush_r+0xf2>
 80044f4:	4a29      	ldr	r2, [pc, #164]	; (800459c <__sflush_r+0x108>)
 80044f6:	40ca      	lsrs	r2, r1
 80044f8:	07d6      	lsls	r6, r2, #31
 80044fa:	d544      	bpl.n	8004586 <__sflush_r+0xf2>
 80044fc:	2200      	movs	r2, #0
 80044fe:	6062      	str	r2, [r4, #4]
 8004500:	04d9      	lsls	r1, r3, #19
 8004502:	6922      	ldr	r2, [r4, #16]
 8004504:	6022      	str	r2, [r4, #0]
 8004506:	d504      	bpl.n	8004512 <__sflush_r+0x7e>
 8004508:	1c42      	adds	r2, r0, #1
 800450a:	d101      	bne.n	8004510 <__sflush_r+0x7c>
 800450c:	682b      	ldr	r3, [r5, #0]
 800450e:	b903      	cbnz	r3, 8004512 <__sflush_r+0x7e>
 8004510:	6560      	str	r0, [r4, #84]	; 0x54
 8004512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004514:	602f      	str	r7, [r5, #0]
 8004516:	2900      	cmp	r1, #0
 8004518:	d0c9      	beq.n	80044ae <__sflush_r+0x1a>
 800451a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800451e:	4299      	cmp	r1, r3
 8004520:	d002      	beq.n	8004528 <__sflush_r+0x94>
 8004522:	4628      	mov	r0, r5
 8004524:	f000 f994 	bl	8004850 <_free_r>
 8004528:	2000      	movs	r0, #0
 800452a:	6360      	str	r0, [r4, #52]	; 0x34
 800452c:	e7c0      	b.n	80044b0 <__sflush_r+0x1c>
 800452e:	2301      	movs	r3, #1
 8004530:	4628      	mov	r0, r5
 8004532:	47b0      	blx	r6
 8004534:	1c41      	adds	r1, r0, #1
 8004536:	d1c8      	bne.n	80044ca <__sflush_r+0x36>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0c5      	beq.n	80044ca <__sflush_r+0x36>
 800453e:	2b1d      	cmp	r3, #29
 8004540:	d001      	beq.n	8004546 <__sflush_r+0xb2>
 8004542:	2b16      	cmp	r3, #22
 8004544:	d101      	bne.n	800454a <__sflush_r+0xb6>
 8004546:	602f      	str	r7, [r5, #0]
 8004548:	e7b1      	b.n	80044ae <__sflush_r+0x1a>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004550:	81a3      	strh	r3, [r4, #12]
 8004552:	e7ad      	b.n	80044b0 <__sflush_r+0x1c>
 8004554:	690f      	ldr	r7, [r1, #16]
 8004556:	2f00      	cmp	r7, #0
 8004558:	d0a9      	beq.n	80044ae <__sflush_r+0x1a>
 800455a:	0793      	lsls	r3, r2, #30
 800455c:	680e      	ldr	r6, [r1, #0]
 800455e:	bf08      	it	eq
 8004560:	694b      	ldreq	r3, [r1, #20]
 8004562:	600f      	str	r7, [r1, #0]
 8004564:	bf18      	it	ne
 8004566:	2300      	movne	r3, #0
 8004568:	eba6 0807 	sub.w	r8, r6, r7
 800456c:	608b      	str	r3, [r1, #8]
 800456e:	f1b8 0f00 	cmp.w	r8, #0
 8004572:	dd9c      	ble.n	80044ae <__sflush_r+0x1a>
 8004574:	4643      	mov	r3, r8
 8004576:	463a      	mov	r2, r7
 8004578:	6a21      	ldr	r1, [r4, #32]
 800457a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800457c:	4628      	mov	r0, r5
 800457e:	47b0      	blx	r6
 8004580:	2800      	cmp	r0, #0
 8004582:	dc06      	bgt.n	8004592 <__sflush_r+0xfe>
 8004584:	89a3      	ldrh	r3, [r4, #12]
 8004586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	e78e      	b.n	80044b0 <__sflush_r+0x1c>
 8004592:	4407      	add	r7, r0
 8004594:	eba8 0800 	sub.w	r8, r8, r0
 8004598:	e7e9      	b.n	800456e <__sflush_r+0xda>
 800459a:	bf00      	nop
 800459c:	20400001 	.word	0x20400001

080045a0 <_fflush_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	4605      	mov	r5, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	b1db      	cbz	r3, 80045e2 <_fflush_r+0x42>
 80045aa:	b118      	cbz	r0, 80045b4 <_fflush_r+0x14>
 80045ac:	6983      	ldr	r3, [r0, #24]
 80045ae:	b90b      	cbnz	r3, 80045b4 <_fflush_r+0x14>
 80045b0:	f000 f860 	bl	8004674 <__sinit>
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <_fflush_r+0x48>)
 80045b6:	429c      	cmp	r4, r3
 80045b8:	d109      	bne.n	80045ce <_fflush_r+0x2e>
 80045ba:	686c      	ldr	r4, [r5, #4]
 80045bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c0:	b17b      	cbz	r3, 80045e2 <_fflush_r+0x42>
 80045c2:	4621      	mov	r1, r4
 80045c4:	4628      	mov	r0, r5
 80045c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ca:	f7ff bf63 	b.w	8004494 <__sflush_r>
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <_fflush_r+0x4c>)
 80045d0:	429c      	cmp	r4, r3
 80045d2:	d101      	bne.n	80045d8 <_fflush_r+0x38>
 80045d4:	68ac      	ldr	r4, [r5, #8]
 80045d6:	e7f1      	b.n	80045bc <_fflush_r+0x1c>
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_fflush_r+0x50>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	bf08      	it	eq
 80045de:	68ec      	ldreq	r4, [r5, #12]
 80045e0:	e7ec      	b.n	80045bc <_fflush_r+0x1c>
 80045e2:	2000      	movs	r0, #0
 80045e4:	bd38      	pop	{r3, r4, r5, pc}
 80045e6:	bf00      	nop
 80045e8:	0800521c 	.word	0x0800521c
 80045ec:	0800523c 	.word	0x0800523c
 80045f0:	080051fc 	.word	0x080051fc

080045f4 <std>:
 80045f4:	2300      	movs	r3, #0
 80045f6:	b510      	push	{r4, lr}
 80045f8:	4604      	mov	r4, r0
 80045fa:	e9c0 3300 	strd	r3, r3, [r0]
 80045fe:	6083      	str	r3, [r0, #8]
 8004600:	8181      	strh	r1, [r0, #12]
 8004602:	6643      	str	r3, [r0, #100]	; 0x64
 8004604:	81c2      	strh	r2, [r0, #14]
 8004606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800460a:	6183      	str	r3, [r0, #24]
 800460c:	4619      	mov	r1, r3
 800460e:	2208      	movs	r2, #8
 8004610:	305c      	adds	r0, #92	; 0x5c
 8004612:	f7ff fdcd 	bl	80041b0 <memset>
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <std+0x38>)
 8004618:	6263      	str	r3, [r4, #36]	; 0x24
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <std+0x3c>)
 800461c:	62a3      	str	r3, [r4, #40]	; 0x28
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <std+0x40>)
 8004620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <std+0x44>)
 8004624:	6224      	str	r4, [r4, #32]
 8004626:	6323      	str	r3, [r4, #48]	; 0x30
 8004628:	bd10      	pop	{r4, pc}
 800462a:	bf00      	nop
 800462c:	08004fbd 	.word	0x08004fbd
 8004630:	08004fdf 	.word	0x08004fdf
 8004634:	08005017 	.word	0x08005017
 8004638:	0800503b 	.word	0x0800503b

0800463c <_cleanup_r>:
 800463c:	4901      	ldr	r1, [pc, #4]	; (8004644 <_cleanup_r+0x8>)
 800463e:	f000 b885 	b.w	800474c <_fwalk_reent>
 8004642:	bf00      	nop
 8004644:	080045a1 	.word	0x080045a1

08004648 <__sfmoreglue>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	1e4a      	subs	r2, r1, #1
 800464c:	2568      	movs	r5, #104	; 0x68
 800464e:	4355      	muls	r5, r2
 8004650:	460e      	mov	r6, r1
 8004652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004656:	f000 f949 	bl	80048ec <_malloc_r>
 800465a:	4604      	mov	r4, r0
 800465c:	b140      	cbz	r0, 8004670 <__sfmoreglue+0x28>
 800465e:	2100      	movs	r1, #0
 8004660:	e9c0 1600 	strd	r1, r6, [r0]
 8004664:	300c      	adds	r0, #12
 8004666:	60a0      	str	r0, [r4, #8]
 8004668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800466c:	f7ff fda0 	bl	80041b0 <memset>
 8004670:	4620      	mov	r0, r4
 8004672:	bd70      	pop	{r4, r5, r6, pc}

08004674 <__sinit>:
 8004674:	6983      	ldr	r3, [r0, #24]
 8004676:	b510      	push	{r4, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	bb33      	cbnz	r3, 80046ca <__sinit+0x56>
 800467c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004680:	6503      	str	r3, [r0, #80]	; 0x50
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <__sinit+0x58>)
 8004684:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <__sinit+0x5c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6282      	str	r2, [r0, #40]	; 0x28
 800468a:	4298      	cmp	r0, r3
 800468c:	bf04      	itt	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	6183      	streq	r3, [r0, #24]
 8004692:	f000 f81f 	bl	80046d4 <__sfp>
 8004696:	6060      	str	r0, [r4, #4]
 8004698:	4620      	mov	r0, r4
 800469a:	f000 f81b 	bl	80046d4 <__sfp>
 800469e:	60a0      	str	r0, [r4, #8]
 80046a0:	4620      	mov	r0, r4
 80046a2:	f000 f817 	bl	80046d4 <__sfp>
 80046a6:	2200      	movs	r2, #0
 80046a8:	60e0      	str	r0, [r4, #12]
 80046aa:	2104      	movs	r1, #4
 80046ac:	6860      	ldr	r0, [r4, #4]
 80046ae:	f7ff ffa1 	bl	80045f4 <std>
 80046b2:	2201      	movs	r2, #1
 80046b4:	2109      	movs	r1, #9
 80046b6:	68a0      	ldr	r0, [r4, #8]
 80046b8:	f7ff ff9c 	bl	80045f4 <std>
 80046bc:	2202      	movs	r2, #2
 80046be:	2112      	movs	r1, #18
 80046c0:	68e0      	ldr	r0, [r4, #12]
 80046c2:	f7ff ff97 	bl	80045f4 <std>
 80046c6:	2301      	movs	r3, #1
 80046c8:	61a3      	str	r3, [r4, #24]
 80046ca:	bd10      	pop	{r4, pc}
 80046cc:	080051f8 	.word	0x080051f8
 80046d0:	0800463d 	.word	0x0800463d

080046d4 <__sfp>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <__sfp+0x70>)
 80046d8:	681e      	ldr	r6, [r3, #0]
 80046da:	69b3      	ldr	r3, [r6, #24]
 80046dc:	4607      	mov	r7, r0
 80046de:	b913      	cbnz	r3, 80046e6 <__sfp+0x12>
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7ff ffc7 	bl	8004674 <__sinit>
 80046e6:	3648      	adds	r6, #72	; 0x48
 80046e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	d503      	bpl.n	80046f8 <__sfp+0x24>
 80046f0:	6833      	ldr	r3, [r6, #0]
 80046f2:	b133      	cbz	r3, 8004702 <__sfp+0x2e>
 80046f4:	6836      	ldr	r6, [r6, #0]
 80046f6:	e7f7      	b.n	80046e8 <__sfp+0x14>
 80046f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046fc:	b16d      	cbz	r5, 800471a <__sfp+0x46>
 80046fe:	3468      	adds	r4, #104	; 0x68
 8004700:	e7f4      	b.n	80046ec <__sfp+0x18>
 8004702:	2104      	movs	r1, #4
 8004704:	4638      	mov	r0, r7
 8004706:	f7ff ff9f 	bl	8004648 <__sfmoreglue>
 800470a:	6030      	str	r0, [r6, #0]
 800470c:	2800      	cmp	r0, #0
 800470e:	d1f1      	bne.n	80046f4 <__sfp+0x20>
 8004710:	230c      	movs	r3, #12
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4604      	mov	r4, r0
 8004716:	4620      	mov	r0, r4
 8004718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <__sfp+0x74>)
 800471c:	6665      	str	r5, [r4, #100]	; 0x64
 800471e:	e9c4 5500 	strd	r5, r5, [r4]
 8004722:	60a5      	str	r5, [r4, #8]
 8004724:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004728:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800472c:	2208      	movs	r2, #8
 800472e:	4629      	mov	r1, r5
 8004730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004734:	f7ff fd3c 	bl	80041b0 <memset>
 8004738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800473c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004740:	e7e9      	b.n	8004716 <__sfp+0x42>
 8004742:	bf00      	nop
 8004744:	080051f8 	.word	0x080051f8
 8004748:	ffff0001 	.word	0xffff0001

0800474c <_fwalk_reent>:
 800474c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004750:	4680      	mov	r8, r0
 8004752:	4689      	mov	r9, r1
 8004754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004758:	2600      	movs	r6, #0
 800475a:	b914      	cbnz	r4, 8004762 <_fwalk_reent+0x16>
 800475c:	4630      	mov	r0, r6
 800475e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004762:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004766:	3f01      	subs	r7, #1
 8004768:	d501      	bpl.n	800476e <_fwalk_reent+0x22>
 800476a:	6824      	ldr	r4, [r4, #0]
 800476c:	e7f5      	b.n	800475a <_fwalk_reent+0xe>
 800476e:	89ab      	ldrh	r3, [r5, #12]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d907      	bls.n	8004784 <_fwalk_reent+0x38>
 8004774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004778:	3301      	adds	r3, #1
 800477a:	d003      	beq.n	8004784 <_fwalk_reent+0x38>
 800477c:	4629      	mov	r1, r5
 800477e:	4640      	mov	r0, r8
 8004780:	47c8      	blx	r9
 8004782:	4306      	orrs	r6, r0
 8004784:	3568      	adds	r5, #104	; 0x68
 8004786:	e7ee      	b.n	8004766 <_fwalk_reent+0x1a>

08004788 <__swhatbuf_r>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	460e      	mov	r6, r1
 800478c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004790:	2900      	cmp	r1, #0
 8004792:	b096      	sub	sp, #88	; 0x58
 8004794:	4614      	mov	r4, r2
 8004796:	461d      	mov	r5, r3
 8004798:	da07      	bge.n	80047aa <__swhatbuf_r+0x22>
 800479a:	2300      	movs	r3, #0
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	89b3      	ldrh	r3, [r6, #12]
 80047a0:	061a      	lsls	r2, r3, #24
 80047a2:	d410      	bmi.n	80047c6 <__swhatbuf_r+0x3e>
 80047a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a8:	e00e      	b.n	80047c8 <__swhatbuf_r+0x40>
 80047aa:	466a      	mov	r2, sp
 80047ac:	f000 fc6c 	bl	8005088 <_fstat_r>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	dbf2      	blt.n	800479a <__swhatbuf_r+0x12>
 80047b4:	9a01      	ldr	r2, [sp, #4]
 80047b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047be:	425a      	negs	r2, r3
 80047c0:	415a      	adcs	r2, r3
 80047c2:	602a      	str	r2, [r5, #0]
 80047c4:	e7ee      	b.n	80047a4 <__swhatbuf_r+0x1c>
 80047c6:	2340      	movs	r3, #64	; 0x40
 80047c8:	2000      	movs	r0, #0
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	b016      	add	sp, #88	; 0x58
 80047ce:	bd70      	pop	{r4, r5, r6, pc}

080047d0 <__smakebuf_r>:
 80047d0:	898b      	ldrh	r3, [r1, #12]
 80047d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047d4:	079d      	lsls	r5, r3, #30
 80047d6:	4606      	mov	r6, r0
 80047d8:	460c      	mov	r4, r1
 80047da:	d507      	bpl.n	80047ec <__smakebuf_r+0x1c>
 80047dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	6123      	str	r3, [r4, #16]
 80047e4:	2301      	movs	r3, #1
 80047e6:	6163      	str	r3, [r4, #20]
 80047e8:	b002      	add	sp, #8
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	ab01      	add	r3, sp, #4
 80047ee:	466a      	mov	r2, sp
 80047f0:	f7ff ffca 	bl	8004788 <__swhatbuf_r>
 80047f4:	9900      	ldr	r1, [sp, #0]
 80047f6:	4605      	mov	r5, r0
 80047f8:	4630      	mov	r0, r6
 80047fa:	f000 f877 	bl	80048ec <_malloc_r>
 80047fe:	b948      	cbnz	r0, 8004814 <__smakebuf_r+0x44>
 8004800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004804:	059a      	lsls	r2, r3, #22
 8004806:	d4ef      	bmi.n	80047e8 <__smakebuf_r+0x18>
 8004808:	f023 0303 	bic.w	r3, r3, #3
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	e7e3      	b.n	80047dc <__smakebuf_r+0xc>
 8004814:	4b0d      	ldr	r3, [pc, #52]	; (800484c <__smakebuf_r+0x7c>)
 8004816:	62b3      	str	r3, [r6, #40]	; 0x28
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	6020      	str	r0, [r4, #0]
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	9b00      	ldr	r3, [sp, #0]
 8004824:	6163      	str	r3, [r4, #20]
 8004826:	9b01      	ldr	r3, [sp, #4]
 8004828:	6120      	str	r0, [r4, #16]
 800482a:	b15b      	cbz	r3, 8004844 <__smakebuf_r+0x74>
 800482c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004830:	4630      	mov	r0, r6
 8004832:	f000 fc3b 	bl	80050ac <_isatty_r>
 8004836:	b128      	cbz	r0, 8004844 <__smakebuf_r+0x74>
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	81a3      	strh	r3, [r4, #12]
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	431d      	orrs	r5, r3
 8004848:	81a5      	strh	r5, [r4, #12]
 800484a:	e7cd      	b.n	80047e8 <__smakebuf_r+0x18>
 800484c:	0800463d 	.word	0x0800463d

08004850 <_free_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	2900      	cmp	r1, #0
 8004856:	d045      	beq.n	80048e4 <_free_r+0x94>
 8004858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485c:	1f0c      	subs	r4, r1, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	18e4      	addlt	r4, r4, r3
 8004864:	f000 fc44 	bl	80050f0 <__malloc_lock>
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <_free_r+0x98>)
 800486a:	6813      	ldr	r3, [r2, #0]
 800486c:	4610      	mov	r0, r2
 800486e:	b933      	cbnz	r3, 800487e <_free_r+0x2e>
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	6014      	str	r4, [r2, #0]
 8004874:	4628      	mov	r0, r5
 8004876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800487a:	f000 bc3a 	b.w	80050f2 <__malloc_unlock>
 800487e:	42a3      	cmp	r3, r4
 8004880:	d90c      	bls.n	800489c <_free_r+0x4c>
 8004882:	6821      	ldr	r1, [r4, #0]
 8004884:	1862      	adds	r2, r4, r1
 8004886:	4293      	cmp	r3, r2
 8004888:	bf04      	itt	eq
 800488a:	681a      	ldreq	r2, [r3, #0]
 800488c:	685b      	ldreq	r3, [r3, #4]
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	bf04      	itt	eq
 8004892:	1852      	addeq	r2, r2, r1
 8004894:	6022      	streq	r2, [r4, #0]
 8004896:	6004      	str	r4, [r0, #0]
 8004898:	e7ec      	b.n	8004874 <_free_r+0x24>
 800489a:	4613      	mov	r3, r2
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	b10a      	cbz	r2, 80048a4 <_free_r+0x54>
 80048a0:	42a2      	cmp	r2, r4
 80048a2:	d9fa      	bls.n	800489a <_free_r+0x4a>
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	1858      	adds	r0, r3, r1
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	d10b      	bne.n	80048c4 <_free_r+0x74>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	4401      	add	r1, r0
 80048b0:	1858      	adds	r0, r3, r1
 80048b2:	4282      	cmp	r2, r0
 80048b4:	6019      	str	r1, [r3, #0]
 80048b6:	d1dd      	bne.n	8004874 <_free_r+0x24>
 80048b8:	6810      	ldr	r0, [r2, #0]
 80048ba:	6852      	ldr	r2, [r2, #4]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	4401      	add	r1, r0
 80048c0:	6019      	str	r1, [r3, #0]
 80048c2:	e7d7      	b.n	8004874 <_free_r+0x24>
 80048c4:	d902      	bls.n	80048cc <_free_r+0x7c>
 80048c6:	230c      	movs	r3, #12
 80048c8:	602b      	str	r3, [r5, #0]
 80048ca:	e7d3      	b.n	8004874 <_free_r+0x24>
 80048cc:	6820      	ldr	r0, [r4, #0]
 80048ce:	1821      	adds	r1, r4, r0
 80048d0:	428a      	cmp	r2, r1
 80048d2:	bf04      	itt	eq
 80048d4:	6811      	ldreq	r1, [r2, #0]
 80048d6:	6852      	ldreq	r2, [r2, #4]
 80048d8:	6062      	str	r2, [r4, #4]
 80048da:	bf04      	itt	eq
 80048dc:	1809      	addeq	r1, r1, r0
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	605c      	str	r4, [r3, #4]
 80048e2:	e7c7      	b.n	8004874 <_free_r+0x24>
 80048e4:	bd38      	pop	{r3, r4, r5, pc}
 80048e6:	bf00      	nop
 80048e8:	200000d0 	.word	0x200000d0

080048ec <_malloc_r>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	1ccd      	adds	r5, r1, #3
 80048f0:	f025 0503 	bic.w	r5, r5, #3
 80048f4:	3508      	adds	r5, #8
 80048f6:	2d0c      	cmp	r5, #12
 80048f8:	bf38      	it	cc
 80048fa:	250c      	movcc	r5, #12
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	4606      	mov	r6, r0
 8004900:	db01      	blt.n	8004906 <_malloc_r+0x1a>
 8004902:	42a9      	cmp	r1, r5
 8004904:	d903      	bls.n	800490e <_malloc_r+0x22>
 8004906:	230c      	movs	r3, #12
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	2000      	movs	r0, #0
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	f000 fbef 	bl	80050f0 <__malloc_lock>
 8004912:	4a21      	ldr	r2, [pc, #132]	; (8004998 <_malloc_r+0xac>)
 8004914:	6814      	ldr	r4, [r2, #0]
 8004916:	4621      	mov	r1, r4
 8004918:	b991      	cbnz	r1, 8004940 <_malloc_r+0x54>
 800491a:	4c20      	ldr	r4, [pc, #128]	; (800499c <_malloc_r+0xb0>)
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	b91b      	cbnz	r3, 8004928 <_malloc_r+0x3c>
 8004920:	4630      	mov	r0, r6
 8004922:	f000 fb3b 	bl	8004f9c <_sbrk_r>
 8004926:	6020      	str	r0, [r4, #0]
 8004928:	4629      	mov	r1, r5
 800492a:	4630      	mov	r0, r6
 800492c:	f000 fb36 	bl	8004f9c <_sbrk_r>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d124      	bne.n	800497e <_malloc_r+0x92>
 8004934:	230c      	movs	r3, #12
 8004936:	6033      	str	r3, [r6, #0]
 8004938:	4630      	mov	r0, r6
 800493a:	f000 fbda 	bl	80050f2 <__malloc_unlock>
 800493e:	e7e4      	b.n	800490a <_malloc_r+0x1e>
 8004940:	680b      	ldr	r3, [r1, #0]
 8004942:	1b5b      	subs	r3, r3, r5
 8004944:	d418      	bmi.n	8004978 <_malloc_r+0x8c>
 8004946:	2b0b      	cmp	r3, #11
 8004948:	d90f      	bls.n	800496a <_malloc_r+0x7e>
 800494a:	600b      	str	r3, [r1, #0]
 800494c:	50cd      	str	r5, [r1, r3]
 800494e:	18cc      	adds	r4, r1, r3
 8004950:	4630      	mov	r0, r6
 8004952:	f000 fbce 	bl	80050f2 <__malloc_unlock>
 8004956:	f104 000b 	add.w	r0, r4, #11
 800495a:	1d23      	adds	r3, r4, #4
 800495c:	f020 0007 	bic.w	r0, r0, #7
 8004960:	1ac3      	subs	r3, r0, r3
 8004962:	d0d3      	beq.n	800490c <_malloc_r+0x20>
 8004964:	425a      	negs	r2, r3
 8004966:	50e2      	str	r2, [r4, r3]
 8004968:	e7d0      	b.n	800490c <_malloc_r+0x20>
 800496a:	428c      	cmp	r4, r1
 800496c:	684b      	ldr	r3, [r1, #4]
 800496e:	bf16      	itet	ne
 8004970:	6063      	strne	r3, [r4, #4]
 8004972:	6013      	streq	r3, [r2, #0]
 8004974:	460c      	movne	r4, r1
 8004976:	e7eb      	b.n	8004950 <_malloc_r+0x64>
 8004978:	460c      	mov	r4, r1
 800497a:	6849      	ldr	r1, [r1, #4]
 800497c:	e7cc      	b.n	8004918 <_malloc_r+0x2c>
 800497e:	1cc4      	adds	r4, r0, #3
 8004980:	f024 0403 	bic.w	r4, r4, #3
 8004984:	42a0      	cmp	r0, r4
 8004986:	d005      	beq.n	8004994 <_malloc_r+0xa8>
 8004988:	1a21      	subs	r1, r4, r0
 800498a:	4630      	mov	r0, r6
 800498c:	f000 fb06 	bl	8004f9c <_sbrk_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d0cf      	beq.n	8004934 <_malloc_r+0x48>
 8004994:	6025      	str	r5, [r4, #0]
 8004996:	e7db      	b.n	8004950 <_malloc_r+0x64>
 8004998:	200000d0 	.word	0x200000d0
 800499c:	200000d4 	.word	0x200000d4

080049a0 <__sfputc_r>:
 80049a0:	6893      	ldr	r3, [r2, #8]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	b410      	push	{r4}
 80049a8:	6093      	str	r3, [r2, #8]
 80049aa:	da08      	bge.n	80049be <__sfputc_r+0x1e>
 80049ac:	6994      	ldr	r4, [r2, #24]
 80049ae:	42a3      	cmp	r3, r4
 80049b0:	db01      	blt.n	80049b6 <__sfputc_r+0x16>
 80049b2:	290a      	cmp	r1, #10
 80049b4:	d103      	bne.n	80049be <__sfputc_r+0x1e>
 80049b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ba:	f7ff bcab 	b.w	8004314 <__swbuf_r>
 80049be:	6813      	ldr	r3, [r2, #0]
 80049c0:	1c58      	adds	r0, r3, #1
 80049c2:	6010      	str	r0, [r2, #0]
 80049c4:	7019      	strb	r1, [r3, #0]
 80049c6:	4608      	mov	r0, r1
 80049c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <__sfputs_r>:
 80049ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d0:	4606      	mov	r6, r0
 80049d2:	460f      	mov	r7, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	18d5      	adds	r5, r2, r3
 80049d8:	42ac      	cmp	r4, r5
 80049da:	d101      	bne.n	80049e0 <__sfputs_r+0x12>
 80049dc:	2000      	movs	r0, #0
 80049de:	e007      	b.n	80049f0 <__sfputs_r+0x22>
 80049e0:	463a      	mov	r2, r7
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	4630      	mov	r0, r6
 80049e8:	f7ff ffda 	bl	80049a0 <__sfputc_r>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d1f3      	bne.n	80049d8 <__sfputs_r+0xa>
 80049f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049f4 <_vfiprintf_r>:
 80049f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	460c      	mov	r4, r1
 80049fa:	b09d      	sub	sp, #116	; 0x74
 80049fc:	4617      	mov	r7, r2
 80049fe:	461d      	mov	r5, r3
 8004a00:	4606      	mov	r6, r0
 8004a02:	b118      	cbz	r0, 8004a0c <_vfiprintf_r+0x18>
 8004a04:	6983      	ldr	r3, [r0, #24]
 8004a06:	b90b      	cbnz	r3, 8004a0c <_vfiprintf_r+0x18>
 8004a08:	f7ff fe34 	bl	8004674 <__sinit>
 8004a0c:	4b7c      	ldr	r3, [pc, #496]	; (8004c00 <_vfiprintf_r+0x20c>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d158      	bne.n	8004ac4 <_vfiprintf_r+0xd0>
 8004a12:	6874      	ldr	r4, [r6, #4]
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	0718      	lsls	r0, r3, #28
 8004a18:	d55e      	bpl.n	8004ad8 <_vfiprintf_r+0xe4>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05b      	beq.n	8004ad8 <_vfiprintf_r+0xe4>
 8004a20:	2300      	movs	r3, #0
 8004a22:	9309      	str	r3, [sp, #36]	; 0x24
 8004a24:	2320      	movs	r3, #32
 8004a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a2a:	2330      	movs	r3, #48	; 0x30
 8004a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a30:	9503      	str	r5, [sp, #12]
 8004a32:	f04f 0b01 	mov.w	fp, #1
 8004a36:	46b8      	mov	r8, r7
 8004a38:	4645      	mov	r5, r8
 8004a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a3e:	b10b      	cbz	r3, 8004a44 <_vfiprintf_r+0x50>
 8004a40:	2b25      	cmp	r3, #37	; 0x25
 8004a42:	d154      	bne.n	8004aee <_vfiprintf_r+0xfa>
 8004a44:	ebb8 0a07 	subs.w	sl, r8, r7
 8004a48:	d00b      	beq.n	8004a62 <_vfiprintf_r+0x6e>
 8004a4a:	4653      	mov	r3, sl
 8004a4c:	463a      	mov	r2, r7
 8004a4e:	4621      	mov	r1, r4
 8004a50:	4630      	mov	r0, r6
 8004a52:	f7ff ffbc 	bl	80049ce <__sfputs_r>
 8004a56:	3001      	adds	r0, #1
 8004a58:	f000 80c2 	beq.w	8004be0 <_vfiprintf_r+0x1ec>
 8004a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5e:	4453      	add	r3, sl
 8004a60:	9309      	str	r3, [sp, #36]	; 0x24
 8004a62:	f898 3000 	ldrb.w	r3, [r8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80ba 	beq.w	8004be0 <_vfiprintf_r+0x1ec>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a76:	9304      	str	r3, [sp, #16]
 8004a78:	9307      	str	r3, [sp, #28]
 8004a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a80:	46a8      	mov	r8, r5
 8004a82:	2205      	movs	r2, #5
 8004a84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004a88:	485e      	ldr	r0, [pc, #376]	; (8004c04 <_vfiprintf_r+0x210>)
 8004a8a:	f7fb fba9 	bl	80001e0 <memchr>
 8004a8e:	9b04      	ldr	r3, [sp, #16]
 8004a90:	bb78      	cbnz	r0, 8004af2 <_vfiprintf_r+0xfe>
 8004a92:	06d9      	lsls	r1, r3, #27
 8004a94:	bf44      	itt	mi
 8004a96:	2220      	movmi	r2, #32
 8004a98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a9c:	071a      	lsls	r2, r3, #28
 8004a9e:	bf44      	itt	mi
 8004aa0:	222b      	movmi	r2, #43	; 0x2b
 8004aa2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aa6:	782a      	ldrb	r2, [r5, #0]
 8004aa8:	2a2a      	cmp	r2, #42	; 0x2a
 8004aaa:	d02a      	beq.n	8004b02 <_vfiprintf_r+0x10e>
 8004aac:	9a07      	ldr	r2, [sp, #28]
 8004aae:	46a8      	mov	r8, r5
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	250a      	movs	r5, #10
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004aba:	3b30      	subs	r3, #48	; 0x30
 8004abc:	2b09      	cmp	r3, #9
 8004abe:	d969      	bls.n	8004b94 <_vfiprintf_r+0x1a0>
 8004ac0:	b360      	cbz	r0, 8004b1c <_vfiprintf_r+0x128>
 8004ac2:	e024      	b.n	8004b0e <_vfiprintf_r+0x11a>
 8004ac4:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <_vfiprintf_r+0x214>)
 8004ac6:	429c      	cmp	r4, r3
 8004ac8:	d101      	bne.n	8004ace <_vfiprintf_r+0xda>
 8004aca:	68b4      	ldr	r4, [r6, #8]
 8004acc:	e7a2      	b.n	8004a14 <_vfiprintf_r+0x20>
 8004ace:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <_vfiprintf_r+0x218>)
 8004ad0:	429c      	cmp	r4, r3
 8004ad2:	bf08      	it	eq
 8004ad4:	68f4      	ldreq	r4, [r6, #12]
 8004ad6:	e79d      	b.n	8004a14 <_vfiprintf_r+0x20>
 8004ad8:	4621      	mov	r1, r4
 8004ada:	4630      	mov	r0, r6
 8004adc:	f7ff fc6c 	bl	80043b8 <__swsetup_r>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d09d      	beq.n	8004a20 <_vfiprintf_r+0x2c>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	b01d      	add	sp, #116	; 0x74
 8004aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aee:	46a8      	mov	r8, r5
 8004af0:	e7a2      	b.n	8004a38 <_vfiprintf_r+0x44>
 8004af2:	4a44      	ldr	r2, [pc, #272]	; (8004c04 <_vfiprintf_r+0x210>)
 8004af4:	1a80      	subs	r0, r0, r2
 8004af6:	fa0b f000 	lsl.w	r0, fp, r0
 8004afa:	4318      	orrs	r0, r3
 8004afc:	9004      	str	r0, [sp, #16]
 8004afe:	4645      	mov	r5, r8
 8004b00:	e7be      	b.n	8004a80 <_vfiprintf_r+0x8c>
 8004b02:	9a03      	ldr	r2, [sp, #12]
 8004b04:	1d11      	adds	r1, r2, #4
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	9103      	str	r1, [sp, #12]
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	db01      	blt.n	8004b12 <_vfiprintf_r+0x11e>
 8004b0e:	9207      	str	r2, [sp, #28]
 8004b10:	e004      	b.n	8004b1c <_vfiprintf_r+0x128>
 8004b12:	4252      	negs	r2, r2
 8004b14:	f043 0302 	orr.w	r3, r3, #2
 8004b18:	9207      	str	r2, [sp, #28]
 8004b1a:	9304      	str	r3, [sp, #16]
 8004b1c:	f898 3000 	ldrb.w	r3, [r8]
 8004b20:	2b2e      	cmp	r3, #46	; 0x2e
 8004b22:	d10e      	bne.n	8004b42 <_vfiprintf_r+0x14e>
 8004b24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b28:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2a:	d138      	bne.n	8004b9e <_vfiprintf_r+0x1aa>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	9203      	str	r2, [sp, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bfb8      	it	lt
 8004b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b3c:	f108 0802 	add.w	r8, r8, #2
 8004b40:	9305      	str	r3, [sp, #20]
 8004b42:	4d33      	ldr	r5, [pc, #204]	; (8004c10 <_vfiprintf_r+0x21c>)
 8004b44:	f898 1000 	ldrb.w	r1, [r8]
 8004b48:	2203      	movs	r2, #3
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f7fb fb48 	bl	80001e0 <memchr>
 8004b50:	b140      	cbz	r0, 8004b64 <_vfiprintf_r+0x170>
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	1b40      	subs	r0, r0, r5
 8004b56:	fa03 f000 	lsl.w	r0, r3, r0
 8004b5a:	9b04      	ldr	r3, [sp, #16]
 8004b5c:	4303      	orrs	r3, r0
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	9304      	str	r3, [sp, #16]
 8004b64:	f898 1000 	ldrb.w	r1, [r8]
 8004b68:	482a      	ldr	r0, [pc, #168]	; (8004c14 <_vfiprintf_r+0x220>)
 8004b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b6e:	2206      	movs	r2, #6
 8004b70:	f108 0701 	add.w	r7, r8, #1
 8004b74:	f7fb fb34 	bl	80001e0 <memchr>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d037      	beq.n	8004bec <_vfiprintf_r+0x1f8>
 8004b7c:	4b26      	ldr	r3, [pc, #152]	; (8004c18 <_vfiprintf_r+0x224>)
 8004b7e:	bb1b      	cbnz	r3, 8004bc8 <_vfiprintf_r+0x1d4>
 8004b80:	9b03      	ldr	r3, [sp, #12]
 8004b82:	3307      	adds	r3, #7
 8004b84:	f023 0307 	bic.w	r3, r3, #7
 8004b88:	3308      	adds	r3, #8
 8004b8a:	9303      	str	r3, [sp, #12]
 8004b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8e:	444b      	add	r3, r9
 8004b90:	9309      	str	r3, [sp, #36]	; 0x24
 8004b92:	e750      	b.n	8004a36 <_vfiprintf_r+0x42>
 8004b94:	fb05 3202 	mla	r2, r5, r2, r3
 8004b98:	2001      	movs	r0, #1
 8004b9a:	4688      	mov	r8, r1
 8004b9c:	e78a      	b.n	8004ab4 <_vfiprintf_r+0xc0>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f108 0801 	add.w	r8, r8, #1
 8004ba4:	9305      	str	r3, [sp, #20]
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	250a      	movs	r5, #10
 8004baa:	4640      	mov	r0, r8
 8004bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bb0:	3a30      	subs	r2, #48	; 0x30
 8004bb2:	2a09      	cmp	r2, #9
 8004bb4:	d903      	bls.n	8004bbe <_vfiprintf_r+0x1ca>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0c3      	beq.n	8004b42 <_vfiprintf_r+0x14e>
 8004bba:	9105      	str	r1, [sp, #20]
 8004bbc:	e7c1      	b.n	8004b42 <_vfiprintf_r+0x14e>
 8004bbe:	fb05 2101 	mla	r1, r5, r1, r2
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	e7f0      	b.n	8004baa <_vfiprintf_r+0x1b6>
 8004bc8:	ab03      	add	r3, sp, #12
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4622      	mov	r2, r4
 8004bce:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <_vfiprintf_r+0x228>)
 8004bd0:	a904      	add	r1, sp, #16
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f3af 8000 	nop.w
 8004bd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bdc:	4681      	mov	r9, r0
 8004bde:	d1d5      	bne.n	8004b8c <_vfiprintf_r+0x198>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	065b      	lsls	r3, r3, #25
 8004be4:	f53f af7e 	bmi.w	8004ae4 <_vfiprintf_r+0xf0>
 8004be8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bea:	e77d      	b.n	8004ae8 <_vfiprintf_r+0xf4>
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <_vfiprintf_r+0x228>)
 8004bf4:	a904      	add	r1, sp, #16
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	f000 f888 	bl	8004d0c <_printf_i>
 8004bfc:	e7ec      	b.n	8004bd8 <_vfiprintf_r+0x1e4>
 8004bfe:	bf00      	nop
 8004c00:	0800521c 	.word	0x0800521c
 8004c04:	0800525c 	.word	0x0800525c
 8004c08:	0800523c 	.word	0x0800523c
 8004c0c:	080051fc 	.word	0x080051fc
 8004c10:	08005262 	.word	0x08005262
 8004c14:	08005266 	.word	0x08005266
 8004c18:	00000000 	.word	0x00000000
 8004c1c:	080049cf 	.word	0x080049cf

08004c20 <_printf_common>:
 8004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	4691      	mov	r9, r2
 8004c26:	461f      	mov	r7, r3
 8004c28:	688a      	ldr	r2, [r1, #8]
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bfb8      	it	lt
 8004c34:	4613      	movlt	r3, r2
 8004c36:	f8c9 3000 	str.w	r3, [r9]
 8004c3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c3e:	4606      	mov	r6, r0
 8004c40:	460c      	mov	r4, r1
 8004c42:	b112      	cbz	r2, 8004c4a <_printf_common+0x2a>
 8004c44:	3301      	adds	r3, #1
 8004c46:	f8c9 3000 	str.w	r3, [r9]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	0699      	lsls	r1, r3, #26
 8004c4e:	bf42      	ittt	mi
 8004c50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c54:	3302      	addmi	r3, #2
 8004c56:	f8c9 3000 	strmi.w	r3, [r9]
 8004c5a:	6825      	ldr	r5, [r4, #0]
 8004c5c:	f015 0506 	ands.w	r5, r5, #6
 8004c60:	d107      	bne.n	8004c72 <_printf_common+0x52>
 8004c62:	f104 0a19 	add.w	sl, r4, #25
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	f8d9 2000 	ldr.w	r2, [r9]
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	42ab      	cmp	r3, r5
 8004c70:	dc28      	bgt.n	8004cc4 <_printf_common+0xa4>
 8004c72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	3300      	adds	r3, #0
 8004c7a:	bf18      	it	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	0692      	lsls	r2, r2, #26
 8004c80:	d42d      	bmi.n	8004cde <_printf_common+0xbe>
 8004c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c86:	4639      	mov	r1, r7
 8004c88:	4630      	mov	r0, r6
 8004c8a:	47c0      	blx	r8
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d020      	beq.n	8004cd2 <_printf_common+0xb2>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	68e5      	ldr	r5, [r4, #12]
 8004c94:	f8d9 2000 	ldr.w	r2, [r9]
 8004c98:	f003 0306 	and.w	r3, r3, #6
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	bf08      	it	eq
 8004ca0:	1aad      	subeq	r5, r5, r2
 8004ca2:	68a3      	ldr	r3, [r4, #8]
 8004ca4:	6922      	ldr	r2, [r4, #16]
 8004ca6:	bf0c      	ite	eq
 8004ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cac:	2500      	movne	r5, #0
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	bfc4      	itt	gt
 8004cb2:	1a9b      	subgt	r3, r3, r2
 8004cb4:	18ed      	addgt	r5, r5, r3
 8004cb6:	f04f 0900 	mov.w	r9, #0
 8004cba:	341a      	adds	r4, #26
 8004cbc:	454d      	cmp	r5, r9
 8004cbe:	d11a      	bne.n	8004cf6 <_printf_common+0xd6>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	e008      	b.n	8004cd6 <_printf_common+0xb6>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	4639      	mov	r1, r7
 8004cca:	4630      	mov	r0, r6
 8004ccc:	47c0      	blx	r8
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d103      	bne.n	8004cda <_printf_common+0xba>
 8004cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	3501      	adds	r5, #1
 8004cdc:	e7c3      	b.n	8004c66 <_printf_common+0x46>
 8004cde:	18e1      	adds	r1, r4, r3
 8004ce0:	1c5a      	adds	r2, r3, #1
 8004ce2:	2030      	movs	r0, #48	; 0x30
 8004ce4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ce8:	4422      	add	r2, r4
 8004cea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	e7c5      	b.n	8004c82 <_printf_common+0x62>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	47c0      	blx	r8
 8004d00:	3001      	adds	r0, #1
 8004d02:	d0e6      	beq.n	8004cd2 <_printf_common+0xb2>
 8004d04:	f109 0901 	add.w	r9, r9, #1
 8004d08:	e7d8      	b.n	8004cbc <_printf_common+0x9c>
	...

08004d0c <_printf_i>:
 8004d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d14:	460c      	mov	r4, r1
 8004d16:	7e09      	ldrb	r1, [r1, #24]
 8004d18:	b085      	sub	sp, #20
 8004d1a:	296e      	cmp	r1, #110	; 0x6e
 8004d1c:	4617      	mov	r7, r2
 8004d1e:	4606      	mov	r6, r0
 8004d20:	4698      	mov	r8, r3
 8004d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d24:	f000 80b3 	beq.w	8004e8e <_printf_i+0x182>
 8004d28:	d822      	bhi.n	8004d70 <_printf_i+0x64>
 8004d2a:	2963      	cmp	r1, #99	; 0x63
 8004d2c:	d036      	beq.n	8004d9c <_printf_i+0x90>
 8004d2e:	d80a      	bhi.n	8004d46 <_printf_i+0x3a>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	f000 80b9 	beq.w	8004ea8 <_printf_i+0x19c>
 8004d36:	2958      	cmp	r1, #88	; 0x58
 8004d38:	f000 8083 	beq.w	8004e42 <_printf_i+0x136>
 8004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d44:	e032      	b.n	8004dac <_printf_i+0xa0>
 8004d46:	2964      	cmp	r1, #100	; 0x64
 8004d48:	d001      	beq.n	8004d4e <_printf_i+0x42>
 8004d4a:	2969      	cmp	r1, #105	; 0x69
 8004d4c:	d1f6      	bne.n	8004d3c <_printf_i+0x30>
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	6813      	ldr	r3, [r2, #0]
 8004d52:	0605      	lsls	r5, r0, #24
 8004d54:	f103 0104 	add.w	r1, r3, #4
 8004d58:	d52a      	bpl.n	8004db0 <_printf_i+0xa4>
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da03      	bge.n	8004d6a <_printf_i+0x5e>
 8004d62:	222d      	movs	r2, #45	; 0x2d
 8004d64:	425b      	negs	r3, r3
 8004d66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d6a:	486f      	ldr	r0, [pc, #444]	; (8004f28 <_printf_i+0x21c>)
 8004d6c:	220a      	movs	r2, #10
 8004d6e:	e039      	b.n	8004de4 <_printf_i+0xd8>
 8004d70:	2973      	cmp	r1, #115	; 0x73
 8004d72:	f000 809d 	beq.w	8004eb0 <_printf_i+0x1a4>
 8004d76:	d808      	bhi.n	8004d8a <_printf_i+0x7e>
 8004d78:	296f      	cmp	r1, #111	; 0x6f
 8004d7a:	d020      	beq.n	8004dbe <_printf_i+0xb2>
 8004d7c:	2970      	cmp	r1, #112	; 0x70
 8004d7e:	d1dd      	bne.n	8004d3c <_printf_i+0x30>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	f043 0320 	orr.w	r3, r3, #32
 8004d86:	6023      	str	r3, [r4, #0]
 8004d88:	e003      	b.n	8004d92 <_printf_i+0x86>
 8004d8a:	2975      	cmp	r1, #117	; 0x75
 8004d8c:	d017      	beq.n	8004dbe <_printf_i+0xb2>
 8004d8e:	2978      	cmp	r1, #120	; 0x78
 8004d90:	d1d4      	bne.n	8004d3c <_printf_i+0x30>
 8004d92:	2378      	movs	r3, #120	; 0x78
 8004d94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d98:	4864      	ldr	r0, [pc, #400]	; (8004f2c <_printf_i+0x220>)
 8004d9a:	e055      	b.n	8004e48 <_printf_i+0x13c>
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	1d19      	adds	r1, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6011      	str	r1, [r2, #0]
 8004da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dac:	2301      	movs	r3, #1
 8004dae:	e08c      	b.n	8004eca <_printf_i+0x1be>
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6011      	str	r1, [r2, #0]
 8004db4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004db8:	bf18      	it	ne
 8004dba:	b21b      	sxthne	r3, r3
 8004dbc:	e7cf      	b.n	8004d5e <_printf_i+0x52>
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	6825      	ldr	r5, [r4, #0]
 8004dc2:	1d18      	adds	r0, r3, #4
 8004dc4:	6010      	str	r0, [r2, #0]
 8004dc6:	0628      	lsls	r0, r5, #24
 8004dc8:	d501      	bpl.n	8004dce <_printf_i+0xc2>
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	e002      	b.n	8004dd4 <_printf_i+0xc8>
 8004dce:	0668      	lsls	r0, r5, #25
 8004dd0:	d5fb      	bpl.n	8004dca <_printf_i+0xbe>
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	4854      	ldr	r0, [pc, #336]	; (8004f28 <_printf_i+0x21c>)
 8004dd6:	296f      	cmp	r1, #111	; 0x6f
 8004dd8:	bf14      	ite	ne
 8004dda:	220a      	movne	r2, #10
 8004ddc:	2208      	moveq	r2, #8
 8004dde:	2100      	movs	r1, #0
 8004de0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de4:	6865      	ldr	r5, [r4, #4]
 8004de6:	60a5      	str	r5, [r4, #8]
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	f2c0 8095 	blt.w	8004f18 <_printf_i+0x20c>
 8004dee:	6821      	ldr	r1, [r4, #0]
 8004df0:	f021 0104 	bic.w	r1, r1, #4
 8004df4:	6021      	str	r1, [r4, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d13d      	bne.n	8004e76 <_printf_i+0x16a>
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	f040 808e 	bne.w	8004f1c <_printf_i+0x210>
 8004e00:	4665      	mov	r5, ip
 8004e02:	2a08      	cmp	r2, #8
 8004e04:	d10b      	bne.n	8004e1e <_printf_i+0x112>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	07db      	lsls	r3, r3, #31
 8004e0a:	d508      	bpl.n	8004e1e <_printf_i+0x112>
 8004e0c:	6923      	ldr	r3, [r4, #16]
 8004e0e:	6862      	ldr	r2, [r4, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	bfde      	ittt	le
 8004e14:	2330      	movle	r3, #48	; 0x30
 8004e16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e1e:	ebac 0305 	sub.w	r3, ip, r5
 8004e22:	6123      	str	r3, [r4, #16]
 8004e24:	f8cd 8000 	str.w	r8, [sp]
 8004e28:	463b      	mov	r3, r7
 8004e2a:	aa03      	add	r2, sp, #12
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7ff fef6 	bl	8004c20 <_printf_common>
 8004e34:	3001      	adds	r0, #1
 8004e36:	d14d      	bne.n	8004ed4 <_printf_i+0x1c8>
 8004e38:	f04f 30ff 	mov.w	r0, #4294967295
 8004e3c:	b005      	add	sp, #20
 8004e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e42:	4839      	ldr	r0, [pc, #228]	; (8004f28 <_printf_i+0x21c>)
 8004e44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	6821      	ldr	r1, [r4, #0]
 8004e4c:	1d1d      	adds	r5, r3, #4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6015      	str	r5, [r2, #0]
 8004e52:	060a      	lsls	r2, r1, #24
 8004e54:	d50b      	bpl.n	8004e6e <_printf_i+0x162>
 8004e56:	07ca      	lsls	r2, r1, #31
 8004e58:	bf44      	itt	mi
 8004e5a:	f041 0120 	orrmi.w	r1, r1, #32
 8004e5e:	6021      	strmi	r1, [r4, #0]
 8004e60:	b91b      	cbnz	r3, 8004e6a <_printf_i+0x15e>
 8004e62:	6822      	ldr	r2, [r4, #0]
 8004e64:	f022 0220 	bic.w	r2, r2, #32
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	e7b7      	b.n	8004dde <_printf_i+0xd2>
 8004e6e:	064d      	lsls	r5, r1, #25
 8004e70:	bf48      	it	mi
 8004e72:	b29b      	uxthmi	r3, r3
 8004e74:	e7ef      	b.n	8004e56 <_printf_i+0x14a>
 8004e76:	4665      	mov	r5, ip
 8004e78:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e7c:	fb02 3311 	mls	r3, r2, r1, r3
 8004e80:	5cc3      	ldrb	r3, [r0, r3]
 8004e82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e86:	460b      	mov	r3, r1
 8004e88:	2900      	cmp	r1, #0
 8004e8a:	d1f5      	bne.n	8004e78 <_printf_i+0x16c>
 8004e8c:	e7b9      	b.n	8004e02 <_printf_i+0xf6>
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	6825      	ldr	r5, [r4, #0]
 8004e92:	6961      	ldr	r1, [r4, #20]
 8004e94:	1d18      	adds	r0, r3, #4
 8004e96:	6010      	str	r0, [r2, #0]
 8004e98:	0628      	lsls	r0, r5, #24
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	d501      	bpl.n	8004ea2 <_printf_i+0x196>
 8004e9e:	6019      	str	r1, [r3, #0]
 8004ea0:	e002      	b.n	8004ea8 <_printf_i+0x19c>
 8004ea2:	066a      	lsls	r2, r5, #25
 8004ea4:	d5fb      	bpl.n	8004e9e <_printf_i+0x192>
 8004ea6:	8019      	strh	r1, [r3, #0]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6123      	str	r3, [r4, #16]
 8004eac:	4665      	mov	r5, ip
 8004eae:	e7b9      	b.n	8004e24 <_printf_i+0x118>
 8004eb0:	6813      	ldr	r3, [r2, #0]
 8004eb2:	1d19      	adds	r1, r3, #4
 8004eb4:	6011      	str	r1, [r2, #0]
 8004eb6:	681d      	ldr	r5, [r3, #0]
 8004eb8:	6862      	ldr	r2, [r4, #4]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f7fb f98f 	bl	80001e0 <memchr>
 8004ec2:	b108      	cbz	r0, 8004ec8 <_printf_i+0x1bc>
 8004ec4:	1b40      	subs	r0, r0, r5
 8004ec6:	6060      	str	r0, [r4, #4]
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed2:	e7a7      	b.n	8004e24 <_printf_i+0x118>
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	4639      	mov	r1, r7
 8004eda:	4630      	mov	r0, r6
 8004edc:	47c0      	blx	r8
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d0aa      	beq.n	8004e38 <_printf_i+0x12c>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	079b      	lsls	r3, r3, #30
 8004ee6:	d413      	bmi.n	8004f10 <_printf_i+0x204>
 8004ee8:	68e0      	ldr	r0, [r4, #12]
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	4298      	cmp	r0, r3
 8004eee:	bfb8      	it	lt
 8004ef0:	4618      	movlt	r0, r3
 8004ef2:	e7a3      	b.n	8004e3c <_printf_i+0x130>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	464a      	mov	r2, r9
 8004ef8:	4639      	mov	r1, r7
 8004efa:	4630      	mov	r0, r6
 8004efc:	47c0      	blx	r8
 8004efe:	3001      	adds	r0, #1
 8004f00:	d09a      	beq.n	8004e38 <_printf_i+0x12c>
 8004f02:	3501      	adds	r5, #1
 8004f04:	68e3      	ldr	r3, [r4, #12]
 8004f06:	9a03      	ldr	r2, [sp, #12]
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	42ab      	cmp	r3, r5
 8004f0c:	dcf2      	bgt.n	8004ef4 <_printf_i+0x1e8>
 8004f0e:	e7eb      	b.n	8004ee8 <_printf_i+0x1dc>
 8004f10:	2500      	movs	r5, #0
 8004f12:	f104 0919 	add.w	r9, r4, #25
 8004f16:	e7f5      	b.n	8004f04 <_printf_i+0x1f8>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ac      	bne.n	8004e76 <_printf_i+0x16a>
 8004f1c:	7803      	ldrb	r3, [r0, #0]
 8004f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f26:	e76c      	b.n	8004e02 <_printf_i+0xf6>
 8004f28:	0800526d 	.word	0x0800526d
 8004f2c:	0800527e 	.word	0x0800527e

08004f30 <_putc_r>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	460d      	mov	r5, r1
 8004f34:	4614      	mov	r4, r2
 8004f36:	4606      	mov	r6, r0
 8004f38:	b118      	cbz	r0, 8004f42 <_putc_r+0x12>
 8004f3a:	6983      	ldr	r3, [r0, #24]
 8004f3c:	b90b      	cbnz	r3, 8004f42 <_putc_r+0x12>
 8004f3e:	f7ff fb99 	bl	8004674 <__sinit>
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <_putc_r+0x60>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	d112      	bne.n	8004f6e <_putc_r+0x3e>
 8004f48:	6874      	ldr	r4, [r6, #4]
 8004f4a:	68a3      	ldr	r3, [r4, #8]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	da16      	bge.n	8004f82 <_putc_r+0x52>
 8004f54:	69a2      	ldr	r2, [r4, #24]
 8004f56:	4293      	cmp	r3, r2
 8004f58:	db02      	blt.n	8004f60 <_putc_r+0x30>
 8004f5a:	b2eb      	uxtb	r3, r5
 8004f5c:	2b0a      	cmp	r3, #10
 8004f5e:	d110      	bne.n	8004f82 <_putc_r+0x52>
 8004f60:	4622      	mov	r2, r4
 8004f62:	4629      	mov	r1, r5
 8004f64:	4630      	mov	r0, r6
 8004f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f6a:	f7ff b9d3 	b.w	8004314 <__swbuf_r>
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <_putc_r+0x64>)
 8004f70:	429c      	cmp	r4, r3
 8004f72:	d101      	bne.n	8004f78 <_putc_r+0x48>
 8004f74:	68b4      	ldr	r4, [r6, #8]
 8004f76:	e7e8      	b.n	8004f4a <_putc_r+0x1a>
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <_putc_r+0x68>)
 8004f7a:	429c      	cmp	r4, r3
 8004f7c:	bf08      	it	eq
 8004f7e:	68f4      	ldreq	r4, [r6, #12]
 8004f80:	e7e3      	b.n	8004f4a <_putc_r+0x1a>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	6022      	str	r2, [r4, #0]
 8004f88:	701d      	strb	r5, [r3, #0]
 8004f8a:	b2e8      	uxtb	r0, r5
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	bf00      	nop
 8004f90:	0800521c 	.word	0x0800521c
 8004f94:	0800523c 	.word	0x0800523c
 8004f98:	080051fc 	.word	0x080051fc

08004f9c <_sbrk_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4c06      	ldr	r4, [pc, #24]	; (8004fb8 <_sbrk_r+0x1c>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	f7fc f828 	bl	8000ffc <_sbrk>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_sbrk_r+0x1a>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_sbrk_r+0x1a>
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	2000021c 	.word	0x2000021c

08004fbc <__sread>:
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc4:	f000 f896 	bl	80050f4 <_read_r>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	bfab      	itete	ge
 8004fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fce:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd0:	181b      	addge	r3, r3, r0
 8004fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fd6:	bfac      	ite	ge
 8004fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fda:	81a3      	strhlt	r3, [r4, #12]
 8004fdc:	bd10      	pop	{r4, pc}

08004fde <__swrite>:
 8004fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe2:	461f      	mov	r7, r3
 8004fe4:	898b      	ldrh	r3, [r1, #12]
 8004fe6:	05db      	lsls	r3, r3, #23
 8004fe8:	4605      	mov	r5, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	4616      	mov	r6, r2
 8004fee:	d505      	bpl.n	8004ffc <__swrite+0x1e>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff8:	f000 f868 	bl	80050cc <_lseek_r>
 8004ffc:	89a3      	ldrh	r3, [r4, #12]
 8004ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	4632      	mov	r2, r6
 800500a:	463b      	mov	r3, r7
 800500c:	4628      	mov	r0, r5
 800500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005012:	f000 b817 	b.w	8005044 <_write_r>

08005016 <__sseek>:
 8005016:	b510      	push	{r4, lr}
 8005018:	460c      	mov	r4, r1
 800501a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501e:	f000 f855 	bl	80050cc <_lseek_r>
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	bf15      	itete	ne
 8005028:	6560      	strne	r0, [r4, #84]	; 0x54
 800502a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800502e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005032:	81a3      	strheq	r3, [r4, #12]
 8005034:	bf18      	it	ne
 8005036:	81a3      	strhne	r3, [r4, #12]
 8005038:	bd10      	pop	{r4, pc}

0800503a <__sclose>:
 800503a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503e:	f000 b813 	b.w	8005068 <_close_r>
	...

08005044 <_write_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4c07      	ldr	r4, [pc, #28]	; (8005064 <_write_r+0x20>)
 8005048:	4605      	mov	r5, r0
 800504a:	4608      	mov	r0, r1
 800504c:	4611      	mov	r1, r2
 800504e:	2200      	movs	r2, #0
 8005050:	6022      	str	r2, [r4, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	f7fb ff81 	bl	8000f5a <_write>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_write_r+0x1e>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	b103      	cbz	r3, 8005062 <_write_r+0x1e>
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	2000021c 	.word	0x2000021c

08005068 <_close_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4c06      	ldr	r4, [pc, #24]	; (8005084 <_close_r+0x1c>)
 800506c:	2300      	movs	r3, #0
 800506e:	4605      	mov	r5, r0
 8005070:	4608      	mov	r0, r1
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	f7fb ff8d 	bl	8000f92 <_close>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_close_r+0x1a>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	b103      	cbz	r3, 8005082 <_close_r+0x1a>
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	2000021c 	.word	0x2000021c

08005088 <_fstat_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4c07      	ldr	r4, [pc, #28]	; (80050a8 <_fstat_r+0x20>)
 800508c:	2300      	movs	r3, #0
 800508e:	4605      	mov	r5, r0
 8005090:	4608      	mov	r0, r1
 8005092:	4611      	mov	r1, r2
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	f7fb ff88 	bl	8000faa <_fstat>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d102      	bne.n	80050a4 <_fstat_r+0x1c>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	b103      	cbz	r3, 80050a4 <_fstat_r+0x1c>
 80050a2:	602b      	str	r3, [r5, #0]
 80050a4:	bd38      	pop	{r3, r4, r5, pc}
 80050a6:	bf00      	nop
 80050a8:	2000021c 	.word	0x2000021c

080050ac <_isatty_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4c06      	ldr	r4, [pc, #24]	; (80050c8 <_isatty_r+0x1c>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4605      	mov	r5, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	f7fb ff87 	bl	8000fca <_isatty>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_isatty_r+0x1a>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_isatty_r+0x1a>
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	2000021c 	.word	0x2000021c

080050cc <_lseek_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4c07      	ldr	r4, [pc, #28]	; (80050ec <_lseek_r+0x20>)
 80050d0:	4605      	mov	r5, r0
 80050d2:	4608      	mov	r0, r1
 80050d4:	4611      	mov	r1, r2
 80050d6:	2200      	movs	r2, #0
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7fb ff80 	bl	8000fe0 <_lseek>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d102      	bne.n	80050ea <_lseek_r+0x1e>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	b103      	cbz	r3, 80050ea <_lseek_r+0x1e>
 80050e8:	602b      	str	r3, [r5, #0]
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	2000021c 	.word	0x2000021c

080050f0 <__malloc_lock>:
 80050f0:	4770      	bx	lr

080050f2 <__malloc_unlock>:
 80050f2:	4770      	bx	lr

080050f4 <_read_r>:
 80050f4:	b538      	push	{r3, r4, r5, lr}
 80050f6:	4c07      	ldr	r4, [pc, #28]	; (8005114 <_read_r+0x20>)
 80050f8:	4605      	mov	r5, r0
 80050fa:	4608      	mov	r0, r1
 80050fc:	4611      	mov	r1, r2
 80050fe:	2200      	movs	r2, #0
 8005100:	6022      	str	r2, [r4, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	f7fb ff0c 	bl	8000f20 <_read>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_read_r+0x1e>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	b103      	cbz	r3, 8005112 <_read_r+0x1e>
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	2000021c 	.word	0x2000021c

08005118 <_init>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr

08005124 <_fini>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr
