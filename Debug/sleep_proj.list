
sleep_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004118  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004418  08004418  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004420  08004420  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004498  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004498  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008543  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001817  00000000  00000000  000285e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  00029e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  0002a568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162c8  00000000  00000000  0002ac08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007028  00000000  00000000  00040ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084e52  00000000  00000000  00047ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ccd4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024cc  00000000  00000000  000ccdc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042a0 	.word	0x080042a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080042a0 	.word	0x080042a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc40 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f81c 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8d0 	bl	8000730 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f8ae 	bl	80006f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f882 	bl	800069c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("Starting my application...\r\n");
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0x38>)
 800059a:	f002 ff5d 	bl	8003458 <puts>

	//** Fixed size command of 3 bytes *[]#, Initialise
	//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 21);	//3); //
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9); //dma return
 800059e:	2209      	movs	r2, #9
 80005a0:	4906      	ldr	r1, [pc, #24]	; (80005bc <main+0x3c>)
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <main+0x40>)
 80005a4:	f002 f890 	bl	80026c8 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	process_keystroke();
 80005a8:	f000 f9fe 	bl	80009a8 <process_keystroke>
		HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
			count++;
	}
	  if(huart2.RxXferCount > count)
		  count=huart2.RxXferCount;*/
	  HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f000 fc9c 	bl	8000eec <HAL_Delay>
	process_keystroke();
 80005b4:	e7f8      	b.n	80005a8 <main+0x28>
 80005b6:	bf00      	nop
 80005b8:	080042b8 	.word	0x080042b8
 80005bc:	20000104 	.word	0x20000104
 80005c0:	20000120 	.word	0x20000120

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 feb0 	bl	8003338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <SystemClock_Config+0xd0>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a28      	ldr	r2, [pc, #160]	; (8000694 <SystemClock_Config+0xd0>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <SystemClock_Config+0xd4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemClock_Config+0xd4>)
 8000612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000638:	2310      	movs	r3, #16
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800063c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000642:	2304      	movs	r3, #4
 8000644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000646:	2307      	movs	r3, #7
 8000648:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fb24 	bl	8001c9c <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800065a:	f000 f9e7 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2102      	movs	r1, #2
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fd50 	bl	8002120 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000686:	f000 f9d1 	bl	8000a2c <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART2_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f001 ff12 	bl	80024fc <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f9a5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000120 	.word	0x20000120
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_DMA_Init+0x3c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <MX_DMA_Init+0x3c>)
 8000700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_DMA_Init+0x3c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2010      	movs	r0, #16
 8000718:	f000 fce5 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800071c:	2010      	movs	r0, #16
 800071e:	f000 fcfe 	bl	800111e <HAL_NVIC_EnableIRQ>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007bc:	f001 fa54 	bl	8001c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_GPIO_Init+0xdc>)
 80007d6:	f001 f8c5 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007da:	2320      	movs	r3, #32
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007f2:	f001 f8b7 	bl	8001964 <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	10210000 	.word	0x10210000
 800080c:	40020800 	.word	0x40020800

08000810 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000818:	1d39      	adds	r1, r7, #4
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	2201      	movs	r2, #1
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <__io_putchar+0x20>)
 8000822:	f001 feb8 	bl	8002596 <HAL_UART_Transmit>

  return ch;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000120 	.word	0x20000120

08000834 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	echo_ptr=rxBuf+count;
 800083c:	4b35      	ldr	r3, [pc, #212]	; (8000914 <HAL_UART_RxCpltCallback+0xe0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 8000844:	4413      	add	r3, r2
 8000846:	4a35      	ldr	r2, [pc, #212]	; (800091c <HAL_UART_RxCpltCallback+0xe8>)
 8000848:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 800084a:	4b34      	ldr	r3, [pc, #208]	; (800091c <HAL_UART_RxCpltCallback+0xe8>)
 800084c:	6819      	ldr	r1, [r3, #0]
 800084e:	230a      	movs	r3, #10
 8000850:	2201      	movs	r2, #1
 8000852:	4833      	ldr	r0, [pc, #204]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 8000854:	f001 fe9f 	bl	8002596 <HAL_UART_Transmit>
	printf("\r\n");
 8000858:	4832      	ldr	r0, [pc, #200]	; (8000924 <HAL_UART_RxCpltCallback+0xf0>)
 800085a:	f002 fdfd 	bl	8003458 <puts>
	switch(myUART_State)
 800085e:	4b32      	ldr	r3, [pc, #200]	; (8000928 <HAL_UART_RxCpltCallback+0xf4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <HAL_UART_RxCpltCallback+0x38>
 8000866:	2b01      	cmp	r3, #1
 8000868:	d037      	beq.n	80008da <HAL_UART_RxCpltCallback+0xa6>
 800086a:	e047      	b.n	80008fc <HAL_UART_RxCpltCallback+0xc8>
	{
		case UT_START:
			if(rxBuf[0] == '*' && rxBuf[2] == '#')
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b2a      	cmp	r3, #42	; 0x2a
 8000872:	d128      	bne.n	80008c6 <HAL_UART_RxCpltCallback+0x92>
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 8000876:	789b      	ldrb	r3, [r3, #2]
 8000878:	2b23      	cmp	r3, #35	; 0x23
 800087a:	d124      	bne.n	80008c6 <HAL_UART_RxCpltCallback+0x92>
			{
				//Start UART DMA receive based on User specified length (Caviat: always ensure user requested)
				rxBuf[1]=rxBuf[1]-'0';
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 800087e:	785b      	ldrb	r3, [r3, #1]
 8000880:	3b30      	subs	r3, #48	; 0x30
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b24      	ldr	r3, [pc, #144]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 8000886:	705a      	strb	r2, [r3, #1]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 800088a:	785b      	ldrb	r3, [r3, #1]
 800088c:	2b19      	cmp	r3, #25
 800088e:	d811      	bhi.n	80008b4 <HAL_UART_RxCpltCallback+0x80>
				{
					printf("Send CMD %i characters long:\r\n", rxBuf[1]);
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	4619      	mov	r1, r3
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <HAL_UART_RxCpltCallback+0xf8>)
 8000898:	f002 fd56 	bl	8003348 <iprintf>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, rxBuf[1]);
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	491c      	ldr	r1, [pc, #112]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 80008a8:	f001 ff0e 	bl	80026c8 <HAL_UART_Receive_DMA>
					myUART_State = UT_APP;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <HAL_UART_RxCpltCallback+0xf4>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
				if(rxBuf[1] <= sizeof(rxBuf))
 80008b2:	e011      	b.n	80008d8 <HAL_UART_RxCpltCallback+0xa4>
				}
				else
				{
					printf("Invalid size\r\n");
 80008b4:	481e      	ldr	r0, [pc, #120]	; (8000930 <HAL_UART_RxCpltCallback+0xfc>)
 80008b6:	f002 fdcf 	bl	8003458 <puts>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 80008ba:	2203      	movs	r2, #3
 80008bc:	4916      	ldr	r1, [pc, #88]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 80008be:	4818      	ldr	r0, [pc, #96]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 80008c0:	f001 ff02 	bl	80026c8 <HAL_UART_Receive_DMA>
				if(rxBuf[1] <= sizeof(rxBuf))
 80008c4:	e008      	b.n	80008d8 <HAL_UART_RxCpltCallback+0xa4>
				}
			}
			else
			{
				printf("Invalid command\r\n");
 80008c6:	481b      	ldr	r0, [pc, #108]	; (8000934 <HAL_UART_RxCpltCallback+0x100>)
 80008c8:	f002 fdc6 	bl	8003458 <puts>
				HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 80008cc:	2203      	movs	r2, #3
 80008ce:	4912      	ldr	r1, [pc, #72]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 80008d2:	f001 fef9 	bl	80026c8 <HAL_UART_Receive_DMA>
			}
			break;
 80008d6:	e011      	b.n	80008fc <HAL_UART_RxCpltCallback+0xc8>
 80008d8:	e010      	b.n	80008fc <HAL_UART_RxCpltCallback+0xc8>

		case UT_APP:
			application_handling(rxBuf);
 80008da:	480f      	ldr	r0, [pc, #60]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 80008dc:	f000 f82c 	bl	8000938 <application_handling>
			memset(rxBuf,'\0', sizeof(rxBuf));
 80008e0:	2219      	movs	r2, #25
 80008e2:	2100      	movs	r1, #0
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 80008e6:	f002 fd27 	bl	8003338 <memset>
			//Get back to state 1
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 80008ea:	2203      	movs	r2, #3
 80008ec:	490a      	ldr	r1, [pc, #40]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <HAL_UART_RxCpltCallback+0xec>)
 80008f0:	f001 feea 	bl	80026c8 <HAL_UART_Receive_DMA>
			myUART_State = UT_START;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_UART_RxCpltCallback+0xf4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
			break;
 80008fa:	bf00      	nop
	}

//resets index for echo
	memset(rxBuf,'\0', sizeof(rxBuf));
 80008fc:	2219      	movs	r2, #25
 80008fe:	2100      	movs	r1, #0
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_RxCpltCallback+0xe4>)
 8000902:	f002 fd19 	bl	8003338 <memset>
	count=0;
 8000906:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_UART_RxCpltCallback+0xe0>)
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
//			printf("Invalid Command!\r\n");
//		}
//	}

//	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000008c 	.word	0x2000008c
 8000918:	20000104 	.word	0x20000104
 800091c:	20000100 	.word	0x20000100
 8000920:	20000120 	.word	0x20000120
 8000924:	080042d4 	.word	0x080042d4
 8000928:	20000090 	.word	0x20000090
 800092c:	080042d8 	.word	0x080042d8
 8000930:	080042f8 	.word	0x080042f8
 8000934:	08004308 	.word	0x08004308

08000938 <application_handling>:


//UART Application handling function
void application_handling(char *cmd)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 8000940:	4913      	ldr	r1, [pc, #76]	; (8000990 <application_handling+0x58>)
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f002 fd90 	bl	8003468 <strstr>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d008      	beq.n	8000960 <application_handling+0x28>
	{
		//Turn LED ON (GPIOA, GPIO_PIN_5);
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2120      	movs	r1, #32
 8000952:	4810      	ldr	r0, [pc, #64]	; (8000994 <application_handling+0x5c>)
 8000954:	f001 f988 	bl	8001c68 <HAL_GPIO_WritePin>
		printf("LED Turned ON\r\n");
 8000958:	480f      	ldr	r0, [pc, #60]	; (8000998 <application_handling+0x60>)
 800095a:	f002 fd7d 	bl	8003458 <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 800095e:	e012      	b.n	8000986 <application_handling+0x4e>
	else if(strstr(cmd, "LED OFF") != NULL)
 8000960:	490e      	ldr	r1, [pc, #56]	; (800099c <application_handling+0x64>)
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f002 fd80 	bl	8003468 <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d008      	beq.n	8000980 <application_handling+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2120      	movs	r1, #32
 8000972:	4808      	ldr	r0, [pc, #32]	; (8000994 <application_handling+0x5c>)
 8000974:	f001 f978 	bl	8001c68 <HAL_GPIO_WritePin>
		printf("LED Turned OFF\r\n");
 8000978:	4809      	ldr	r0, [pc, #36]	; (80009a0 <application_handling+0x68>)
 800097a:	f002 fd6d 	bl	8003458 <puts>
}
 800097e:	e002      	b.n	8000986 <application_handling+0x4e>
		printf("Invalid Command!\r\n");
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <application_handling+0x6c>)
 8000982:	f002 fd69 	bl	8003458 <puts>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	0800431c 	.word	0x0800431c
 8000994:	40020000 	.word	0x40020000
 8000998:	08004324 	.word	0x08004324
 800099c:	08004334 	.word	0x08004334
 80009a0:	0800433c 	.word	0x0800433c
 80009a4:	0800434c 	.word	0x0800434c

080009a8 <process_keystroke>:
/*
 * function will echo last keystroke, if '\n' it will see if it is a valid command
 */
void process_keystroke()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	if(rxBuf[count] != '\0')
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <process_keystroke+0x74>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <process_keystroke+0x78>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d02f      	beq.n	8000a18 <process_keystroke+0x70>
	{	echo_ptr=rxBuf+count;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <process_keystroke+0x74>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <process_keystroke+0x78>)
 80009c0:	4413      	add	r3, r2
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <process_keystroke+0x7c>)
 80009c4:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <process_keystroke+0x7c>)
 80009c8:	6819      	ldr	r1, [r3, #0]
 80009ca:	230a      	movs	r3, #10
 80009cc:	2201      	movs	r2, #1
 80009ce:	4816      	ldr	r0, [pc, #88]	; (8000a28 <process_keystroke+0x80>)
 80009d0:	f001 fde1 	bl	8002596 <HAL_UART_Transmit>

		if(rxBuf[count] == '\r')
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <process_keystroke+0x74>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <process_keystroke+0x78>)
 80009da:	5cd3      	ldrb	r3, [r2, r3]
 80009dc:	2b0d      	cmp	r3, #13
 80009de:	d116      	bne.n	8000a0e <process_keystroke+0x66>
		{	//command may have been submitted.
			printf("\n");
 80009e0:	200a      	movs	r0, #10
 80009e2:	f002 fcc9 	bl	8003378 <putchar>
			application_handling(rxBuf);
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <process_keystroke+0x78>)
 80009e8:	f7ff ffa6 	bl	8000938 <application_handling>
			HAL_UART_DMAStop(&huart2);
 80009ec:	480e      	ldr	r0, [pc, #56]	; (8000a28 <process_keystroke+0x80>)
 80009ee:	f001 feeb 	bl	80027c8 <HAL_UART_DMAStop>

			//printf("Message!\r\n");
		//	MX_DMA_Init();
			//MX_USART2_UART_Init();
			//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 7); //dma return
			memset(rxBuf,'\0', sizeof(rxBuf));
 80009f2:	2219      	movs	r2, #25
 80009f4:	2100      	movs	r1, #0
 80009f6:	480a      	ldr	r0, [pc, #40]	; (8000a20 <process_keystroke+0x78>)
 80009f8:	f002 fc9e 	bl	8003338 <memset>
			count=0;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <process_keystroke+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9);
 8000a02:	2209      	movs	r2, #9
 8000a04:	4906      	ldr	r1, [pc, #24]	; (8000a20 <process_keystroke+0x78>)
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <process_keystroke+0x80>)
 8000a08:	f001 fe5e 	bl	80026c8 <HAL_UART_Receive_DMA>
		}
		else
			count++;
	}

}
 8000a0c:	e004      	b.n	8000a18 <process_keystroke+0x70>
			count++;
 8000a0e:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <process_keystroke+0x74>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a01      	ldr	r2, [pc, #4]	; (8000a1c <process_keystroke+0x74>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000008c 	.word	0x2000008c
 8000a20:	20000104 	.word	0x20000104
 8000a24:	20000100 	.word	0x20000100
 8000a28:	20000120 	.word	0x20000120

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a34      	ldr	r2, [pc, #208]	; (8000b7c <HAL_UART_MspInit+0xf0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d162      	bne.n	8000b74 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <HAL_UART_MspInit+0xf4>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <HAL_UART_MspInit+0xf4>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <HAL_UART_MspInit+0xf4>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <HAL_UART_MspInit+0xf4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a2b      	ldr	r2, [pc, #172]	; (8000b80 <HAL_UART_MspInit+0xf4>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <HAL_UART_MspInit+0xf4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae6:	230c      	movs	r3, #12
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af6:	2307      	movs	r3, #7
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <HAL_UART_MspInit+0xf8>)
 8000b02:	f000 ff2f 	bl	8001964 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b08:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <HAL_UART_MspInit+0x100>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b12:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b4a:	f000 fb03 	bl	8001154 <HAL_DMA_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b54:	f7ff ff6a 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2026      	movs	r0, #38	; 0x26
 8000b6a:	f000 fabc 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b6e:	2026      	movs	r0, #38	; 0x26
 8000b70:	f000 fad5 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	200000a0 	.word	0x200000a0
 8000b8c:	40026088 	.word	0x40026088

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be4:	f000 f962 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <DMA1_Stream5_IRQHandler+0x10>)
 8000bf2:	f000 fc4f 	bl	8001494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <USART2_IRQHandler+0x10>)
 8000c06:	f001 fe3b 	bl	8002880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000120 	.word	0x20000120

08000c14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
	}

return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e009      	b.n	8000c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fdd1 	bl	8000810 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf1      	blt.n	8000c60 <_write+0x12>
	}
	return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_close>:

int _close(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x50>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x16>
		heap_end = &end;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <_sbrk+0x50>)
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <_sbrk+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <_sbrk+0x50>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <_sbrk+0x50>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	466a      	mov	r2, sp
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d907      	bls.n	8000d2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d1a:	f002 fae3 	bl	80032e4 <__errno>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	230c      	movs	r3, #12
 8000d22:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	e006      	b.n	8000d38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <_sbrk+0x50>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <_sbrk+0x50>)
 8000d34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000094 	.word	0x20000094
 8000d44:	20000168 	.word	0x20000168

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <SystemInit+0x60>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <SystemInit+0x60>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <SystemInit+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <SystemInit+0x64>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SystemInit+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <SystemInit+0x64>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <SystemInit+0x64>)
 8000d74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <SystemInit+0x64>)
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <SystemInit+0x68>)
 8000d82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <SystemInit+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a08      	ldr	r2, [pc, #32]	; (8000dac <SystemInit+0x64>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SystemInit+0x60>)
 8000d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9c:	609a      	str	r2, [r3, #8]
#endif
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00
 8000dac:	40023800 	.word	0x40023800
 8000db0:	24003010 	.word	0x24003010

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffb3 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fa85 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fbcb 	bl	8000580 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dec:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000df0:	08004428 	.word	0x08004428
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000dfc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e00:	20000168 	.word	0x20000168

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f94d 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdfe 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f965 	bl	800113a <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f000 f92d 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000160 	.word	0x20000160

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000160 	.word	0x20000160

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_Delay+0x40>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff feb8 	bl	8000ed4 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e099      	b.n	80012a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001190:	e00f      	b.n	80011b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001192:	f7ff fe9f 	bl	8000ed4 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b05      	cmp	r3, #5
 800119e:	d908      	bls.n	80011b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2220      	movs	r2, #32
 80011a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e078      	b.n	80012a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e8      	bne.n	8001192 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <HAL_DMA_Init+0x158>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4313      	orrs	r3, r2
 8001202:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	2b04      	cmp	r3, #4
 800120a:	d107      	bne.n	800121c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4313      	orrs	r3, r2
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4313      	orrs	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f023 0307 	bic.w	r3, r3, #7
 8001232:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4313      	orrs	r3, r2
 800123c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2b04      	cmp	r3, #4
 8001244:	d117      	bne.n	8001276 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4313      	orrs	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 fb09 	bl	8001870 <DMA_CheckFifoParam>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001272:	2301      	movs	r3, #1
 8001274:	e016      	b.n	80012a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 fac0 	bl	8001804 <DMA_CalcBaseAndBitshift>
 8001284:	4603      	mov	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	223f      	movs	r2, #63	; 0x3f
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	f010803f 	.word	0xf010803f

080012b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_DMA_Start_IT+0x26>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e048      	b.n	8001368 <HAL_DMA_Start_IT+0xb8>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d137      	bne.n	800135a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2202      	movs	r2, #2
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fa52 	bl	80017a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001308:	223f      	movs	r2, #63	; 0x3f
 800130a:	409a      	lsls	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0216 	orr.w	r2, r2, #22
 800131e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800132e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0208 	orr.w	r2, r2, #8
 8001346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0201 	orr.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e005      	b.n	8001366 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001362:	2302      	movs	r3, #2
 8001364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001366:	7dfb      	ldrb	r3, [r7, #23]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800137e:	f7ff fda9 	bl	8000ed4 <HAL_GetTick>
 8001382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d008      	beq.n	80013a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e052      	b.n	8001448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0216 	bic.w	r2, r2, #22
 80013b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d103      	bne.n	80013d2 <HAL_DMA_Abort+0x62>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0208 	bic.w	r2, r2, #8
 80013e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f2:	e013      	b.n	800141c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f4:	f7ff fd6e 	bl	8000ed4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d90c      	bls.n	800141c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e015      	b.n	8001448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1e4      	bne.n	80013f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142e:	223f      	movs	r2, #63	; 0x3f
 8001430:	409a      	lsls	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d004      	beq.n	800146e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00c      	b.n	8001488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2205      	movs	r2, #5
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014a0:	4b92      	ldr	r3, [pc, #584]	; (80016ec <HAL_DMA_IRQHandler+0x258>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a92      	ldr	r2, [pc, #584]	; (80016f0 <HAL_DMA_IRQHandler+0x25c>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0a9b      	lsrs	r3, r3, #10
 80014ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	2208      	movs	r2, #8
 80014c0:	409a      	lsls	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d01a      	beq.n	8001500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0204 	bic.w	r2, r2, #4
 80014e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	2208      	movs	r2, #8
 80014ee:	409a      	lsls	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2201      	movs	r2, #1
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d012      	beq.n	8001536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001522:	2201      	movs	r2, #1
 8001524:	409a      	lsls	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	f043 0202 	orr.w	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153a:	2204      	movs	r2, #4
 800153c:	409a      	lsls	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d012      	beq.n	800156c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00b      	beq.n	800156c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	2204      	movs	r2, #4
 800155a:	409a      	lsls	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	f043 0204 	orr.w	r2, r3, #4
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	2210      	movs	r2, #16
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d043      	beq.n	8001604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d03c      	beq.n	8001604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2210      	movs	r2, #16
 8001590:	409a      	lsls	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d018      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d108      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d024      	beq.n	8001604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
 80015c2:	e01f      	b.n	8001604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01b      	beq.n	8001604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e016      	b.n	8001604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d107      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0208 	bic.w	r2, r2, #8
 80015f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001608:	2220      	movs	r2, #32
 800160a:	409a      	lsls	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 808e 	beq.w	8001732 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8086 	beq.w	8001732 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	2220      	movs	r2, #32
 800162c:	409a      	lsls	r2, r3
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b05      	cmp	r3, #5
 800163c:	d136      	bne.n	80016ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0216 	bic.w	r2, r2, #22
 800164c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695a      	ldr	r2, [r3, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800165c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d103      	bne.n	800166e <HAL_DMA_IRQHandler+0x1da>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0208 	bic.w	r2, r2, #8
 800167c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001682:	223f      	movs	r2, #63	; 0x3f
 8001684:	409a      	lsls	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d07d      	beq.n	800179e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	4798      	blx	r3
        }
        return;
 80016aa:	e078      	b.n	800179e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01c      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d108      	bne.n	80016da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d030      	beq.n	8001732 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	4798      	blx	r3
 80016d8:	e02b      	b.n	8001732 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d027      	beq.n	8001732 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
 80016ea:	e022      	b.n	8001732 <HAL_DMA_IRQHandler+0x29e>
 80016ec:	20000000 	.word	0x20000000
 80016f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10f      	bne.n	8001722 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0210 	bic.w	r2, r2, #16
 8001710:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	2b00      	cmp	r3, #0
 8001738:	d032      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d022      	beq.n	800178c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2205      	movs	r2, #5
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3301      	adds	r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	429a      	cmp	r2, r3
 8001768:	d307      	bcc.n	800177a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f2      	bne.n	800175e <HAL_DMA_IRQHandler+0x2ca>
 8001778:	e000      	b.n	800177c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800177a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
 800179c:	e000      	b.n	80017a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800179e:	bf00      	nop
    }
  }
}
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop

080017a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b40      	cmp	r3, #64	; 0x40
 80017d4:	d108      	bne.n	80017e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017e6:	e007      	b.n	80017f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	3b10      	subs	r3, #16
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <DMA_CalcBaseAndBitshift+0x64>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <DMA_CalcBaseAndBitshift+0x68>)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d909      	bls.n	8001846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800183a:	f023 0303 	bic.w	r3, r3, #3
 800183e:	1d1a      	adds	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	659a      	str	r2, [r3, #88]	; 0x58
 8001844:	e007      	b.n	8001856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800184e:	f023 0303 	bic.w	r3, r3, #3
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	aaaaaaab 	.word	0xaaaaaaab
 800186c:	08004378 	.word	0x08004378

08001870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11f      	bne.n	80018ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d855      	bhi.n	800193c <DMA_CheckFifoParam+0xcc>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <DMA_CheckFifoParam+0x28>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018a9 	.word	0x080018a9
 800189c:	080018bb 	.word	0x080018bb
 80018a0:	080018a9 	.word	0x080018a9
 80018a4:	0800193d 	.word	0x0800193d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d045      	beq.n	8001940 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018b8:	e042      	b.n	8001940 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018c2:	d13f      	bne.n	8001944 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018c8:	e03c      	b.n	8001944 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018d2:	d121      	bne.n	8001918 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d836      	bhi.n	8001948 <DMA_CheckFifoParam+0xd8>
 80018da:	a201      	add	r2, pc, #4	; (adr r2, 80018e0 <DMA_CheckFifoParam+0x70>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	080018f7 	.word	0x080018f7
 80018e8:	080018f1 	.word	0x080018f1
 80018ec:	08001909 	.word	0x08001909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
      break;
 80018f4:	e02f      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d024      	beq.n	800194c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001906:	e021      	b.n	800194c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001910:	d11e      	bne.n	8001950 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001916:	e01b      	b.n	8001950 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d902      	bls.n	8001924 <DMA_CheckFifoParam+0xb4>
 800191e:	2b03      	cmp	r3, #3
 8001920:	d003      	beq.n	800192a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001922:	e018      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      break;
 8001928:	e015      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00e      	beq.n	8001954 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
      break;
 800193a:	e00b      	b.n	8001954 <DMA_CheckFifoParam+0xe4>
      break;
 800193c:	bf00      	nop
 800193e:	e00a      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      break;
 8001940:	bf00      	nop
 8001942:	e008      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      break;
 8001944:	bf00      	nop
 8001946:	e006      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      break;
 8001948:	bf00      	nop
 800194a:	e004      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      break;
 800194c:	bf00      	nop
 800194e:	e002      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      break;   
 8001950:	bf00      	nop
 8001952:	e000      	b.n	8001956 <DMA_CheckFifoParam+0xe6>
      break;
 8001954:	bf00      	nop
    }
  } 
  
  return status; 
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e159      	b.n	8001c34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8148 	bne.w	8001c2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x4a>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b12      	cmp	r3, #18
 80019ac:	d123      	bne.n	80019f6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	08da      	lsrs	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3208      	adds	r2, #8
 80019b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	220f      	movs	r2, #15
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	69b9      	ldr	r1, [r7, #24]
 80019f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0203 	and.w	r2, r3, #3
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d00b      	beq.n	8001a4a <HAL_GPIO_Init+0xe6>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3e:	2b11      	cmp	r3, #17
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a2 	beq.w	8001c2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b56      	ldr	r3, [pc, #344]	; (8001c48 <HAL_GPIO_Init+0x2e4>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x2e4>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <HAL_GPIO_Init+0x2e4>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a48      	ldr	r2, [pc, #288]	; (8001c50 <HAL_GPIO_Init+0x2ec>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x202>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x1fe>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x1fa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <HAL_GPIO_Init+0x2f8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x1f6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a44      	ldr	r2, [pc, #272]	; (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x1f2>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e008      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e006      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e004      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e002      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b66:	2300      	movs	r3, #0
 8001b68:	69fa      	ldr	r2, [r7, #28]
 8001b6a:	f002 0203 	and.w	r2, r2, #3
 8001b6e:	0092      	lsls	r2, r2, #2
 8001b70:	4093      	lsls	r3, r2
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b78:	4934      	ldr	r1, [pc, #208]	; (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b86:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4013      	ands	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001baa:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd4:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b0f      	cmp	r3, #15
 8001c38:	f67f aea2 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3724      	adds	r7, #36	; 0x24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e22d      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d075      	beq.n	8001da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cba:	4ba3      	ldr	r3, [pc, #652]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d00c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc6:	4ba0      	ldr	r3, [pc, #640]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d112      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cd2:	4b9d      	ldr	r3, [pc, #628]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cde:	d10b      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d05b      	beq.n	8001da4 <HAL_RCC_OscConfig+0x108>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d157      	bne.n	8001da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e208      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x74>
 8001d02:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a90      	ldr	r2, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e01d      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d18:	d10c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x98>
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a8a      	ldr	r2, [pc, #552]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0xb0>
 8001d34:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a83      	ldr	r2, [pc, #524]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b81      	ldr	r3, [pc, #516]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a80      	ldr	r2, [pc, #512]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f8be 	bl	8000ed4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff f8ba 	bl	8000ed4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e1cd      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0xc0>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f8aa 	bl	8000ed4 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f8a6 	bl	8000ed4 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1b9      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0xe8>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	4b65      	ldr	r3, [pc, #404]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbe:	4b62      	ldr	r3, [pc, #392]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d11c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e18d      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4952      	ldr	r1, [pc, #328]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	e03a      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d020      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	; (8001f4c <HAL_RCC_OscConfig+0x2b0>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f85f 	bl	8000ed4 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f85b 	bl	8000ed4 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e16e      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4940      	ldr	r1, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	600b      	str	r3, [r1, #0]
 8001e4c:	e015      	b.n	8001e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCC_OscConfig+0x2b0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff f83e 	bl	8000ed4 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f83a 	bl	8000ed4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e14d      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d030      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d016      	beq.n	8001ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_RCC_OscConfig+0x2b4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff f81e 	bl	8000ed4 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f81a 	bl	8000ed4 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e12d      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x200>
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_OscConfig+0x2b4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff f807 	bl	8000ed4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eca:	f7ff f803 	bl	8000ed4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e116      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80a0 	beq.w	8002036 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f22:	2301      	movs	r3, #1
 8001f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x2b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d121      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_OscConfig+0x2b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a07      	ldr	r2, [pc, #28]	; (8001f54 <HAL_RCC_OscConfig+0x2b8>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe ffc9 	bl	8000ed4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	e011      	b.n	8001f6a <HAL_RCC_OscConfig+0x2ce>
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
 8001f54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f58:	f7fe ffbc 	bl	8000ed4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0cf      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x478>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2f0>
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8a:	e01c      	b.n	8001fc6 <HAL_RCC_OscConfig+0x32a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x312>
 8001f94:	4b60      	ldr	r3, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a5f      	ldr	r2, [pc, #380]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a5c      	ldr	r2, [pc, #368]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x32a>
 8001fae:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a59      	ldr	r2, [pc, #356]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d015      	beq.n	8001ffa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7fe ff81 	bl	8000ed4 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7fe ff7d 	bl	8000ed4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e08e      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ee      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x33a>
 8001ff8:	e014      	b.n	8002024 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe ff6b 	bl	8000ed4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe ff67 	bl	8000ed4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e078      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8002030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d064      	beq.n	8002108 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d05c      	beq.n	8002104 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d141      	bne.n	80020d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_RCC_OscConfig+0x480>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7fe ff3c 	bl	8000ed4 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe ff38 	bl	8000ed4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e04b      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	061b      	lsls	r3, r3, #24
 80020a2:	491d      	ldr	r1, [pc, #116]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_RCC_OscConfig+0x480>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe ff11 	bl	8000ed4 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe ff0d 	bl	8000ed4 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e020      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x41a>
 80020d4:	e018      	b.n	8002108 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_RCC_OscConfig+0x480>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe fefa 	bl	8000ed4 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe fef6 	bl	8000ed4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e009      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCC_OscConfig+0x47c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x448>
 8002102:	e001      	b.n	8002108 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000
 8002118:	40023800 	.word	0x40023800
 800211c:	42470060 	.word	0x42470060

08002120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0ca      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d90c      	bls.n	800215c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <HAL_RCC_ClockConfig+0x1b4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b6      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002174:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800217e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a51      	ldr	r2, [pc, #324]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	494c      	ldr	r1, [pc, #304]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d044      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d119      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07d      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d003      	beq.n	80021de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e06d      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e065      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4933      	ldr	r1, [pc, #204]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7fe fe60 	bl	8000ed4 <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7fe fe5c 	bl	8000ed4 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e04d      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d20c      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e030      	b.n	80022ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4915      	ldr	r1, [pc, #84]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490d      	ldr	r1, [pc, #52]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022a6:	f000 f81d 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 80022aa:	4601      	mov	r1, r0
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x1b8>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	fa21 f303 	lsr.w	r3, r1, r3
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7fe fdc2 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00
 80022d8:	40023800 	.word	0x40023800
 80022dc:	08004360 	.word	0x08004360
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fa:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b04      	cmp	r3, #4
 8002304:	d007      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x32>
 8002306:	2b08      	cmp	r3, #8
 8002308:	d008      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x38>
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80b4 	bne.w	8002478 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002312:	60bb      	str	r3, [r7, #8]
       break;
 8002314:	e0b3      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002316:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002318:	60bb      	str	r3, [r7, #8]
      break;
 800231a:	e0b0      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800231c:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002324:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002326:	4b58      	ldr	r3, [pc, #352]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d04a      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b55      	ldr	r3, [pc, #340]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	f04f 0400 	mov.w	r4, #0
 800233c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	ea03 0501 	and.w	r5, r3, r1
 8002348:	ea04 0602 	and.w	r6, r4, r2
 800234c:	4629      	mov	r1, r5
 800234e:	4632      	mov	r2, r6
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	f04f 0400 	mov.w	r4, #0
 8002358:	0154      	lsls	r4, r2, #5
 800235a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800235e:	014b      	lsls	r3, r1, #5
 8002360:	4619      	mov	r1, r3
 8002362:	4622      	mov	r2, r4
 8002364:	1b49      	subs	r1, r1, r5
 8002366:	eb62 0206 	sbc.w	r2, r2, r6
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	0194      	lsls	r4, r2, #6
 8002374:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002378:	018b      	lsls	r3, r1, #6
 800237a:	1a5b      	subs	r3, r3, r1
 800237c:	eb64 0402 	sbc.w	r4, r4, r2
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	00e2      	lsls	r2, r4, #3
 800238a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800238e:	00d9      	lsls	r1, r3, #3
 8002390:	460b      	mov	r3, r1
 8002392:	4614      	mov	r4, r2
 8002394:	195b      	adds	r3, r3, r5
 8002396:	eb44 0406 	adc.w	r4, r4, r6
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	0262      	lsls	r2, r4, #9
 80023a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023a8:	0259      	lsls	r1, r3, #9
 80023aa:	460b      	mov	r3, r1
 80023ac:	4614      	mov	r4, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	4621      	mov	r1, r4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	f7fd ff60 	bl	8000280 <__aeabi_uldivmod>
 80023c0:	4603      	mov	r3, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	e049      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	ea03 0501 	and.w	r5, r3, r1
 80023de:	ea04 0602 	and.w	r6, r4, r2
 80023e2:	4629      	mov	r1, r5
 80023e4:	4632      	mov	r2, r6
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	f04f 0400 	mov.w	r4, #0
 80023ee:	0154      	lsls	r4, r2, #5
 80023f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023f4:	014b      	lsls	r3, r1, #5
 80023f6:	4619      	mov	r1, r3
 80023f8:	4622      	mov	r2, r4
 80023fa:	1b49      	subs	r1, r1, r5
 80023fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	f04f 0400 	mov.w	r4, #0
 8002408:	0194      	lsls	r4, r2, #6
 800240a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800240e:	018b      	lsls	r3, r1, #6
 8002410:	1a5b      	subs	r3, r3, r1
 8002412:	eb64 0402 	sbc.w	r4, r4, r2
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	00e2      	lsls	r2, r4, #3
 8002420:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002424:	00d9      	lsls	r1, r3, #3
 8002426:	460b      	mov	r3, r1
 8002428:	4614      	mov	r4, r2
 800242a:	195b      	adds	r3, r3, r5
 800242c:	eb44 0406 	adc.w	r4, r4, r6
 8002430:	f04f 0100 	mov.w	r1, #0
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	02a2      	lsls	r2, r4, #10
 800243a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800243e:	0299      	lsls	r1, r3, #10
 8002440:	460b      	mov	r3, r1
 8002442:	4614      	mov	r4, r2
 8002444:	4618      	mov	r0, r3
 8002446:	4621      	mov	r1, r4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f04f 0400 	mov.w	r4, #0
 800244e:	461a      	mov	r2, r3
 8002450:	4623      	mov	r3, r4
 8002452:	f7fd ff15 	bl	8000280 <__aeabi_uldivmod>
 8002456:	4603      	mov	r3, r0
 8002458:	460c      	mov	r4, r1
 800245a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	60bb      	str	r3, [r7, #8]
      break;
 8002476:	e002      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800247a:	60bb      	str	r3, [r7, #8]
      break;
 800247c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247e:	68bb      	ldr	r3, [r7, #8]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4601      	mov	r1, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5cd3      	ldrb	r3, [r2, r3]
 80024c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08004370 	.word	0x08004370

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4601      	mov	r1, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08004370 	.word	0x08004370

080024fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e03f      	b.n	800258e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fab2 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800253e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fcc5 	bl	8002ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b088      	sub	sp, #32
 800259a:	af02      	add	r7, sp, #8
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 8083 	bne.w	80026be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_UART_Transmit+0x2e>
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e07b      	b.n	80026c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_UART_Transmit+0x40>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e074      	b.n	80026c0 <HAL_UART_Transmit+0x12a>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2221      	movs	r2, #33	; 0x21
 80025e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fc72 	bl	8000ed4 <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025fe:	e042      	b.n	8002686 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002616:	d122      	bne.n	800265e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fad2 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e046      	b.n	80026c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002644:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d103      	bne.n	8002656 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3302      	adds	r3, #2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	e017      	b.n	8002686 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	e013      	b.n	8002686 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 faaf 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e023      	b.n	80026c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1b7      	bne.n	8002600 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2200      	movs	r2, #0
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa96 	bl	8002bcc <UART_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e00a      	b.n	80026c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e000      	b.n	80026c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
  }
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d166      	bne.n	80027b0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_UART_Receive_DMA+0x26>
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e05f      	b.n	80027b2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_UART_Receive_DMA+0x38>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e058      	b.n	80027b2 <HAL_UART_Receive_DMA+0xea>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2222      	movs	r2, #34	; 0x22
 800271e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_UART_Receive_DMA+0xf4>)
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	4a24      	ldr	r2, [pc, #144]	; (80027c0 <HAL_UART_Receive_DMA+0xf8>)
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	4a23      	ldr	r2, [pc, #140]	; (80027c4 <HAL_UART_Receive_DMA+0xfc>)
 8002738:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	2200      	movs	r2, #0
 8002740:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3304      	adds	r3, #4
 8002752:	4619      	mov	r1, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	f7fe fda9 	bl	80012b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027aa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	08002ab5 	.word	0x08002ab5
 80027c0:	08002b1d 	.word	0x08002b1d
 80027c4:	08002b39 	.word	0x08002b39

080027c8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b80      	cmp	r3, #128	; 0x80
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b21      	cmp	r3, #33	; 0x21
 80027f4:	d116      	bne.n	8002824 <HAL_UART_DMAStop+0x5c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800280a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fda9 	bl	8001370 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fa1e 	bl	8002c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b22      	cmp	r3, #34	; 0x22
 8002844:	d116      	bne.n	8002874 <HAL_UART_DMAStop+0xac>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800285a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fd81 	bl	8001370 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fa0c 	bl	8002c8c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_UART_IRQHandler+0x52>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa7e 	bl	8002dcc <UART_Receive_IT>
      return;
 80028d0:	e0cc      	b.n	8002a6c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80ab 	beq.w	8002a30 <HAL_UART_IRQHandler+0x1b0>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_UART_IRQHandler+0x70>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a0 	beq.w	8002a30 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_UART_IRQHandler+0x90>
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_UART_IRQHandler+0xb0>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_UART_IRQHandler+0xd0>
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_UART_IRQHandler+0xf0>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	f043 0208 	orr.w	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d078      	beq.n	8002a6a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_UART_IRQHandler+0x112>
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fa1d 	bl	8002dcc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_UART_IRQHandler+0x13a>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d031      	beq.n	8002a1e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f966 	bl	8002c8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d123      	bne.n	8002a16 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_UART_IRQHandler+0x1f4>)
 80029ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fd2c 	bl	8001450 <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00e      	b.n	8002a2c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f846 	bl	8002aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e00a      	b.n	8002a2c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f842 	bl	8002aa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e006      	b.n	8002a2c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f83e 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a2a:	e01e      	b.n	8002a6a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	bf00      	nop
    return;
 8002a2e:	e01c      	b.n	8002a6a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_UART_IRQHandler+0x1cc>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f953 	bl	8002cf0 <UART_Transmit_IT>
    return;
 8002a4a:	e00f      	b.n	8002a6c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_UART_IRQHandler+0x1ec>
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f99b 	bl	8002d9c <UART_EndTransmit_IT>
    return;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <HAL_UART_IRQHandler+0x1ec>
    return;
 8002a6a:	bf00      	nop
  }
}
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	08002cc9 	.word	0x08002cc9

08002a78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11e      	bne.n	8002b0e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b04:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7fd fe90 	bl	8000834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7ff ffae 	bl	8002a8c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b54:	2b80      	cmp	r3, #128	; 0x80
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b21      	cmp	r3, #33	; 0x21
 8002b6a:	d108      	bne.n	8002b7e <UART_DMAError+0x46>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2200      	movs	r2, #0
 8002b76:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b78:	68b8      	ldr	r0, [r7, #8]
 8002b7a:	f000 f871 	bl	8002c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b22      	cmp	r3, #34	; 0x22
 8002b9e:	d108      	bne.n	8002bb2 <UART_DMAError+0x7a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002bac:	68b8      	ldr	r0, [r7, #8]
 8002bae:	f000 f86d 	bl	8002c8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	f043 0210 	orr.w	r2, r3, #16
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bbe:	68b8      	ldr	r0, [r7, #8]
 8002bc0:	f7ff ff6e 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bdc:	e02c      	b.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d028      	beq.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bec:	f7fe f972 	bl	8000ed4 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d21d      	bcs.n	8002c38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e00f      	b.n	8002c58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	4013      	ands	r3, r2
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d0c3      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c76:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ca2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fedc 	bl	8002aa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b21      	cmp	r3, #33	; 0x21
 8002d02:	d144      	bne.n	8002d8e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0c:	d11a      	bne.n	8002d44 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d22:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	1c9a      	adds	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	621a      	str	r2, [r3, #32]
 8002d36:	e00e      	b.n	8002d56 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	621a      	str	r2, [r3, #32]
 8002d42:	e008      	b.n	8002d56 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	1c59      	adds	r1, r3, #1
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6211      	str	r1, [r2, #32]
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4619      	mov	r1, r3
 8002d64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff fe5b 	bl	8002a78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b22      	cmp	r3, #34	; 0x22
 8002dde:	d171      	bne.n	8002ec4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d123      	bne.n	8002e32 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10e      	bne.n	8002e16 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
 8002e14:	e029      	b.n	8002e6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e30:	e01b      	b.n	8002e6a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6858      	ldr	r0, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6291      	str	r1, [r2, #40]	; 0x28
 8002e4a:	b2c2      	uxtb	r2, r0
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e00c      	b.n	8002e6a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	1c58      	adds	r0, r3, #1
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	6288      	str	r0, [r1, #40]	; 0x28
 8002e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4619      	mov	r1, r3
 8002e78:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d120      	bne.n	8002ec0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0220 	bic.w	r2, r2, #32
 8002e8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0201 	bic.w	r2, r2, #1
 8002eac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7fd fcbc 	bl	8000834 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e002      	b.n	8002ec6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f10:	f023 030c 	bic.w	r3, r3, #12
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3c:	f040 80e4 	bne.w	8003108 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4aab      	ldr	r2, [pc, #684]	; (80031f4 <UART_SetConfig+0x324>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <UART_SetConfig+0x84>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4aaa      	ldr	r2, [pc, #680]	; (80031f8 <UART_SetConfig+0x328>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d16c      	bne.n	800302e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002f54:	f7ff fabe 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	4aa3      	ldr	r2, [pc, #652]	; (80031fc <UART_SetConfig+0x32c>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	011c      	lsls	r4, r3, #4
 8002f78:	f7ff faac 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	441a      	add	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f92:	f7ff fa9f 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009a      	lsls	r2, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	4a93      	ldr	r2, [pc, #588]	; (80031fc <UART_SetConfig+0x32c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2264      	movs	r2, #100	; 0x64
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	1aeb      	subs	r3, r5, r3
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	3332      	adds	r3, #50	; 0x32
 8002fc0:	4a8e      	ldr	r2, [pc, #568]	; (80031fc <UART_SetConfig+0x32c>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fce:	441c      	add	r4, r3
 8002fd0:	f7ff fa80 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	009a      	lsls	r2, r3, #2
 8002fde:	441a      	add	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002fea:	f7ff fa73 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009a      	lsls	r2, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	4a7d      	ldr	r2, [pc, #500]	; (80031fc <UART_SetConfig+0x32c>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2264      	movs	r2, #100	; 0x64
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	1aeb      	subs	r3, r5, r3
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	3332      	adds	r3, #50	; 0x32
 8003018:	4a78      	ldr	r2, [pc, #480]	; (80031fc <UART_SetConfig+0x32c>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 0207 	and.w	r2, r3, #7
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4422      	add	r2, r4
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	e154      	b.n	80032d8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800302e:	f7ff fa3d 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003032:	4602      	mov	r2, r0
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	4a6c      	ldr	r2, [pc, #432]	; (80031fc <UART_SetConfig+0x32c>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	011c      	lsls	r4, r3, #4
 8003052:	f7ff fa2b 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003056:	4602      	mov	r2, r0
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	009a      	lsls	r2, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fbb2 f5f3 	udiv	r5, r2, r3
 800306c:	f7ff fa1e 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003070:	4602      	mov	r2, r0
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	009a      	lsls	r2, r3, #2
 800307a:	441a      	add	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	4a5d      	ldr	r2, [pc, #372]	; (80031fc <UART_SetConfig+0x32c>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2264      	movs	r2, #100	; 0x64
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	1aeb      	subs	r3, r5, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3332      	adds	r3, #50	; 0x32
 800309a:	4a58      	ldr	r2, [pc, #352]	; (80031fc <UART_SetConfig+0x32c>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030a8:	441c      	add	r4, r3
 80030aa:	f7ff f9ff 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80030c4:	f7ff f9f2 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009a      	lsls	r2, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	4a47      	ldr	r2, [pc, #284]	; (80031fc <UART_SetConfig+0x32c>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2264      	movs	r2, #100	; 0x64
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	1aeb      	subs	r3, r5, r3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a42      	ldr	r2, [pc, #264]	; (80031fc <UART_SetConfig+0x32c>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4422      	add	r2, r4
 8003104:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003106:	e0e7      	b.n	80032d8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a39      	ldr	r2, [pc, #228]	; (80031f4 <UART_SetConfig+0x324>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <UART_SetConfig+0x24c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a38      	ldr	r2, [pc, #224]	; (80031f8 <UART_SetConfig+0x328>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d171      	bne.n	8003200 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800311c:	f7ff f9da 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8003120:	4602      	mov	r2, r0
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	4a31      	ldr	r2, [pc, #196]	; (80031fc <UART_SetConfig+0x32c>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	011c      	lsls	r4, r3, #4
 8003140:	f7ff f9c8 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 8003144:	4602      	mov	r2, r0
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009a      	lsls	r2, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	fbb2 f5f3 	udiv	r5, r2, r3
 800315a:	f7ff f9bb 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 800315e:	4602      	mov	r2, r0
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <UART_SetConfig+0x32c>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2264      	movs	r2, #100	; 0x64
 800317e:	fb02 f303 	mul.w	r3, r2, r3
 8003182:	1aeb      	subs	r3, r5, r3
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	3332      	adds	r3, #50	; 0x32
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <UART_SetConfig+0x32c>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003194:	441c      	add	r4, r3
 8003196:	f7ff f99d 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 800319a:	4602      	mov	r2, r0
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80031b0:	f7ff f990 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009a      	lsls	r2, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4a0c      	ldr	r2, [pc, #48]	; (80031fc <UART_SetConfig+0x32c>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	2264      	movs	r2, #100	; 0x64
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	1aeb      	subs	r3, r5, r3
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	3332      	adds	r3, #50	; 0x32
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <UART_SetConfig+0x32c>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4422      	add	r2, r4
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	e071      	b.n	80032d8 <UART_SetConfig+0x408>
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40011400 	.word	0x40011400
 80031fc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003200:	f7ff f954 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003204:	4602      	mov	r2, r0
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009a      	lsls	r2, r3, #2
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <UART_SetConfig+0x410>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	011c      	lsls	r4, r3, #4
 8003224:	f7ff f942 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003228:	4602      	mov	r2, r0
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009a      	lsls	r2, r3, #2
 8003232:	441a      	add	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	fbb2 f5f3 	udiv	r5, r2, r3
 800323e:	f7ff f935 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003242:	4602      	mov	r2, r0
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <UART_SetConfig+0x410>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2264      	movs	r2, #100	; 0x64
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	1aeb      	subs	r3, r5, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a1c      	ldr	r2, [pc, #112]	; (80032e0 <UART_SetConfig+0x410>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003278:	441c      	add	r4, r3
 800327a:	f7ff f917 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 800327e:	4602      	mov	r2, r0
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f5f3 	udiv	r5, r2, r3
 8003294:	f7ff f90a 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8003298:	4602      	mov	r2, r0
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	441a      	add	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <UART_SetConfig+0x410>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2264      	movs	r2, #100	; 0x64
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	1aeb      	subs	r3, r5, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <UART_SetConfig+0x410>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4422      	add	r2, r4
 80032d4:	609a      	str	r2, [r3, #8]
}
 80032d6:	e7ff      	b.n	80032d8 <UART_SetConfig+0x408>
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}
 80032e0:	51eb851f 	.word	0x51eb851f

080032e4 <__errno>:
 80032e4:	4b01      	ldr	r3, [pc, #4]	; (80032ec <__errno+0x8>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	4e0d      	ldr	r6, [pc, #52]	; (8003328 <__libc_init_array+0x38>)
 80032f4:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f6:	1ba4      	subs	r4, r4, r6
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	2500      	movs	r5, #0
 80032fc:	42a5      	cmp	r5, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	4e0b      	ldr	r6, [pc, #44]	; (8003330 <__libc_init_array+0x40>)
 8003302:	4c0c      	ldr	r4, [pc, #48]	; (8003334 <__libc_init_array+0x44>)
 8003304:	f000 ffcc 	bl	80042a0 <_init>
 8003308:	1ba4      	subs	r4, r4, r6
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	2500      	movs	r5, #0
 800330e:	42a5      	cmp	r5, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003318:	4798      	blx	r3
 800331a:	3501      	adds	r5, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003322:	4798      	blx	r3
 8003324:	3501      	adds	r5, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	08004420 	.word	0x08004420
 800332c:	08004420 	.word	0x08004420
 8003330:	08004420 	.word	0x08004420
 8003334:	08004424 	.word	0x08004424

08003338 <memset>:
 8003338:	4402      	add	r2, r0
 800333a:	4603      	mov	r3, r0
 800333c:	4293      	cmp	r3, r2
 800333e:	d100      	bne.n	8003342 <memset+0xa>
 8003340:	4770      	bx	lr
 8003342:	f803 1b01 	strb.w	r1, [r3], #1
 8003346:	e7f9      	b.n	800333c <memset+0x4>

08003348 <iprintf>:
 8003348:	b40f      	push	{r0, r1, r2, r3}
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <iprintf+0x2c>)
 800334c:	b513      	push	{r0, r1, r4, lr}
 800334e:	681c      	ldr	r4, [r3, #0]
 8003350:	b124      	cbz	r4, 800335c <iprintf+0x14>
 8003352:	69a3      	ldr	r3, [r4, #24]
 8003354:	b913      	cbnz	r3, 800335c <iprintf+0x14>
 8003356:	4620      	mov	r0, r4
 8003358:	f000 fa50 	bl	80037fc <__sinit>
 800335c:	ab05      	add	r3, sp, #20
 800335e:	9a04      	ldr	r2, [sp, #16]
 8003360:	68a1      	ldr	r1, [r4, #8]
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	4620      	mov	r0, r4
 8003366:	f000 fc09 	bl	8003b7c <_vfiprintf_r>
 800336a:	b002      	add	sp, #8
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003370:	b004      	add	sp, #16
 8003372:	4770      	bx	lr
 8003374:	2000000c 	.word	0x2000000c

08003378 <putchar>:
 8003378:	b538      	push	{r3, r4, r5, lr}
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <putchar+0x24>)
 800337c:	681c      	ldr	r4, [r3, #0]
 800337e:	4605      	mov	r5, r0
 8003380:	b124      	cbz	r4, 800338c <putchar+0x14>
 8003382:	69a3      	ldr	r3, [r4, #24]
 8003384:	b913      	cbnz	r3, 800338c <putchar+0x14>
 8003386:	4620      	mov	r0, r4
 8003388:	f000 fa38 	bl	80037fc <__sinit>
 800338c:	68a2      	ldr	r2, [r4, #8]
 800338e:	4629      	mov	r1, r5
 8003390:	4620      	mov	r0, r4
 8003392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003396:	f000 be8f 	b.w	80040b8 <_putc_r>
 800339a:	bf00      	nop
 800339c:	2000000c 	.word	0x2000000c

080033a0 <_puts_r>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	460e      	mov	r6, r1
 80033a4:	4605      	mov	r5, r0
 80033a6:	b118      	cbz	r0, 80033b0 <_puts_r+0x10>
 80033a8:	6983      	ldr	r3, [r0, #24]
 80033aa:	b90b      	cbnz	r3, 80033b0 <_puts_r+0x10>
 80033ac:	f000 fa26 	bl	80037fc <__sinit>
 80033b0:	69ab      	ldr	r3, [r5, #24]
 80033b2:	68ac      	ldr	r4, [r5, #8]
 80033b4:	b913      	cbnz	r3, 80033bc <_puts_r+0x1c>
 80033b6:	4628      	mov	r0, r5
 80033b8:	f000 fa20 	bl	80037fc <__sinit>
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <_puts_r+0xac>)
 80033be:	429c      	cmp	r4, r3
 80033c0:	d117      	bne.n	80033f2 <_puts_r+0x52>
 80033c2:	686c      	ldr	r4, [r5, #4]
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	071b      	lsls	r3, r3, #28
 80033c8:	d51d      	bpl.n	8003406 <_puts_r+0x66>
 80033ca:	6923      	ldr	r3, [r4, #16]
 80033cc:	b1db      	cbz	r3, 8003406 <_puts_r+0x66>
 80033ce:	3e01      	subs	r6, #1
 80033d0:	68a3      	ldr	r3, [r4, #8]
 80033d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60a3      	str	r3, [r4, #8]
 80033da:	b9e9      	cbnz	r1, 8003418 <_puts_r+0x78>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da2e      	bge.n	800343e <_puts_r+0x9e>
 80033e0:	4622      	mov	r2, r4
 80033e2:	210a      	movs	r1, #10
 80033e4:	4628      	mov	r0, r5
 80033e6:	f000 f859 	bl	800349c <__swbuf_r>
 80033ea:	3001      	adds	r0, #1
 80033ec:	d011      	beq.n	8003412 <_puts_r+0x72>
 80033ee:	200a      	movs	r0, #10
 80033f0:	e011      	b.n	8003416 <_puts_r+0x76>
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <_puts_r+0xb0>)
 80033f4:	429c      	cmp	r4, r3
 80033f6:	d101      	bne.n	80033fc <_puts_r+0x5c>
 80033f8:	68ac      	ldr	r4, [r5, #8]
 80033fa:	e7e3      	b.n	80033c4 <_puts_r+0x24>
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <_puts_r+0xb4>)
 80033fe:	429c      	cmp	r4, r3
 8003400:	bf08      	it	eq
 8003402:	68ec      	ldreq	r4, [r5, #12]
 8003404:	e7de      	b.n	80033c4 <_puts_r+0x24>
 8003406:	4621      	mov	r1, r4
 8003408:	4628      	mov	r0, r5
 800340a:	f000 f899 	bl	8003540 <__swsetup_r>
 800340e:	2800      	cmp	r0, #0
 8003410:	d0dd      	beq.n	80033ce <_puts_r+0x2e>
 8003412:	f04f 30ff 	mov.w	r0, #4294967295
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	2b00      	cmp	r3, #0
 800341a:	da04      	bge.n	8003426 <_puts_r+0x86>
 800341c:	69a2      	ldr	r2, [r4, #24]
 800341e:	429a      	cmp	r2, r3
 8003420:	dc06      	bgt.n	8003430 <_puts_r+0x90>
 8003422:	290a      	cmp	r1, #10
 8003424:	d004      	beq.n	8003430 <_puts_r+0x90>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	6022      	str	r2, [r4, #0]
 800342c:	7019      	strb	r1, [r3, #0]
 800342e:	e7cf      	b.n	80033d0 <_puts_r+0x30>
 8003430:	4622      	mov	r2, r4
 8003432:	4628      	mov	r0, r5
 8003434:	f000 f832 	bl	800349c <__swbuf_r>
 8003438:	3001      	adds	r0, #1
 800343a:	d1c9      	bne.n	80033d0 <_puts_r+0x30>
 800343c:	e7e9      	b.n	8003412 <_puts_r+0x72>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	200a      	movs	r0, #10
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	6022      	str	r2, [r4, #0]
 8003446:	7018      	strb	r0, [r3, #0]
 8003448:	e7e5      	b.n	8003416 <_puts_r+0x76>
 800344a:	bf00      	nop
 800344c:	080043a4 	.word	0x080043a4
 8003450:	080043c4 	.word	0x080043c4
 8003454:	08004384 	.word	0x08004384

08003458 <puts>:
 8003458:	4b02      	ldr	r3, [pc, #8]	; (8003464 <puts+0xc>)
 800345a:	4601      	mov	r1, r0
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	f7ff bf9f 	b.w	80033a0 <_puts_r>
 8003462:	bf00      	nop
 8003464:	2000000c 	.word	0x2000000c

08003468 <strstr>:
 8003468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346a:	7803      	ldrb	r3, [r0, #0]
 800346c:	b17b      	cbz	r3, 800348e <strstr+0x26>
 800346e:	4604      	mov	r4, r0
 8003470:	7823      	ldrb	r3, [r4, #0]
 8003472:	4620      	mov	r0, r4
 8003474:	1c66      	adds	r6, r4, #1
 8003476:	b17b      	cbz	r3, 8003498 <strstr+0x30>
 8003478:	1e4a      	subs	r2, r1, #1
 800347a:	1e63      	subs	r3, r4, #1
 800347c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003480:	b14d      	cbz	r5, 8003496 <strstr+0x2e>
 8003482:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003486:	42af      	cmp	r7, r5
 8003488:	4634      	mov	r4, r6
 800348a:	d0f7      	beq.n	800347c <strstr+0x14>
 800348c:	e7f0      	b.n	8003470 <strstr+0x8>
 800348e:	780b      	ldrb	r3, [r1, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf18      	it	ne
 8003494:	2000      	movne	r0, #0
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003498:	4618      	mov	r0, r3
 800349a:	e7fc      	b.n	8003496 <strstr+0x2e>

0800349c <__swbuf_r>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	460e      	mov	r6, r1
 80034a0:	4614      	mov	r4, r2
 80034a2:	4605      	mov	r5, r0
 80034a4:	b118      	cbz	r0, 80034ae <__swbuf_r+0x12>
 80034a6:	6983      	ldr	r3, [r0, #24]
 80034a8:	b90b      	cbnz	r3, 80034ae <__swbuf_r+0x12>
 80034aa:	f000 f9a7 	bl	80037fc <__sinit>
 80034ae:	4b21      	ldr	r3, [pc, #132]	; (8003534 <__swbuf_r+0x98>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	d12a      	bne.n	800350a <__swbuf_r+0x6e>
 80034b4:	686c      	ldr	r4, [r5, #4]
 80034b6:	69a3      	ldr	r3, [r4, #24]
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	071a      	lsls	r2, r3, #28
 80034be:	d52e      	bpl.n	800351e <__swbuf_r+0x82>
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	b363      	cbz	r3, 800351e <__swbuf_r+0x82>
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	1ac0      	subs	r0, r0, r3
 80034ca:	6963      	ldr	r3, [r4, #20]
 80034cc:	b2f6      	uxtb	r6, r6
 80034ce:	4283      	cmp	r3, r0
 80034d0:	4637      	mov	r7, r6
 80034d2:	dc04      	bgt.n	80034de <__swbuf_r+0x42>
 80034d4:	4621      	mov	r1, r4
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 f926 	bl	8003728 <_fflush_r>
 80034dc:	bb28      	cbnz	r0, 800352a <__swbuf_r+0x8e>
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	60a3      	str	r3, [r4, #8]
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	6022      	str	r2, [r4, #0]
 80034ea:	701e      	strb	r6, [r3, #0]
 80034ec:	6963      	ldr	r3, [r4, #20]
 80034ee:	3001      	adds	r0, #1
 80034f0:	4283      	cmp	r3, r0
 80034f2:	d004      	beq.n	80034fe <__swbuf_r+0x62>
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	07db      	lsls	r3, r3, #31
 80034f8:	d519      	bpl.n	800352e <__swbuf_r+0x92>
 80034fa:	2e0a      	cmp	r6, #10
 80034fc:	d117      	bne.n	800352e <__swbuf_r+0x92>
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 f911 	bl	8003728 <_fflush_r>
 8003506:	b190      	cbz	r0, 800352e <__swbuf_r+0x92>
 8003508:	e00f      	b.n	800352a <__swbuf_r+0x8e>
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <__swbuf_r+0x9c>)
 800350c:	429c      	cmp	r4, r3
 800350e:	d101      	bne.n	8003514 <__swbuf_r+0x78>
 8003510:	68ac      	ldr	r4, [r5, #8]
 8003512:	e7d0      	b.n	80034b6 <__swbuf_r+0x1a>
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <__swbuf_r+0xa0>)
 8003516:	429c      	cmp	r4, r3
 8003518:	bf08      	it	eq
 800351a:	68ec      	ldreq	r4, [r5, #12]
 800351c:	e7cb      	b.n	80034b6 <__swbuf_r+0x1a>
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f000 f80d 	bl	8003540 <__swsetup_r>
 8003526:	2800      	cmp	r0, #0
 8003528:	d0cc      	beq.n	80034c4 <__swbuf_r+0x28>
 800352a:	f04f 37ff 	mov.w	r7, #4294967295
 800352e:	4638      	mov	r0, r7
 8003530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003532:	bf00      	nop
 8003534:	080043a4 	.word	0x080043a4
 8003538:	080043c4 	.word	0x080043c4
 800353c:	08004384 	.word	0x08004384

08003540 <__swsetup_r>:
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <__swsetup_r+0xcc>)
 8003542:	b570      	push	{r4, r5, r6, lr}
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	4606      	mov	r6, r0
 8003548:	460c      	mov	r4, r1
 800354a:	b125      	cbz	r5, 8003556 <__swsetup_r+0x16>
 800354c:	69ab      	ldr	r3, [r5, #24]
 800354e:	b913      	cbnz	r3, 8003556 <__swsetup_r+0x16>
 8003550:	4628      	mov	r0, r5
 8003552:	f000 f953 	bl	80037fc <__sinit>
 8003556:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <__swsetup_r+0xd0>)
 8003558:	429c      	cmp	r4, r3
 800355a:	d10f      	bne.n	800357c <__swsetup_r+0x3c>
 800355c:	686c      	ldr	r4, [r5, #4]
 800355e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003562:	b29a      	uxth	r2, r3
 8003564:	0715      	lsls	r5, r2, #28
 8003566:	d42c      	bmi.n	80035c2 <__swsetup_r+0x82>
 8003568:	06d0      	lsls	r0, r2, #27
 800356a:	d411      	bmi.n	8003590 <__swsetup_r+0x50>
 800356c:	2209      	movs	r2, #9
 800356e:	6032      	str	r2, [r6, #0]
 8003570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	e03e      	b.n	80035fa <__swsetup_r+0xba>
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <__swsetup_r+0xd4>)
 800357e:	429c      	cmp	r4, r3
 8003580:	d101      	bne.n	8003586 <__swsetup_r+0x46>
 8003582:	68ac      	ldr	r4, [r5, #8]
 8003584:	e7eb      	b.n	800355e <__swsetup_r+0x1e>
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <__swsetup_r+0xd8>)
 8003588:	429c      	cmp	r4, r3
 800358a:	bf08      	it	eq
 800358c:	68ec      	ldreq	r4, [r5, #12]
 800358e:	e7e6      	b.n	800355e <__swsetup_r+0x1e>
 8003590:	0751      	lsls	r1, r2, #29
 8003592:	d512      	bpl.n	80035ba <__swsetup_r+0x7a>
 8003594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003596:	b141      	cbz	r1, 80035aa <__swsetup_r+0x6a>
 8003598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800359c:	4299      	cmp	r1, r3
 800359e:	d002      	beq.n	80035a6 <__swsetup_r+0x66>
 80035a0:	4630      	mov	r0, r6
 80035a2:	f000 fa19 	bl	80039d8 <_free_r>
 80035a6:	2300      	movs	r3, #0
 80035a8:	6363      	str	r3, [r4, #52]	; 0x34
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	2300      	movs	r3, #0
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f043 0308 	orr.w	r3, r3, #8
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	b94b      	cbnz	r3, 80035da <__swsetup_r+0x9a>
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d0:	d003      	beq.n	80035da <__swsetup_r+0x9a>
 80035d2:	4621      	mov	r1, r4
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 f9bf 	bl	8003958 <__smakebuf_r>
 80035da:	89a2      	ldrh	r2, [r4, #12]
 80035dc:	f012 0301 	ands.w	r3, r2, #1
 80035e0:	d00c      	beq.n	80035fc <__swsetup_r+0xbc>
 80035e2:	2300      	movs	r3, #0
 80035e4:	60a3      	str	r3, [r4, #8]
 80035e6:	6963      	ldr	r3, [r4, #20]
 80035e8:	425b      	negs	r3, r3
 80035ea:	61a3      	str	r3, [r4, #24]
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	b953      	cbnz	r3, 8003606 <__swsetup_r+0xc6>
 80035f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80035f8:	d1ba      	bne.n	8003570 <__swsetup_r+0x30>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	0792      	lsls	r2, r2, #30
 80035fe:	bf58      	it	pl
 8003600:	6963      	ldrpl	r3, [r4, #20]
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	e7f2      	b.n	80035ec <__swsetup_r+0xac>
 8003606:	2000      	movs	r0, #0
 8003608:	e7f7      	b.n	80035fa <__swsetup_r+0xba>
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c
 8003610:	080043a4 	.word	0x080043a4
 8003614:	080043c4 	.word	0x080043c4
 8003618:	08004384 	.word	0x08004384

0800361c <__sflush_r>:
 800361c:	898a      	ldrh	r2, [r1, #12]
 800361e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003622:	4605      	mov	r5, r0
 8003624:	0710      	lsls	r0, r2, #28
 8003626:	460c      	mov	r4, r1
 8003628:	d458      	bmi.n	80036dc <__sflush_r+0xc0>
 800362a:	684b      	ldr	r3, [r1, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	dc05      	bgt.n	800363c <__sflush_r+0x20>
 8003630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	dc02      	bgt.n	800363c <__sflush_r+0x20>
 8003636:	2000      	movs	r0, #0
 8003638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800363e:	2e00      	cmp	r6, #0
 8003640:	d0f9      	beq.n	8003636 <__sflush_r+0x1a>
 8003642:	2300      	movs	r3, #0
 8003644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003648:	682f      	ldr	r7, [r5, #0]
 800364a:	6a21      	ldr	r1, [r4, #32]
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	d032      	beq.n	80036b6 <__sflush_r+0x9a>
 8003650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	075a      	lsls	r2, r3, #29
 8003656:	d505      	bpl.n	8003664 <__sflush_r+0x48>
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	1ac0      	subs	r0, r0, r3
 800365c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800365e:	b10b      	cbz	r3, 8003664 <__sflush_r+0x48>
 8003660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003662:	1ac0      	subs	r0, r0, r3
 8003664:	2300      	movs	r3, #0
 8003666:	4602      	mov	r2, r0
 8003668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800366a:	6a21      	ldr	r1, [r4, #32]
 800366c:	4628      	mov	r0, r5
 800366e:	47b0      	blx	r6
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	d106      	bne.n	8003684 <__sflush_r+0x68>
 8003676:	6829      	ldr	r1, [r5, #0]
 8003678:	291d      	cmp	r1, #29
 800367a:	d848      	bhi.n	800370e <__sflush_r+0xf2>
 800367c:	4a29      	ldr	r2, [pc, #164]	; (8003724 <__sflush_r+0x108>)
 800367e:	40ca      	lsrs	r2, r1
 8003680:	07d6      	lsls	r6, r2, #31
 8003682:	d544      	bpl.n	800370e <__sflush_r+0xf2>
 8003684:	2200      	movs	r2, #0
 8003686:	6062      	str	r2, [r4, #4]
 8003688:	04d9      	lsls	r1, r3, #19
 800368a:	6922      	ldr	r2, [r4, #16]
 800368c:	6022      	str	r2, [r4, #0]
 800368e:	d504      	bpl.n	800369a <__sflush_r+0x7e>
 8003690:	1c42      	adds	r2, r0, #1
 8003692:	d101      	bne.n	8003698 <__sflush_r+0x7c>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b903      	cbnz	r3, 800369a <__sflush_r+0x7e>
 8003698:	6560      	str	r0, [r4, #84]	; 0x54
 800369a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800369c:	602f      	str	r7, [r5, #0]
 800369e:	2900      	cmp	r1, #0
 80036a0:	d0c9      	beq.n	8003636 <__sflush_r+0x1a>
 80036a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036a6:	4299      	cmp	r1, r3
 80036a8:	d002      	beq.n	80036b0 <__sflush_r+0x94>
 80036aa:	4628      	mov	r0, r5
 80036ac:	f000 f994 	bl	80039d8 <_free_r>
 80036b0:	2000      	movs	r0, #0
 80036b2:	6360      	str	r0, [r4, #52]	; 0x34
 80036b4:	e7c0      	b.n	8003638 <__sflush_r+0x1c>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b0      	blx	r6
 80036bc:	1c41      	adds	r1, r0, #1
 80036be:	d1c8      	bne.n	8003652 <__sflush_r+0x36>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0c5      	beq.n	8003652 <__sflush_r+0x36>
 80036c6:	2b1d      	cmp	r3, #29
 80036c8:	d001      	beq.n	80036ce <__sflush_r+0xb2>
 80036ca:	2b16      	cmp	r3, #22
 80036cc:	d101      	bne.n	80036d2 <__sflush_r+0xb6>
 80036ce:	602f      	str	r7, [r5, #0]
 80036d0:	e7b1      	b.n	8003636 <__sflush_r+0x1a>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	e7ad      	b.n	8003638 <__sflush_r+0x1c>
 80036dc:	690f      	ldr	r7, [r1, #16]
 80036de:	2f00      	cmp	r7, #0
 80036e0:	d0a9      	beq.n	8003636 <__sflush_r+0x1a>
 80036e2:	0793      	lsls	r3, r2, #30
 80036e4:	680e      	ldr	r6, [r1, #0]
 80036e6:	bf08      	it	eq
 80036e8:	694b      	ldreq	r3, [r1, #20]
 80036ea:	600f      	str	r7, [r1, #0]
 80036ec:	bf18      	it	ne
 80036ee:	2300      	movne	r3, #0
 80036f0:	eba6 0807 	sub.w	r8, r6, r7
 80036f4:	608b      	str	r3, [r1, #8]
 80036f6:	f1b8 0f00 	cmp.w	r8, #0
 80036fa:	dd9c      	ble.n	8003636 <__sflush_r+0x1a>
 80036fc:	4643      	mov	r3, r8
 80036fe:	463a      	mov	r2, r7
 8003700:	6a21      	ldr	r1, [r4, #32]
 8003702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003704:	4628      	mov	r0, r5
 8003706:	47b0      	blx	r6
 8003708:	2800      	cmp	r0, #0
 800370a:	dc06      	bgt.n	800371a <__sflush_r+0xfe>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003712:	81a3      	strh	r3, [r4, #12]
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	e78e      	b.n	8003638 <__sflush_r+0x1c>
 800371a:	4407      	add	r7, r0
 800371c:	eba8 0800 	sub.w	r8, r8, r0
 8003720:	e7e9      	b.n	80036f6 <__sflush_r+0xda>
 8003722:	bf00      	nop
 8003724:	20400001 	.word	0x20400001

08003728 <_fflush_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	690b      	ldr	r3, [r1, #16]
 800372c:	4605      	mov	r5, r0
 800372e:	460c      	mov	r4, r1
 8003730:	b1db      	cbz	r3, 800376a <_fflush_r+0x42>
 8003732:	b118      	cbz	r0, 800373c <_fflush_r+0x14>
 8003734:	6983      	ldr	r3, [r0, #24]
 8003736:	b90b      	cbnz	r3, 800373c <_fflush_r+0x14>
 8003738:	f000 f860 	bl	80037fc <__sinit>
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <_fflush_r+0x48>)
 800373e:	429c      	cmp	r4, r3
 8003740:	d109      	bne.n	8003756 <_fflush_r+0x2e>
 8003742:	686c      	ldr	r4, [r5, #4]
 8003744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003748:	b17b      	cbz	r3, 800376a <_fflush_r+0x42>
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003752:	f7ff bf63 	b.w	800361c <__sflush_r>
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_fflush_r+0x4c>)
 8003758:	429c      	cmp	r4, r3
 800375a:	d101      	bne.n	8003760 <_fflush_r+0x38>
 800375c:	68ac      	ldr	r4, [r5, #8]
 800375e:	e7f1      	b.n	8003744 <_fflush_r+0x1c>
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <_fflush_r+0x50>)
 8003762:	429c      	cmp	r4, r3
 8003764:	bf08      	it	eq
 8003766:	68ec      	ldreq	r4, [r5, #12]
 8003768:	e7ec      	b.n	8003744 <_fflush_r+0x1c>
 800376a:	2000      	movs	r0, #0
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	bf00      	nop
 8003770:	080043a4 	.word	0x080043a4
 8003774:	080043c4 	.word	0x080043c4
 8003778:	08004384 	.word	0x08004384

0800377c <std>:
 800377c:	2300      	movs	r3, #0
 800377e:	b510      	push	{r4, lr}
 8003780:	4604      	mov	r4, r0
 8003782:	e9c0 3300 	strd	r3, r3, [r0]
 8003786:	6083      	str	r3, [r0, #8]
 8003788:	8181      	strh	r1, [r0, #12]
 800378a:	6643      	str	r3, [r0, #100]	; 0x64
 800378c:	81c2      	strh	r2, [r0, #14]
 800378e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003792:	6183      	str	r3, [r0, #24]
 8003794:	4619      	mov	r1, r3
 8003796:	2208      	movs	r2, #8
 8003798:	305c      	adds	r0, #92	; 0x5c
 800379a:	f7ff fdcd 	bl	8003338 <memset>
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <std+0x38>)
 80037a0:	6263      	str	r3, [r4, #36]	; 0x24
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <std+0x3c>)
 80037a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x40>)
 80037a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <std+0x44>)
 80037ac:	6224      	str	r4, [r4, #32]
 80037ae:	6323      	str	r3, [r4, #48]	; 0x30
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	08004145 	.word	0x08004145
 80037b8:	08004167 	.word	0x08004167
 80037bc:	0800419f 	.word	0x0800419f
 80037c0:	080041c3 	.word	0x080041c3

080037c4 <_cleanup_r>:
 80037c4:	4901      	ldr	r1, [pc, #4]	; (80037cc <_cleanup_r+0x8>)
 80037c6:	f000 b885 	b.w	80038d4 <_fwalk_reent>
 80037ca:	bf00      	nop
 80037cc:	08003729 	.word	0x08003729

080037d0 <__sfmoreglue>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	1e4a      	subs	r2, r1, #1
 80037d4:	2568      	movs	r5, #104	; 0x68
 80037d6:	4355      	muls	r5, r2
 80037d8:	460e      	mov	r6, r1
 80037da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037de:	f000 f949 	bl	8003a74 <_malloc_r>
 80037e2:	4604      	mov	r4, r0
 80037e4:	b140      	cbz	r0, 80037f8 <__sfmoreglue+0x28>
 80037e6:	2100      	movs	r1, #0
 80037e8:	e9c0 1600 	strd	r1, r6, [r0]
 80037ec:	300c      	adds	r0, #12
 80037ee:	60a0      	str	r0, [r4, #8]
 80037f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037f4:	f7ff fda0 	bl	8003338 <memset>
 80037f8:	4620      	mov	r0, r4
 80037fa:	bd70      	pop	{r4, r5, r6, pc}

080037fc <__sinit>:
 80037fc:	6983      	ldr	r3, [r0, #24]
 80037fe:	b510      	push	{r4, lr}
 8003800:	4604      	mov	r4, r0
 8003802:	bb33      	cbnz	r3, 8003852 <__sinit+0x56>
 8003804:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003808:	6503      	str	r3, [r0, #80]	; 0x50
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <__sinit+0x58>)
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <__sinit+0x5c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6282      	str	r2, [r0, #40]	; 0x28
 8003812:	4298      	cmp	r0, r3
 8003814:	bf04      	itt	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	6183      	streq	r3, [r0, #24]
 800381a:	f000 f81f 	bl	800385c <__sfp>
 800381e:	6060      	str	r0, [r4, #4]
 8003820:	4620      	mov	r0, r4
 8003822:	f000 f81b 	bl	800385c <__sfp>
 8003826:	60a0      	str	r0, [r4, #8]
 8003828:	4620      	mov	r0, r4
 800382a:	f000 f817 	bl	800385c <__sfp>
 800382e:	2200      	movs	r2, #0
 8003830:	60e0      	str	r0, [r4, #12]
 8003832:	2104      	movs	r1, #4
 8003834:	6860      	ldr	r0, [r4, #4]
 8003836:	f7ff ffa1 	bl	800377c <std>
 800383a:	2201      	movs	r2, #1
 800383c:	2109      	movs	r1, #9
 800383e:	68a0      	ldr	r0, [r4, #8]
 8003840:	f7ff ff9c 	bl	800377c <std>
 8003844:	2202      	movs	r2, #2
 8003846:	2112      	movs	r1, #18
 8003848:	68e0      	ldr	r0, [r4, #12]
 800384a:	f7ff ff97 	bl	800377c <std>
 800384e:	2301      	movs	r3, #1
 8003850:	61a3      	str	r3, [r4, #24]
 8003852:	bd10      	pop	{r4, pc}
 8003854:	08004380 	.word	0x08004380
 8003858:	080037c5 	.word	0x080037c5

0800385c <__sfp>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <__sfp+0x70>)
 8003860:	681e      	ldr	r6, [r3, #0]
 8003862:	69b3      	ldr	r3, [r6, #24]
 8003864:	4607      	mov	r7, r0
 8003866:	b913      	cbnz	r3, 800386e <__sfp+0x12>
 8003868:	4630      	mov	r0, r6
 800386a:	f7ff ffc7 	bl	80037fc <__sinit>
 800386e:	3648      	adds	r6, #72	; 0x48
 8003870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	d503      	bpl.n	8003880 <__sfp+0x24>
 8003878:	6833      	ldr	r3, [r6, #0]
 800387a:	b133      	cbz	r3, 800388a <__sfp+0x2e>
 800387c:	6836      	ldr	r6, [r6, #0]
 800387e:	e7f7      	b.n	8003870 <__sfp+0x14>
 8003880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003884:	b16d      	cbz	r5, 80038a2 <__sfp+0x46>
 8003886:	3468      	adds	r4, #104	; 0x68
 8003888:	e7f4      	b.n	8003874 <__sfp+0x18>
 800388a:	2104      	movs	r1, #4
 800388c:	4638      	mov	r0, r7
 800388e:	f7ff ff9f 	bl	80037d0 <__sfmoreglue>
 8003892:	6030      	str	r0, [r6, #0]
 8003894:	2800      	cmp	r0, #0
 8003896:	d1f1      	bne.n	800387c <__sfp+0x20>
 8003898:	230c      	movs	r3, #12
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4604      	mov	r4, r0
 800389e:	4620      	mov	r0, r4
 80038a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <__sfp+0x74>)
 80038a4:	6665      	str	r5, [r4, #100]	; 0x64
 80038a6:	e9c4 5500 	strd	r5, r5, [r4]
 80038aa:	60a5      	str	r5, [r4, #8]
 80038ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038b4:	2208      	movs	r2, #8
 80038b6:	4629      	mov	r1, r5
 80038b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038bc:	f7ff fd3c 	bl	8003338 <memset>
 80038c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038c8:	e7e9      	b.n	800389e <__sfp+0x42>
 80038ca:	bf00      	nop
 80038cc:	08004380 	.word	0x08004380
 80038d0:	ffff0001 	.word	0xffff0001

080038d4 <_fwalk_reent>:
 80038d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d8:	4680      	mov	r8, r0
 80038da:	4689      	mov	r9, r1
 80038dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038e0:	2600      	movs	r6, #0
 80038e2:	b914      	cbnz	r4, 80038ea <_fwalk_reent+0x16>
 80038e4:	4630      	mov	r0, r6
 80038e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80038ee:	3f01      	subs	r7, #1
 80038f0:	d501      	bpl.n	80038f6 <_fwalk_reent+0x22>
 80038f2:	6824      	ldr	r4, [r4, #0]
 80038f4:	e7f5      	b.n	80038e2 <_fwalk_reent+0xe>
 80038f6:	89ab      	ldrh	r3, [r5, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d907      	bls.n	800390c <_fwalk_reent+0x38>
 80038fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003900:	3301      	adds	r3, #1
 8003902:	d003      	beq.n	800390c <_fwalk_reent+0x38>
 8003904:	4629      	mov	r1, r5
 8003906:	4640      	mov	r0, r8
 8003908:	47c8      	blx	r9
 800390a:	4306      	orrs	r6, r0
 800390c:	3568      	adds	r5, #104	; 0x68
 800390e:	e7ee      	b.n	80038ee <_fwalk_reent+0x1a>

08003910 <__swhatbuf_r>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	460e      	mov	r6, r1
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	2900      	cmp	r1, #0
 800391a:	b096      	sub	sp, #88	; 0x58
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	da07      	bge.n	8003932 <__swhatbuf_r+0x22>
 8003922:	2300      	movs	r3, #0
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	89b3      	ldrh	r3, [r6, #12]
 8003928:	061a      	lsls	r2, r3, #24
 800392a:	d410      	bmi.n	800394e <__swhatbuf_r+0x3e>
 800392c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003930:	e00e      	b.n	8003950 <__swhatbuf_r+0x40>
 8003932:	466a      	mov	r2, sp
 8003934:	f000 fc6c 	bl	8004210 <_fstat_r>
 8003938:	2800      	cmp	r0, #0
 800393a:	dbf2      	blt.n	8003922 <__swhatbuf_r+0x12>
 800393c:	9a01      	ldr	r2, [sp, #4]
 800393e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003946:	425a      	negs	r2, r3
 8003948:	415a      	adcs	r2, r3
 800394a:	602a      	str	r2, [r5, #0]
 800394c:	e7ee      	b.n	800392c <__swhatbuf_r+0x1c>
 800394e:	2340      	movs	r3, #64	; 0x40
 8003950:	2000      	movs	r0, #0
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	b016      	add	sp, #88	; 0x58
 8003956:	bd70      	pop	{r4, r5, r6, pc}

08003958 <__smakebuf_r>:
 8003958:	898b      	ldrh	r3, [r1, #12]
 800395a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800395c:	079d      	lsls	r5, r3, #30
 800395e:	4606      	mov	r6, r0
 8003960:	460c      	mov	r4, r1
 8003962:	d507      	bpl.n	8003974 <__smakebuf_r+0x1c>
 8003964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	6123      	str	r3, [r4, #16]
 800396c:	2301      	movs	r3, #1
 800396e:	6163      	str	r3, [r4, #20]
 8003970:	b002      	add	sp, #8
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	ab01      	add	r3, sp, #4
 8003976:	466a      	mov	r2, sp
 8003978:	f7ff ffca 	bl	8003910 <__swhatbuf_r>
 800397c:	9900      	ldr	r1, [sp, #0]
 800397e:	4605      	mov	r5, r0
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f877 	bl	8003a74 <_malloc_r>
 8003986:	b948      	cbnz	r0, 800399c <__smakebuf_r+0x44>
 8003988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398c:	059a      	lsls	r2, r3, #22
 800398e:	d4ef      	bmi.n	8003970 <__smakebuf_r+0x18>
 8003990:	f023 0303 	bic.w	r3, r3, #3
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	e7e3      	b.n	8003964 <__smakebuf_r+0xc>
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <__smakebuf_r+0x7c>)
 800399e:	62b3      	str	r3, [r6, #40]	; 0x28
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	6020      	str	r0, [r4, #0]
 80039a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	9b00      	ldr	r3, [sp, #0]
 80039ac:	6163      	str	r3, [r4, #20]
 80039ae:	9b01      	ldr	r3, [sp, #4]
 80039b0:	6120      	str	r0, [r4, #16]
 80039b2:	b15b      	cbz	r3, 80039cc <__smakebuf_r+0x74>
 80039b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b8:	4630      	mov	r0, r6
 80039ba:	f000 fc3b 	bl	8004234 <_isatty_r>
 80039be:	b128      	cbz	r0, 80039cc <__smakebuf_r+0x74>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	431d      	orrs	r5, r3
 80039d0:	81a5      	strh	r5, [r4, #12]
 80039d2:	e7cd      	b.n	8003970 <__smakebuf_r+0x18>
 80039d4:	080037c5 	.word	0x080037c5

080039d8 <_free_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4605      	mov	r5, r0
 80039dc:	2900      	cmp	r1, #0
 80039de:	d045      	beq.n	8003a6c <_free_r+0x94>
 80039e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e4:	1f0c      	subs	r4, r1, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfb8      	it	lt
 80039ea:	18e4      	addlt	r4, r4, r3
 80039ec:	f000 fc44 	bl	8004278 <__malloc_lock>
 80039f0:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <_free_r+0x98>)
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	4610      	mov	r0, r2
 80039f6:	b933      	cbnz	r3, 8003a06 <_free_r+0x2e>
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	6014      	str	r4, [r2, #0]
 80039fc:	4628      	mov	r0, r5
 80039fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a02:	f000 bc3a 	b.w	800427a <__malloc_unlock>
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	d90c      	bls.n	8003a24 <_free_r+0x4c>
 8003a0a:	6821      	ldr	r1, [r4, #0]
 8003a0c:	1862      	adds	r2, r4, r1
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bf04      	itt	eq
 8003a12:	681a      	ldreq	r2, [r3, #0]
 8003a14:	685b      	ldreq	r3, [r3, #4]
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	bf04      	itt	eq
 8003a1a:	1852      	addeq	r2, r2, r1
 8003a1c:	6022      	streq	r2, [r4, #0]
 8003a1e:	6004      	str	r4, [r0, #0]
 8003a20:	e7ec      	b.n	80039fc <_free_r+0x24>
 8003a22:	4613      	mov	r3, r2
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	b10a      	cbz	r2, 8003a2c <_free_r+0x54>
 8003a28:	42a2      	cmp	r2, r4
 8003a2a:	d9fa      	bls.n	8003a22 <_free_r+0x4a>
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	1858      	adds	r0, r3, r1
 8003a30:	42a0      	cmp	r0, r4
 8003a32:	d10b      	bne.n	8003a4c <_free_r+0x74>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	4401      	add	r1, r0
 8003a38:	1858      	adds	r0, r3, r1
 8003a3a:	4282      	cmp	r2, r0
 8003a3c:	6019      	str	r1, [r3, #0]
 8003a3e:	d1dd      	bne.n	80039fc <_free_r+0x24>
 8003a40:	6810      	ldr	r0, [r2, #0]
 8003a42:	6852      	ldr	r2, [r2, #4]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	4401      	add	r1, r0
 8003a48:	6019      	str	r1, [r3, #0]
 8003a4a:	e7d7      	b.n	80039fc <_free_r+0x24>
 8003a4c:	d902      	bls.n	8003a54 <_free_r+0x7c>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	602b      	str	r3, [r5, #0]
 8003a52:	e7d3      	b.n	80039fc <_free_r+0x24>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	1821      	adds	r1, r4, r0
 8003a58:	428a      	cmp	r2, r1
 8003a5a:	bf04      	itt	eq
 8003a5c:	6811      	ldreq	r1, [r2, #0]
 8003a5e:	6852      	ldreq	r2, [r2, #4]
 8003a60:	6062      	str	r2, [r4, #4]
 8003a62:	bf04      	itt	eq
 8003a64:	1809      	addeq	r1, r1, r0
 8003a66:	6021      	streq	r1, [r4, #0]
 8003a68:	605c      	str	r4, [r3, #4]
 8003a6a:	e7c7      	b.n	80039fc <_free_r+0x24>
 8003a6c:	bd38      	pop	{r3, r4, r5, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000098 	.word	0x20000098

08003a74 <_malloc_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	1ccd      	adds	r5, r1, #3
 8003a78:	f025 0503 	bic.w	r5, r5, #3
 8003a7c:	3508      	adds	r5, #8
 8003a7e:	2d0c      	cmp	r5, #12
 8003a80:	bf38      	it	cc
 8003a82:	250c      	movcc	r5, #12
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	4606      	mov	r6, r0
 8003a88:	db01      	blt.n	8003a8e <_malloc_r+0x1a>
 8003a8a:	42a9      	cmp	r1, r5
 8003a8c:	d903      	bls.n	8003a96 <_malloc_r+0x22>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	2000      	movs	r0, #0
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	f000 fbef 	bl	8004278 <__malloc_lock>
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <_malloc_r+0xac>)
 8003a9c:	6814      	ldr	r4, [r2, #0]
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	b991      	cbnz	r1, 8003ac8 <_malloc_r+0x54>
 8003aa2:	4c20      	ldr	r4, [pc, #128]	; (8003b24 <_malloc_r+0xb0>)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	b91b      	cbnz	r3, 8003ab0 <_malloc_r+0x3c>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 fb3b 	bl	8004124 <_sbrk_r>
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 fb36 	bl	8004124 <_sbrk_r>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d124      	bne.n	8003b06 <_malloc_r+0x92>
 8003abc:	230c      	movs	r3, #12
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 fbda 	bl	800427a <__malloc_unlock>
 8003ac6:	e7e4      	b.n	8003a92 <_malloc_r+0x1e>
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	1b5b      	subs	r3, r3, r5
 8003acc:	d418      	bmi.n	8003b00 <_malloc_r+0x8c>
 8003ace:	2b0b      	cmp	r3, #11
 8003ad0:	d90f      	bls.n	8003af2 <_malloc_r+0x7e>
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	50cd      	str	r5, [r1, r3]
 8003ad6:	18cc      	adds	r4, r1, r3
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f000 fbce 	bl	800427a <__malloc_unlock>
 8003ade:	f104 000b 	add.w	r0, r4, #11
 8003ae2:	1d23      	adds	r3, r4, #4
 8003ae4:	f020 0007 	bic.w	r0, r0, #7
 8003ae8:	1ac3      	subs	r3, r0, r3
 8003aea:	d0d3      	beq.n	8003a94 <_malloc_r+0x20>
 8003aec:	425a      	negs	r2, r3
 8003aee:	50e2      	str	r2, [r4, r3]
 8003af0:	e7d0      	b.n	8003a94 <_malloc_r+0x20>
 8003af2:	428c      	cmp	r4, r1
 8003af4:	684b      	ldr	r3, [r1, #4]
 8003af6:	bf16      	itet	ne
 8003af8:	6063      	strne	r3, [r4, #4]
 8003afa:	6013      	streq	r3, [r2, #0]
 8003afc:	460c      	movne	r4, r1
 8003afe:	e7eb      	b.n	8003ad8 <_malloc_r+0x64>
 8003b00:	460c      	mov	r4, r1
 8003b02:	6849      	ldr	r1, [r1, #4]
 8003b04:	e7cc      	b.n	8003aa0 <_malloc_r+0x2c>
 8003b06:	1cc4      	adds	r4, r0, #3
 8003b08:	f024 0403 	bic.w	r4, r4, #3
 8003b0c:	42a0      	cmp	r0, r4
 8003b0e:	d005      	beq.n	8003b1c <_malloc_r+0xa8>
 8003b10:	1a21      	subs	r1, r4, r0
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 fb06 	bl	8004124 <_sbrk_r>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d0cf      	beq.n	8003abc <_malloc_r+0x48>
 8003b1c:	6025      	str	r5, [r4, #0]
 8003b1e:	e7db      	b.n	8003ad8 <_malloc_r+0x64>
 8003b20:	20000098 	.word	0x20000098
 8003b24:	2000009c 	.word	0x2000009c

08003b28 <__sfputc_r>:
 8003b28:	6893      	ldr	r3, [r2, #8]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	b410      	push	{r4}
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	da08      	bge.n	8003b46 <__sfputc_r+0x1e>
 8003b34:	6994      	ldr	r4, [r2, #24]
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	db01      	blt.n	8003b3e <__sfputc_r+0x16>
 8003b3a:	290a      	cmp	r1, #10
 8003b3c:	d103      	bne.n	8003b46 <__sfputc_r+0x1e>
 8003b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b42:	f7ff bcab 	b.w	800349c <__swbuf_r>
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	1c58      	adds	r0, r3, #1
 8003b4a:	6010      	str	r0, [r2, #0]
 8003b4c:	7019      	strb	r1, [r3, #0]
 8003b4e:	4608      	mov	r0, r1
 8003b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <__sfputs_r>:
 8003b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460f      	mov	r7, r1
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	18d5      	adds	r5, r2, r3
 8003b60:	42ac      	cmp	r4, r5
 8003b62:	d101      	bne.n	8003b68 <__sfputs_r+0x12>
 8003b64:	2000      	movs	r0, #0
 8003b66:	e007      	b.n	8003b78 <__sfputs_r+0x22>
 8003b68:	463a      	mov	r2, r7
 8003b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff ffda 	bl	8003b28 <__sfputc_r>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d1f3      	bne.n	8003b60 <__sfputs_r+0xa>
 8003b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b7c <_vfiprintf_r>:
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	460c      	mov	r4, r1
 8003b82:	b09d      	sub	sp, #116	; 0x74
 8003b84:	4617      	mov	r7, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	4606      	mov	r6, r0
 8003b8a:	b118      	cbz	r0, 8003b94 <_vfiprintf_r+0x18>
 8003b8c:	6983      	ldr	r3, [r0, #24]
 8003b8e:	b90b      	cbnz	r3, 8003b94 <_vfiprintf_r+0x18>
 8003b90:	f7ff fe34 	bl	80037fc <__sinit>
 8003b94:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <_vfiprintf_r+0x20c>)
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d158      	bne.n	8003c4c <_vfiprintf_r+0xd0>
 8003b9a:	6874      	ldr	r4, [r6, #4]
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	0718      	lsls	r0, r3, #28
 8003ba0:	d55e      	bpl.n	8003c60 <_vfiprintf_r+0xe4>
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05b      	beq.n	8003c60 <_vfiprintf_r+0xe4>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bac:	2320      	movs	r3, #32
 8003bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb2:	2330      	movs	r3, #48	; 0x30
 8003bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bb8:	9503      	str	r5, [sp, #12]
 8003bba:	f04f 0b01 	mov.w	fp, #1
 8003bbe:	46b8      	mov	r8, r7
 8003bc0:	4645      	mov	r5, r8
 8003bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bc6:	b10b      	cbz	r3, 8003bcc <_vfiprintf_r+0x50>
 8003bc8:	2b25      	cmp	r3, #37	; 0x25
 8003bca:	d154      	bne.n	8003c76 <_vfiprintf_r+0xfa>
 8003bcc:	ebb8 0a07 	subs.w	sl, r8, r7
 8003bd0:	d00b      	beq.n	8003bea <_vfiprintf_r+0x6e>
 8003bd2:	4653      	mov	r3, sl
 8003bd4:	463a      	mov	r2, r7
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f7ff ffbc 	bl	8003b56 <__sfputs_r>
 8003bde:	3001      	adds	r0, #1
 8003be0:	f000 80c2 	beq.w	8003d68 <_vfiprintf_r+0x1ec>
 8003be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be6:	4453      	add	r3, sl
 8003be8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bea:	f898 3000 	ldrb.w	r3, [r8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80ba 	beq.w	8003d68 <_vfiprintf_r+0x1ec>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	9307      	str	r3, [sp, #28]
 8003c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c06:	931a      	str	r3, [sp, #104]	; 0x68
 8003c08:	46a8      	mov	r8, r5
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c10:	485e      	ldr	r0, [pc, #376]	; (8003d8c <_vfiprintf_r+0x210>)
 8003c12:	f7fc fae5 	bl	80001e0 <memchr>
 8003c16:	9b04      	ldr	r3, [sp, #16]
 8003c18:	bb78      	cbnz	r0, 8003c7a <_vfiprintf_r+0xfe>
 8003c1a:	06d9      	lsls	r1, r3, #27
 8003c1c:	bf44      	itt	mi
 8003c1e:	2220      	movmi	r2, #32
 8003c20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c24:	071a      	lsls	r2, r3, #28
 8003c26:	bf44      	itt	mi
 8003c28:	222b      	movmi	r2, #43	; 0x2b
 8003c2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c2e:	782a      	ldrb	r2, [r5, #0]
 8003c30:	2a2a      	cmp	r2, #42	; 0x2a
 8003c32:	d02a      	beq.n	8003c8a <_vfiprintf_r+0x10e>
 8003c34:	9a07      	ldr	r2, [sp, #28]
 8003c36:	46a8      	mov	r8, r5
 8003c38:	2000      	movs	r0, #0
 8003c3a:	250a      	movs	r5, #10
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c42:	3b30      	subs	r3, #48	; 0x30
 8003c44:	2b09      	cmp	r3, #9
 8003c46:	d969      	bls.n	8003d1c <_vfiprintf_r+0x1a0>
 8003c48:	b360      	cbz	r0, 8003ca4 <_vfiprintf_r+0x128>
 8003c4a:	e024      	b.n	8003c96 <_vfiprintf_r+0x11a>
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <_vfiprintf_r+0x214>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d101      	bne.n	8003c56 <_vfiprintf_r+0xda>
 8003c52:	68b4      	ldr	r4, [r6, #8]
 8003c54:	e7a2      	b.n	8003b9c <_vfiprintf_r+0x20>
 8003c56:	4b4f      	ldr	r3, [pc, #316]	; (8003d94 <_vfiprintf_r+0x218>)
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf08      	it	eq
 8003c5c:	68f4      	ldreq	r4, [r6, #12]
 8003c5e:	e79d      	b.n	8003b9c <_vfiprintf_r+0x20>
 8003c60:	4621      	mov	r1, r4
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff fc6c 	bl	8003540 <__swsetup_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d09d      	beq.n	8003ba8 <_vfiprintf_r+0x2c>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	b01d      	add	sp, #116	; 0x74
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	46a8      	mov	r8, r5
 8003c78:	e7a2      	b.n	8003bc0 <_vfiprintf_r+0x44>
 8003c7a:	4a44      	ldr	r2, [pc, #272]	; (8003d8c <_vfiprintf_r+0x210>)
 8003c7c:	1a80      	subs	r0, r0, r2
 8003c7e:	fa0b f000 	lsl.w	r0, fp, r0
 8003c82:	4318      	orrs	r0, r3
 8003c84:	9004      	str	r0, [sp, #16]
 8003c86:	4645      	mov	r5, r8
 8003c88:	e7be      	b.n	8003c08 <_vfiprintf_r+0x8c>
 8003c8a:	9a03      	ldr	r2, [sp, #12]
 8003c8c:	1d11      	adds	r1, r2, #4
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	9103      	str	r1, [sp, #12]
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	db01      	blt.n	8003c9a <_vfiprintf_r+0x11e>
 8003c96:	9207      	str	r2, [sp, #28]
 8003c98:	e004      	b.n	8003ca4 <_vfiprintf_r+0x128>
 8003c9a:	4252      	negs	r2, r2
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	9207      	str	r2, [sp, #28]
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	f898 3000 	ldrb.w	r3, [r8]
 8003ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8003caa:	d10e      	bne.n	8003cca <_vfiprintf_r+0x14e>
 8003cac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb2:	d138      	bne.n	8003d26 <_vfiprintf_r+0x1aa>
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	1d1a      	adds	r2, r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cc4:	f108 0802 	add.w	r8, r8, #2
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	4d33      	ldr	r5, [pc, #204]	; (8003d98 <_vfiprintf_r+0x21c>)
 8003ccc:	f898 1000 	ldrb.w	r1, [r8]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f7fc fa84 	bl	80001e0 <memchr>
 8003cd8:	b140      	cbz	r0, 8003cec <_vfiprintf_r+0x170>
 8003cda:	2340      	movs	r3, #64	; 0x40
 8003cdc:	1b40      	subs	r0, r0, r5
 8003cde:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce2:	9b04      	ldr	r3, [sp, #16]
 8003ce4:	4303      	orrs	r3, r0
 8003ce6:	f108 0801 	add.w	r8, r8, #1
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	f898 1000 	ldrb.w	r1, [r8]
 8003cf0:	482a      	ldr	r0, [pc, #168]	; (8003d9c <_vfiprintf_r+0x220>)
 8003cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf6:	2206      	movs	r2, #6
 8003cf8:	f108 0701 	add.w	r7, r8, #1
 8003cfc:	f7fc fa70 	bl	80001e0 <memchr>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d037      	beq.n	8003d74 <_vfiprintf_r+0x1f8>
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <_vfiprintf_r+0x224>)
 8003d06:	bb1b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x1d4>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	f023 0307 	bic.w	r3, r3, #7
 8003d10:	3308      	adds	r3, #8
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d16:	444b      	add	r3, r9
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	e750      	b.n	8003bbe <_vfiprintf_r+0x42>
 8003d1c:	fb05 3202 	mla	r2, r5, r2, r3
 8003d20:	2001      	movs	r0, #1
 8003d22:	4688      	mov	r8, r1
 8003d24:	e78a      	b.n	8003c3c <_vfiprintf_r+0xc0>
 8003d26:	2300      	movs	r3, #0
 8003d28:	f108 0801 	add.w	r8, r8, #1
 8003d2c:	9305      	str	r3, [sp, #20]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	250a      	movs	r5, #10
 8003d32:	4640      	mov	r0, r8
 8003d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d38:	3a30      	subs	r2, #48	; 0x30
 8003d3a:	2a09      	cmp	r2, #9
 8003d3c:	d903      	bls.n	8003d46 <_vfiprintf_r+0x1ca>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0c3      	beq.n	8003cca <_vfiprintf_r+0x14e>
 8003d42:	9105      	str	r1, [sp, #20]
 8003d44:	e7c1      	b.n	8003cca <_vfiprintf_r+0x14e>
 8003d46:	fb05 2101 	mla	r1, r5, r1, r2
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	e7f0      	b.n	8003d32 <_vfiprintf_r+0x1b6>
 8003d50:	ab03      	add	r3, sp, #12
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4622      	mov	r2, r4
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <_vfiprintf_r+0x228>)
 8003d58:	a904      	add	r1, sp, #16
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f3af 8000 	nop.w
 8003d60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d64:	4681      	mov	r9, r0
 8003d66:	d1d5      	bne.n	8003d14 <_vfiprintf_r+0x198>
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	065b      	lsls	r3, r3, #25
 8003d6c:	f53f af7e 	bmi.w	8003c6c <_vfiprintf_r+0xf0>
 8003d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d72:	e77d      	b.n	8003c70 <_vfiprintf_r+0xf4>
 8003d74:	ab03      	add	r3, sp, #12
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <_vfiprintf_r+0x228>)
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f000 f888 	bl	8003e94 <_printf_i>
 8003d84:	e7ec      	b.n	8003d60 <_vfiprintf_r+0x1e4>
 8003d86:	bf00      	nop
 8003d88:	080043a4 	.word	0x080043a4
 8003d8c:	080043e4 	.word	0x080043e4
 8003d90:	080043c4 	.word	0x080043c4
 8003d94:	08004384 	.word	0x08004384
 8003d98:	080043ea 	.word	0x080043ea
 8003d9c:	080043ee 	.word	0x080043ee
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003b57 	.word	0x08003b57

08003da8 <_printf_common>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	4691      	mov	r9, r2
 8003dae:	461f      	mov	r7, r3
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	690b      	ldr	r3, [r1, #16]
 8003db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfb8      	it	lt
 8003dbc:	4613      	movlt	r3, r2
 8003dbe:	f8c9 3000 	str.w	r3, [r9]
 8003dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	b112      	cbz	r2, 8003dd2 <_printf_common+0x2a>
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f8c9 3000 	str.w	r3, [r9]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ddc:	3302      	addmi	r3, #2
 8003dde:	f8c9 3000 	strmi.w	r3, [r9]
 8003de2:	6825      	ldr	r5, [r4, #0]
 8003de4:	f015 0506 	ands.w	r5, r5, #6
 8003de8:	d107      	bne.n	8003dfa <_printf_common+0x52>
 8003dea:	f104 0a19 	add.w	sl, r4, #25
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	f8d9 2000 	ldr.w	r2, [r9]
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	42ab      	cmp	r3, r5
 8003df8:	dc28      	bgt.n	8003e4c <_printf_common+0xa4>
 8003dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	3300      	adds	r3, #0
 8003e02:	bf18      	it	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	0692      	lsls	r2, r2, #26
 8003e08:	d42d      	bmi.n	8003e66 <_printf_common+0xbe>
 8003e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e0e:	4639      	mov	r1, r7
 8003e10:	4630      	mov	r0, r6
 8003e12:	47c0      	blx	r8
 8003e14:	3001      	adds	r0, #1
 8003e16:	d020      	beq.n	8003e5a <_printf_common+0xb2>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	68e5      	ldr	r5, [r4, #12]
 8003e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf08      	it	eq
 8003e28:	1aad      	subeq	r5, r5, r2
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e34:	2500      	movne	r5, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfc4      	itt	gt
 8003e3a:	1a9b      	subgt	r3, r3, r2
 8003e3c:	18ed      	addgt	r5, r5, r3
 8003e3e:	f04f 0900 	mov.w	r9, #0
 8003e42:	341a      	adds	r4, #26
 8003e44:	454d      	cmp	r5, r9
 8003e46:	d11a      	bne.n	8003e7e <_printf_common+0xd6>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e008      	b.n	8003e5e <_printf_common+0xb6>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4652      	mov	r2, sl
 8003e50:	4639      	mov	r1, r7
 8003e52:	4630      	mov	r0, r6
 8003e54:	47c0      	blx	r8
 8003e56:	3001      	adds	r0, #1
 8003e58:	d103      	bne.n	8003e62 <_printf_common+0xba>
 8003e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7c3      	b.n	8003dee <_printf_common+0x46>
 8003e66:	18e1      	adds	r1, r4, r3
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	2030      	movs	r0, #48	; 0x30
 8003e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e70:	4422      	add	r2, r4
 8003e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	e7c5      	b.n	8003e0a <_printf_common+0x62>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4622      	mov	r2, r4
 8003e82:	4639      	mov	r1, r7
 8003e84:	4630      	mov	r0, r6
 8003e86:	47c0      	blx	r8
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d0e6      	beq.n	8003e5a <_printf_common+0xb2>
 8003e8c:	f109 0901 	add.w	r9, r9, #1
 8003e90:	e7d8      	b.n	8003e44 <_printf_common+0x9c>
	...

08003e94 <_printf_i>:
 8003e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	7e09      	ldrb	r1, [r1, #24]
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	296e      	cmp	r1, #110	; 0x6e
 8003ea4:	4617      	mov	r7, r2
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eac:	f000 80b3 	beq.w	8004016 <_printf_i+0x182>
 8003eb0:	d822      	bhi.n	8003ef8 <_printf_i+0x64>
 8003eb2:	2963      	cmp	r1, #99	; 0x63
 8003eb4:	d036      	beq.n	8003f24 <_printf_i+0x90>
 8003eb6:	d80a      	bhi.n	8003ece <_printf_i+0x3a>
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	f000 80b9 	beq.w	8004030 <_printf_i+0x19c>
 8003ebe:	2958      	cmp	r1, #88	; 0x58
 8003ec0:	f000 8083 	beq.w	8003fca <_printf_i+0x136>
 8003ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ecc:	e032      	b.n	8003f34 <_printf_i+0xa0>
 8003ece:	2964      	cmp	r1, #100	; 0x64
 8003ed0:	d001      	beq.n	8003ed6 <_printf_i+0x42>
 8003ed2:	2969      	cmp	r1, #105	; 0x69
 8003ed4:	d1f6      	bne.n	8003ec4 <_printf_i+0x30>
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	0605      	lsls	r5, r0, #24
 8003edc:	f103 0104 	add.w	r1, r3, #4
 8003ee0:	d52a      	bpl.n	8003f38 <_printf_i+0xa4>
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6011      	str	r1, [r2, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da03      	bge.n	8003ef2 <_printf_i+0x5e>
 8003eea:	222d      	movs	r2, #45	; 0x2d
 8003eec:	425b      	negs	r3, r3
 8003eee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ef2:	486f      	ldr	r0, [pc, #444]	; (80040b0 <_printf_i+0x21c>)
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	e039      	b.n	8003f6c <_printf_i+0xd8>
 8003ef8:	2973      	cmp	r1, #115	; 0x73
 8003efa:	f000 809d 	beq.w	8004038 <_printf_i+0x1a4>
 8003efe:	d808      	bhi.n	8003f12 <_printf_i+0x7e>
 8003f00:	296f      	cmp	r1, #111	; 0x6f
 8003f02:	d020      	beq.n	8003f46 <_printf_i+0xb2>
 8003f04:	2970      	cmp	r1, #112	; 0x70
 8003f06:	d1dd      	bne.n	8003ec4 <_printf_i+0x30>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	f043 0320 	orr.w	r3, r3, #32
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	e003      	b.n	8003f1a <_printf_i+0x86>
 8003f12:	2975      	cmp	r1, #117	; 0x75
 8003f14:	d017      	beq.n	8003f46 <_printf_i+0xb2>
 8003f16:	2978      	cmp	r1, #120	; 0x78
 8003f18:	d1d4      	bne.n	8003ec4 <_printf_i+0x30>
 8003f1a:	2378      	movs	r3, #120	; 0x78
 8003f1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f20:	4864      	ldr	r0, [pc, #400]	; (80040b4 <_printf_i+0x220>)
 8003f22:	e055      	b.n	8003fd0 <_printf_i+0x13c>
 8003f24:	6813      	ldr	r3, [r2, #0]
 8003f26:	1d19      	adds	r1, r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6011      	str	r1, [r2, #0]
 8003f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f34:	2301      	movs	r3, #1
 8003f36:	e08c      	b.n	8004052 <_printf_i+0x1be>
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6011      	str	r1, [r2, #0]
 8003f3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f40:	bf18      	it	ne
 8003f42:	b21b      	sxthne	r3, r3
 8003f44:	e7cf      	b.n	8003ee6 <_printf_i+0x52>
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	6825      	ldr	r5, [r4, #0]
 8003f4a:	1d18      	adds	r0, r3, #4
 8003f4c:	6010      	str	r0, [r2, #0]
 8003f4e:	0628      	lsls	r0, r5, #24
 8003f50:	d501      	bpl.n	8003f56 <_printf_i+0xc2>
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	e002      	b.n	8003f5c <_printf_i+0xc8>
 8003f56:	0668      	lsls	r0, r5, #25
 8003f58:	d5fb      	bpl.n	8003f52 <_printf_i+0xbe>
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	4854      	ldr	r0, [pc, #336]	; (80040b0 <_printf_i+0x21c>)
 8003f5e:	296f      	cmp	r1, #111	; 0x6f
 8003f60:	bf14      	ite	ne
 8003f62:	220a      	movne	r2, #10
 8003f64:	2208      	moveq	r2, #8
 8003f66:	2100      	movs	r1, #0
 8003f68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f6c:	6865      	ldr	r5, [r4, #4]
 8003f6e:	60a5      	str	r5, [r4, #8]
 8003f70:	2d00      	cmp	r5, #0
 8003f72:	f2c0 8095 	blt.w	80040a0 <_printf_i+0x20c>
 8003f76:	6821      	ldr	r1, [r4, #0]
 8003f78:	f021 0104 	bic.w	r1, r1, #4
 8003f7c:	6021      	str	r1, [r4, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13d      	bne.n	8003ffe <_printf_i+0x16a>
 8003f82:	2d00      	cmp	r5, #0
 8003f84:	f040 808e 	bne.w	80040a4 <_printf_i+0x210>
 8003f88:	4665      	mov	r5, ip
 8003f8a:	2a08      	cmp	r2, #8
 8003f8c:	d10b      	bne.n	8003fa6 <_printf_i+0x112>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	d508      	bpl.n	8003fa6 <_printf_i+0x112>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	6862      	ldr	r2, [r4, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	bfde      	ittt	le
 8003f9c:	2330      	movle	r3, #48	; 0x30
 8003f9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fa6:	ebac 0305 	sub.w	r3, ip, r5
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	f8cd 8000 	str.w	r8, [sp]
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	aa03      	add	r2, sp, #12
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f7ff fef6 	bl	8003da8 <_printf_common>
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d14d      	bne.n	800405c <_printf_i+0x1c8>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	b005      	add	sp, #20
 8003fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fca:	4839      	ldr	r0, [pc, #228]	; (80040b0 <_printf_i+0x21c>)
 8003fcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fd0:	6813      	ldr	r3, [r2, #0]
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	1d1d      	adds	r5, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6015      	str	r5, [r2, #0]
 8003fda:	060a      	lsls	r2, r1, #24
 8003fdc:	d50b      	bpl.n	8003ff6 <_printf_i+0x162>
 8003fde:	07ca      	lsls	r2, r1, #31
 8003fe0:	bf44      	itt	mi
 8003fe2:	f041 0120 	orrmi.w	r1, r1, #32
 8003fe6:	6021      	strmi	r1, [r4, #0]
 8003fe8:	b91b      	cbnz	r3, 8003ff2 <_printf_i+0x15e>
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	f022 0220 	bic.w	r2, r2, #32
 8003ff0:	6022      	str	r2, [r4, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	e7b7      	b.n	8003f66 <_printf_i+0xd2>
 8003ff6:	064d      	lsls	r5, r1, #25
 8003ff8:	bf48      	it	mi
 8003ffa:	b29b      	uxthmi	r3, r3
 8003ffc:	e7ef      	b.n	8003fde <_printf_i+0x14a>
 8003ffe:	4665      	mov	r5, ip
 8004000:	fbb3 f1f2 	udiv	r1, r3, r2
 8004004:	fb02 3311 	mls	r3, r2, r1, r3
 8004008:	5cc3      	ldrb	r3, [r0, r3]
 800400a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800400e:	460b      	mov	r3, r1
 8004010:	2900      	cmp	r1, #0
 8004012:	d1f5      	bne.n	8004000 <_printf_i+0x16c>
 8004014:	e7b9      	b.n	8003f8a <_printf_i+0xf6>
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	6825      	ldr	r5, [r4, #0]
 800401a:	6961      	ldr	r1, [r4, #20]
 800401c:	1d18      	adds	r0, r3, #4
 800401e:	6010      	str	r0, [r2, #0]
 8004020:	0628      	lsls	r0, r5, #24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	d501      	bpl.n	800402a <_printf_i+0x196>
 8004026:	6019      	str	r1, [r3, #0]
 8004028:	e002      	b.n	8004030 <_printf_i+0x19c>
 800402a:	066a      	lsls	r2, r5, #25
 800402c:	d5fb      	bpl.n	8004026 <_printf_i+0x192>
 800402e:	8019      	strh	r1, [r3, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	4665      	mov	r5, ip
 8004036:	e7b9      	b.n	8003fac <_printf_i+0x118>
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	1d19      	adds	r1, r3, #4
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	681d      	ldr	r5, [r3, #0]
 8004040:	6862      	ldr	r2, [r4, #4]
 8004042:	2100      	movs	r1, #0
 8004044:	4628      	mov	r0, r5
 8004046:	f7fc f8cb 	bl	80001e0 <memchr>
 800404a:	b108      	cbz	r0, 8004050 <_printf_i+0x1bc>
 800404c:	1b40      	subs	r0, r0, r5
 800404e:	6060      	str	r0, [r4, #4]
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	6123      	str	r3, [r4, #16]
 8004054:	2300      	movs	r3, #0
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405a:	e7a7      	b.n	8003fac <_printf_i+0x118>
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	462a      	mov	r2, r5
 8004060:	4639      	mov	r1, r7
 8004062:	4630      	mov	r0, r6
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d0aa      	beq.n	8003fc0 <_printf_i+0x12c>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	079b      	lsls	r3, r3, #30
 800406e:	d413      	bmi.n	8004098 <_printf_i+0x204>
 8004070:	68e0      	ldr	r0, [r4, #12]
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	4298      	cmp	r0, r3
 8004076:	bfb8      	it	lt
 8004078:	4618      	movlt	r0, r3
 800407a:	e7a3      	b.n	8003fc4 <_printf_i+0x130>
 800407c:	2301      	movs	r3, #1
 800407e:	464a      	mov	r2, r9
 8004080:	4639      	mov	r1, r7
 8004082:	4630      	mov	r0, r6
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d09a      	beq.n	8003fc0 <_printf_i+0x12c>
 800408a:	3501      	adds	r5, #1
 800408c:	68e3      	ldr	r3, [r4, #12]
 800408e:	9a03      	ldr	r2, [sp, #12]
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	42ab      	cmp	r3, r5
 8004094:	dcf2      	bgt.n	800407c <_printf_i+0x1e8>
 8004096:	e7eb      	b.n	8004070 <_printf_i+0x1dc>
 8004098:	2500      	movs	r5, #0
 800409a:	f104 0919 	add.w	r9, r4, #25
 800409e:	e7f5      	b.n	800408c <_printf_i+0x1f8>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ac      	bne.n	8003ffe <_printf_i+0x16a>
 80040a4:	7803      	ldrb	r3, [r0, #0]
 80040a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ae:	e76c      	b.n	8003f8a <_printf_i+0xf6>
 80040b0:	080043f5 	.word	0x080043f5
 80040b4:	08004406 	.word	0x08004406

080040b8 <_putc_r>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	460d      	mov	r5, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	4606      	mov	r6, r0
 80040c0:	b118      	cbz	r0, 80040ca <_putc_r+0x12>
 80040c2:	6983      	ldr	r3, [r0, #24]
 80040c4:	b90b      	cbnz	r3, 80040ca <_putc_r+0x12>
 80040c6:	f7ff fb99 	bl	80037fc <__sinit>
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <_putc_r+0x60>)
 80040cc:	429c      	cmp	r4, r3
 80040ce:	d112      	bne.n	80040f6 <_putc_r+0x3e>
 80040d0:	6874      	ldr	r4, [r6, #4]
 80040d2:	68a3      	ldr	r3, [r4, #8]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	da16      	bge.n	800410a <_putc_r+0x52>
 80040dc:	69a2      	ldr	r2, [r4, #24]
 80040de:	4293      	cmp	r3, r2
 80040e0:	db02      	blt.n	80040e8 <_putc_r+0x30>
 80040e2:	b2eb      	uxtb	r3, r5
 80040e4:	2b0a      	cmp	r3, #10
 80040e6:	d110      	bne.n	800410a <_putc_r+0x52>
 80040e8:	4622      	mov	r2, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	4630      	mov	r0, r6
 80040ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040f2:	f7ff b9d3 	b.w	800349c <__swbuf_r>
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <_putc_r+0x64>)
 80040f8:	429c      	cmp	r4, r3
 80040fa:	d101      	bne.n	8004100 <_putc_r+0x48>
 80040fc:	68b4      	ldr	r4, [r6, #8]
 80040fe:	e7e8      	b.n	80040d2 <_putc_r+0x1a>
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <_putc_r+0x68>)
 8004102:	429c      	cmp	r4, r3
 8004104:	bf08      	it	eq
 8004106:	68f4      	ldreq	r4, [r6, #12]
 8004108:	e7e3      	b.n	80040d2 <_putc_r+0x1a>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	701d      	strb	r5, [r3, #0]
 8004112:	b2e8      	uxtb	r0, r5
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	bf00      	nop
 8004118:	080043a4 	.word	0x080043a4
 800411c:	080043c4 	.word	0x080043c4
 8004120:	08004384 	.word	0x08004384

08004124 <_sbrk_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4c06      	ldr	r4, [pc, #24]	; (8004140 <_sbrk_r+0x1c>)
 8004128:	2300      	movs	r3, #0
 800412a:	4605      	mov	r5, r0
 800412c:	4608      	mov	r0, r1
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	f7fc fdde 	bl	8000cf0 <_sbrk>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_sbrk_r+0x1a>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	b103      	cbz	r3, 800413e <_sbrk_r+0x1a>
 800413c:	602b      	str	r3, [r5, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	20000164 	.word	0x20000164

08004144 <__sread>:
 8004144:	b510      	push	{r4, lr}
 8004146:	460c      	mov	r4, r1
 8004148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414c:	f000 f896 	bl	800427c <_read_r>
 8004150:	2800      	cmp	r0, #0
 8004152:	bfab      	itete	ge
 8004154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004156:	89a3      	ldrhlt	r3, [r4, #12]
 8004158:	181b      	addge	r3, r3, r0
 800415a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800415e:	bfac      	ite	ge
 8004160:	6563      	strge	r3, [r4, #84]	; 0x54
 8004162:	81a3      	strhlt	r3, [r4, #12]
 8004164:	bd10      	pop	{r4, pc}

08004166 <__swrite>:
 8004166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800416a:	461f      	mov	r7, r3
 800416c:	898b      	ldrh	r3, [r1, #12]
 800416e:	05db      	lsls	r3, r3, #23
 8004170:	4605      	mov	r5, r0
 8004172:	460c      	mov	r4, r1
 8004174:	4616      	mov	r6, r2
 8004176:	d505      	bpl.n	8004184 <__swrite+0x1e>
 8004178:	2302      	movs	r3, #2
 800417a:	2200      	movs	r2, #0
 800417c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004180:	f000 f868 	bl	8004254 <_lseek_r>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418e:	81a3      	strh	r3, [r4, #12]
 8004190:	4632      	mov	r2, r6
 8004192:	463b      	mov	r3, r7
 8004194:	4628      	mov	r0, r5
 8004196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800419a:	f000 b817 	b.w	80041cc <_write_r>

0800419e <__sseek>:
 800419e:	b510      	push	{r4, lr}
 80041a0:	460c      	mov	r4, r1
 80041a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a6:	f000 f855 	bl	8004254 <_lseek_r>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	bf15      	itete	ne
 80041b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80041b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ba:	81a3      	strheq	r3, [r4, #12]
 80041bc:	bf18      	it	ne
 80041be:	81a3      	strhne	r3, [r4, #12]
 80041c0:	bd10      	pop	{r4, pc}

080041c2 <__sclose>:
 80041c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c6:	f000 b813 	b.w	80041f0 <_close_r>
	...

080041cc <_write_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4c07      	ldr	r4, [pc, #28]	; (80041ec <_write_r+0x20>)
 80041d0:	4605      	mov	r5, r0
 80041d2:	4608      	mov	r0, r1
 80041d4:	4611      	mov	r1, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	6022      	str	r2, [r4, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	f7fc fd37 	bl	8000c4e <_write>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_write_r+0x1e>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_write_r+0x1e>
 80041e8:	602b      	str	r3, [r5, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	20000164 	.word	0x20000164

080041f0 <_close_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4c06      	ldr	r4, [pc, #24]	; (800420c <_close_r+0x1c>)
 80041f4:	2300      	movs	r3, #0
 80041f6:	4605      	mov	r5, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	f7fc fd43 	bl	8000c86 <_close>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_close_r+0x1a>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	b103      	cbz	r3, 800420a <_close_r+0x1a>
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000164 	.word	0x20000164

08004210 <_fstat_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4c07      	ldr	r4, [pc, #28]	; (8004230 <_fstat_r+0x20>)
 8004214:	2300      	movs	r3, #0
 8004216:	4605      	mov	r5, r0
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	f7fc fd3e 	bl	8000c9e <_fstat>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	d102      	bne.n	800422c <_fstat_r+0x1c>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	b103      	cbz	r3, 800422c <_fstat_r+0x1c>
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	bd38      	pop	{r3, r4, r5, pc}
 800422e:	bf00      	nop
 8004230:	20000164 	.word	0x20000164

08004234 <_isatty_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4c06      	ldr	r4, [pc, #24]	; (8004250 <_isatty_r+0x1c>)
 8004238:	2300      	movs	r3, #0
 800423a:	4605      	mov	r5, r0
 800423c:	4608      	mov	r0, r1
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	f7fc fd3d 	bl	8000cbe <_isatty>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_isatty_r+0x1a>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	b103      	cbz	r3, 800424e <_isatty_r+0x1a>
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	20000164 	.word	0x20000164

08004254 <_lseek_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4c07      	ldr	r4, [pc, #28]	; (8004274 <_lseek_r+0x20>)
 8004258:	4605      	mov	r5, r0
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	2200      	movs	r2, #0
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f7fc fd36 	bl	8000cd4 <_lseek>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_lseek_r+0x1e>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	b103      	cbz	r3, 8004272 <_lseek_r+0x1e>
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20000164 	.word	0x20000164

08004278 <__malloc_lock>:
 8004278:	4770      	bx	lr

0800427a <__malloc_unlock>:
 800427a:	4770      	bx	lr

0800427c <_read_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4c07      	ldr	r4, [pc, #28]	; (800429c <_read_r+0x20>)
 8004280:	4605      	mov	r5, r0
 8004282:	4608      	mov	r0, r1
 8004284:	4611      	mov	r1, r2
 8004286:	2200      	movs	r2, #0
 8004288:	6022      	str	r2, [r4, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f7fc fcc2 	bl	8000c14 <_read>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_read_r+0x1e>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	b103      	cbz	r3, 800429a <_read_r+0x1e>
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	20000164 	.word	0x20000164

080042a0 <_init>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr

080042ac <_fini>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr
