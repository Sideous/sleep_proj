
sleep_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800528c  0800528c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005294  08005294  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800529c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  0800530c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800530c  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c614  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d34  00000000  00000000  0002c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017103  00000000  00000000  0002fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f20  00000000  00000000  00046d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cdb7  00000000  00000000  0004fc33  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc9ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000dca68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005114 	.word	0x08005114

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005114 	.word	0x08005114

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fdc4 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f82e 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9bc 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f99a 	bl	80008c8 <MX_DMA_Init>

  //TIM3_sConfigOC ={0};
  //was MX_TIM1_Init();
  MX_TIM1_Init(&TIM1_sConfigOC);
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <main+0x50>)
 8000596:	f000 f893 	bl	80006c0 <MX_TIM1_Init>
  //was MX_TIM3_Init();
  MX_TIM3_Init(&TIM1_sConfigOC);
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <main+0x50>)
 800059c:	f000 f914 	bl	80007c8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 f968 	bl	8000874 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2 );
 80005a4:	2104      	movs	r1, #4
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0x54>)
 80005a8:	f002 f982 	bl	80028b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	480a      	ldr	r0, [pc, #40]	; (80005d8 <main+0x58>)
 80005b0:	f002 f97e 	bl	80028b0 <HAL_TIM_PWM_Start>

	printf("Starting my application...\r\n");
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <main+0x5c>)
 80005b6:	f003 fe89 	bl	80042cc <puts>

	//** Fixed size command of 3 bytes *[]#, Initialise
	//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 21);	//3); //
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9); //dma return
 80005ba:	2209      	movs	r2, #9
 80005bc:	4908      	ldr	r1, [pc, #32]	; (80005e0 <main+0x60>)
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x64>)
 80005c0:	f002 fe46 	bl	8003250 <HAL_UART_Receive_DMA>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f000 fe15 	bl	80011f4 <HAL_Delay>
	process_keystroke();
 80005ca:	f000 fad9 	bl	8000b80 <process_keystroke>
  {	HAL_Delay(100);
 80005ce:	e7f9      	b.n	80005c4 <main+0x44>
 80005d0:	20000090 	.word	0x20000090
 80005d4:	2000017c 	.word	0x2000017c
 80005d8:	20000120 	.word	0x20000120
 80005dc:	0800512c 	.word	0x0800512c
 80005e0:	20000160 	.word	0x20000160
 80005e4:	200001bc 	.word	0x200001bc

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fdd8 	bl	80041ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd4>)
 8000636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc8e 	bl	8001f94 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 fac1 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fee8 	bl	8002474 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 faab 	bl	8000c04 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(TIM_OC_InitTypeDef *sConfigOC)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
//move to be global separate for TIM1 & 3  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fd66 	bl	80041ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <MX_TIM1_Init+0x100>)
 80006e2:	4a38      	ldr	r2, [pc, #224]	; (80007c4 <MX_TIM1_Init+0x104>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_TIM1_Init+0x100>)
 80006e8:	f244 2268 	movw	r2, #17000	; 0x4268
 80006ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <MX_TIM1_Init+0x100>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80006f4:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <MX_TIM1_Init+0x100>)
 80006f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80006fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_TIM1_Init+0x100>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <MX_TIM1_Init+0x100>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <MX_TIM1_Init+0x100>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800070e:	482c      	ldr	r0, [pc, #176]	; (80007c0 <MX_TIM1_Init+0x100>)
 8000710:	f002 f8a2 	bl	8002858 <HAL_TIM_PWM_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800071a:	f000 fa73 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072a:	4619      	mov	r1, r3
 800072c:	4824      	ldr	r0, [pc, #144]	; (80007c0 <MX_TIM1_Init+0x100>)
 800072e:	f002 fbe9 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000738:	f000 fa64 	bl	8000c04 <Error_Handler>
  }

  sConfigOC->OCMode = TIM_OCMODE_PWM1;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2260      	movs	r2, #96	; 0x60
 8000740:	601a      	str	r2, [r3, #0]
  sConfigOC->Pulse = 1000;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000748:	605a      	str	r2, [r3, #4]
  sConfigOC->OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  sConfigOC->OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  sConfigOC->OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  sConfigOC->OCIdleState = TIM_OCIDLESTATE_RESET;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  sConfigOC->OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  //jvm was if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000768:	2204      	movs	r2, #4
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	4814      	ldr	r0, [pc, #80]	; (80007c0 <MX_TIM1_Init+0x100>)
 800076e:	f002 f8d1 	bl	8002914 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000778:	f000 fa44 	bl	8000c04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <MX_TIM1_Init+0x100>)
 80007a2:	f002 fc1d 	bl	8002fe0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80007ac:	f000 fa2a 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <MX_TIM1_Init+0x100>)
 80007b2:	f000 fa8f 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000017c 	.word	0x2000017c
 80007c4:	40010000 	.word	0x40010000

080007c8 <MX_TIM3_Init>:
  * @param None
  * @retval None
  */

static void MX_TIM3_Init(TIM_OC_InitTypeDef *sConfigOC)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  //jvm TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_TIM3_Init+0xa4>)
 80007dc:	4a24      	ldr	r2, [pc, #144]	; (8000870 <MX_TIM3_Init+0xa8>)
 80007de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 80007e0:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_TIM3_Init+0xa4>)
 80007e2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_TIM3_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_TIM3_Init+0xa4>)
 80007f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80007f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM3_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM3_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <MX_TIM3_Init+0xa4>)
 8000804:	f002 f828 	bl	8002858 <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 800080e:	f000 f9f9 	bl	8000c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4619      	mov	r1, r3
 8000820:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_TIM3_Init+0xa4>)
 8000822:	f002 fb6f 	bl	8002f04 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800082c:	f000 f9ea 	bl	8000c04 <Error_Handler>
  }
  sConfigOC->OCMode = TIM_OCMODE_PWM1;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2260      	movs	r2, #96	; 0x60
 8000834:	601a      	str	r2, [r3, #0]
  sConfigOC->Pulse = 1400;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800083c:	605a      	str	r2, [r3, #4]
  sConfigOC->OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  sConfigOC->OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	2200      	movs	r2, #0
 800084c:	6879      	ldr	r1, [r7, #4]
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM3_Init+0xa4>)
 8000850:	f002 f860 	bl	8002914 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800085a:	f000 f9d3 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM3_Init+0xa4>)
 8000860:	f000 fa38 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000120 	.word	0x20000120
 8000870:	40000400 	.word	0x40000400

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_USART2_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008ac:	f002 fbea 	bl	8003084 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f9a5 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001bc 	.word	0x200001bc
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_DMA_Init+0x3c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <MX_DMA_Init+0x3c>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_DMA_Init+0x3c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2010      	movs	r0, #16
 80008f0:	f000 fd7d 	bl	80013ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008f4:	2010      	movs	r0, #16
 80008f6:	f000 fd96 	bl	8001426 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a2c      	ldr	r2, [pc, #176]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_GPIO_Init+0xd0>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4812      	ldr	r0, [pc, #72]	; (80009dc <MX_GPIO_Init+0xd4>)
 8000994:	f001 fae4 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_GPIO_Init+0xd8>)
 80009a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_GPIO_Init+0xdc>)
 80009ae:	f001 f955 	bl	8001c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0xd4>)
 80009ca:	f001 f947 	bl	8001c5c <HAL_GPIO_Init>

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000
 80009e0:	10210000 	.word	0x10210000
 80009e4:	40020800 	.word	0x40020800

080009e8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009f0:	1d39      	adds	r1, r7, #4
 80009f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009f6:	2201      	movs	r2, #1
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <__io_putchar+0x20>)
 80009fa:	f002 fb90 	bl	800311e <HAL_UART_Transmit>

  return ch;
 80009fe:	687b      	ldr	r3, [r7, #4]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001bc 	.word	0x200001bc

08000a0c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	echo_ptr=rxBuf+count;
 8000a14:	4b35      	ldr	r3, [pc, #212]	; (8000aec <HAL_UART_RxCpltCallback+0xe0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a35      	ldr	r2, [pc, #212]	; (8000af4 <HAL_UART_RxCpltCallback+0xe8>)
 8000a20:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <HAL_UART_RxCpltCallback+0xe8>)
 8000a24:	6819      	ldr	r1, [r3, #0]
 8000a26:	230a      	movs	r3, #10
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4833      	ldr	r0, [pc, #204]	; (8000af8 <HAL_UART_RxCpltCallback+0xec>)
 8000a2c:	f002 fb77 	bl	800311e <HAL_UART_Transmit>
	printf("\r\n");
 8000a30:	4832      	ldr	r0, [pc, #200]	; (8000afc <HAL_UART_RxCpltCallback+0xf0>)
 8000a32:	f003 fc4b 	bl	80042cc <puts>
	switch(myUART_State)
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <HAL_UART_RxCpltCallback+0xf4>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <HAL_UART_RxCpltCallback+0x38>
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d037      	beq.n	8000ab2 <HAL_UART_RxCpltCallback+0xa6>
 8000a42:	e047      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0xc8>
	{
		case UT_START:
			if(rxBuf[0] == '*' && rxBuf[2] == '#')
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b2a      	cmp	r3, #42	; 0x2a
 8000a4a:	d128      	bne.n	8000a9e <HAL_UART_RxCpltCallback+0x92>
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	2b23      	cmp	r3, #35	; 0x23
 8000a52:	d124      	bne.n	8000a9e <HAL_UART_RxCpltCallback+0x92>
			{
				//Start UART DMA receive based on User specified length (Caviat: always ensure user requested)
				rxBuf[1]=rxBuf[1]-'0';
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	3b30      	subs	r3, #48	; 0x30
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a5e:	705a      	strb	r2, [r3, #1]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	2b19      	cmp	r3, #25
 8000a66:	d811      	bhi.n	8000a8c <HAL_UART_RxCpltCallback+0x80>
				{
					printf("Send CMD %i characters long:\r\n", rxBuf[1]);
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a6a:	785b      	ldrb	r3, [r3, #1]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4825      	ldr	r0, [pc, #148]	; (8000b04 <HAL_UART_RxCpltCallback+0xf8>)
 8000a70:	f003 fba4 	bl	80041bc <iprintf>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, rxBuf[1]);
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	491c      	ldr	r1, [pc, #112]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a7e:	481e      	ldr	r0, [pc, #120]	; (8000af8 <HAL_UART_RxCpltCallback+0xec>)
 8000a80:	f002 fbe6 	bl	8003250 <HAL_UART_Receive_DMA>
					myUART_State = UT_APP;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_UART_RxCpltCallback+0xf4>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a8a:	e011      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0xa4>
				}
				else
				{
					printf("Invalid size\r\n");
 8000a8c:	481e      	ldr	r0, [pc, #120]	; (8000b08 <HAL_UART_RxCpltCallback+0xfc>)
 8000a8e:	f003 fc1d 	bl	80042cc <puts>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000a92:	2203      	movs	r2, #3
 8000a94:	4916      	ldr	r1, [pc, #88]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <HAL_UART_RxCpltCallback+0xec>)
 8000a98:	f002 fbda 	bl	8003250 <HAL_UART_Receive_DMA>
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a9c:	e008      	b.n	8000ab0 <HAL_UART_RxCpltCallback+0xa4>
				}
			}
			else
			{
				printf("Invalid command\r\n");
 8000a9e:	481b      	ldr	r0, [pc, #108]	; (8000b0c <HAL_UART_RxCpltCallback+0x100>)
 8000aa0:	f003 fc14 	bl	80042cc <puts>
				HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	4912      	ldr	r1, [pc, #72]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <HAL_UART_RxCpltCallback+0xec>)
 8000aaa:	f002 fbd1 	bl	8003250 <HAL_UART_Receive_DMA>
			}
			break;
 8000aae:	e011      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0xc8>
 8000ab0:	e010      	b.n	8000ad4 <HAL_UART_RxCpltCallback+0xc8>

		case UT_APP:
			application_handling(rxBuf);
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000ab4:	f000 f82c 	bl	8000b10 <application_handling>
			memset(rxBuf,'\0', sizeof(rxBuf));
 8000ab8:	2219      	movs	r2, #25
 8000aba:	2100      	movs	r1, #0
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000abe:	f003 fb75 	bl	80041ac <memset>
			//Get back to state 1
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	490a      	ldr	r1, [pc, #40]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_UART_RxCpltCallback+0xec>)
 8000ac8:	f002 fbc2 	bl	8003250 <HAL_UART_Receive_DMA>
			myUART_State = UT_START;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_UART_RxCpltCallback+0xf4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
			break;
 8000ad2:	bf00      	nop
	}

//resets index for echo
	memset(rxBuf,'\0', sizeof(rxBuf));
 8000ad4:	2219      	movs	r2, #25
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_RxCpltCallback+0xe4>)
 8000ada:	f003 fb67 	bl	80041ac <memset>
	count=0;
 8000ade:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_UART_RxCpltCallback+0xe0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]

}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000008c 	.word	0x2000008c
 8000af0:	20000160 	.word	0x20000160
 8000af4:	2000011c 	.word	0x2000011c
 8000af8:	200001bc 	.word	0x200001bc
 8000afc:	08005148 	.word	0x08005148
 8000b00:	200000ac 	.word	0x200000ac
 8000b04:	0800514c 	.word	0x0800514c
 8000b08:	0800516c 	.word	0x0800516c
 8000b0c:	0800517c 	.word	0x0800517c

08000b10 <application_handling>:


//UART Application handling function
void application_handling(char *cmd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 8000b18:	4913      	ldr	r1, [pc, #76]	; (8000b68 <application_handling+0x58>)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f003 fbde 	bl	80042dc <strstr>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d008      	beq.n	8000b38 <application_handling+0x28>
	{
		//Turn LED ON (GPIOA, GPIO_PIN_5);
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2120      	movs	r1, #32
 8000b2a:	4810      	ldr	r0, [pc, #64]	; (8000b6c <application_handling+0x5c>)
 8000b2c:	f001 fa18 	bl	8001f60 <HAL_GPIO_WritePin>
		printf("LED Turned ON\r\n");
 8000b30:	480f      	ldr	r0, [pc, #60]	; (8000b70 <application_handling+0x60>)
 8000b32:	f003 fbcb 	bl	80042cc <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 8000b36:	e012      	b.n	8000b5e <application_handling+0x4e>
	else if(strstr(cmd, "LED OFF") != NULL)
 8000b38:	490e      	ldr	r1, [pc, #56]	; (8000b74 <application_handling+0x64>)
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f003 fbce 	bl	80042dc <strstr>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <application_handling+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2120      	movs	r1, #32
 8000b4a:	4808      	ldr	r0, [pc, #32]	; (8000b6c <application_handling+0x5c>)
 8000b4c:	f001 fa08 	bl	8001f60 <HAL_GPIO_WritePin>
		printf("LED Turned OFF\r\n");
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <application_handling+0x68>)
 8000b52:	f003 fbbb 	bl	80042cc <puts>
}
 8000b56:	e002      	b.n	8000b5e <application_handling+0x4e>
		printf("Invalid Command!\r\n");
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <application_handling+0x6c>)
 8000b5a:	f003 fbb7 	bl	80042cc <puts>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	08005190 	.word	0x08005190
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	08005198 	.word	0x08005198
 8000b74:	080051a8 	.word	0x080051a8
 8000b78:	080051b0 	.word	0x080051b0
 8000b7c:	080051c0 	.word	0x080051c0

08000b80 <process_keystroke>:
/*
 * function will echo last keystroke, if '\n' it will see if it is a valid command
 */
void process_keystroke()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	if(rxBuf[count] != '\0')
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <process_keystroke+0x74>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <process_keystroke+0x78>)
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d02f      	beq.n	8000bf0 <process_keystroke+0x70>
	{	echo_ptr=rxBuf+count;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <process_keystroke+0x74>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <process_keystroke+0x78>)
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <process_keystroke+0x7c>)
 8000b9c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <process_keystroke+0x7c>)
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4816      	ldr	r0, [pc, #88]	; (8000c00 <process_keystroke+0x80>)
 8000ba8:	f002 fab9 	bl	800311e <HAL_UART_Transmit>

		if(rxBuf[count] == '\r')
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <process_keystroke+0x74>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <process_keystroke+0x78>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	2b0d      	cmp	r3, #13
 8000bb6:	d116      	bne.n	8000be6 <process_keystroke+0x66>
		{	//command may have been submitted.
			printf("\n");
 8000bb8:	200a      	movs	r0, #10
 8000bba:	f003 fb17 	bl	80041ec <putchar>
			application_handling(rxBuf);
 8000bbe:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <process_keystroke+0x78>)
 8000bc0:	f7ff ffa6 	bl	8000b10 <application_handling>
			HAL_UART_DMAStop(&huart2);
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <process_keystroke+0x80>)
 8000bc6:	f002 fbc3 	bl	8003350 <HAL_UART_DMAStop>

			//printf("Message!\r\n");
		//	MX_DMA_Init();
			//MX_USART2_UART_Init();
			//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 7); //dma return
			memset(rxBuf,'\0', sizeof(rxBuf));
 8000bca:	2219      	movs	r2, #25
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <process_keystroke+0x78>)
 8000bd0:	f003 faec 	bl	80041ac <memset>
			count=0;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <process_keystroke+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9);
 8000bda:	2209      	movs	r2, #9
 8000bdc:	4906      	ldr	r1, [pc, #24]	; (8000bf8 <process_keystroke+0x78>)
 8000bde:	4808      	ldr	r0, [pc, #32]	; (8000c00 <process_keystroke+0x80>)
 8000be0:	f002 fb36 	bl	8003250 <HAL_UART_Receive_DMA>
		}
		else
			count++;
	}

}
 8000be4:	e004      	b.n	8000bf0 <process_keystroke+0x70>
			count++;
 8000be6:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <process_keystroke+0x74>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	4a01      	ldr	r2, [pc, #4]	; (8000bf4 <process_keystroke+0x74>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2000008c 	.word	0x2000008c
 8000bf8:	20000160 	.word	0x20000160
 8000bfc:	2000011c 	.word	0x2000011c
 8000c00:	200001bc 	.word	0x200001bc

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c52:	2007      	movs	r0, #7
 8000c54:	f000 fbc0 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <HAL_TIM_PWM_MspInit+0x64>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10e      	bne.n	8000c94 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <HAL_TIM_PWM_MspInit+0x68>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <HAL_TIM_PWM_MspInit+0x68>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_TIM_PWM_MspInit+0x68>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c92:	e012      	b.n	8000cba <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_TIM_PWM_MspInit+0x6c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10d      	bne.n	8000cba <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_TIM_PWM_MspInit+0x68>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a09      	ldr	r2, [pc, #36]	; (8000ccc <HAL_TIM_PWM_MspInit+0x68>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <HAL_TIM_PWM_MspInit+0x68>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <HAL_TIM_MspPostInit+0xb0>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d11f      	bne.n	8000d36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_TIM_MspPostInit+0xb4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_TIM_MspPostInit+0xb4>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_TIM_MspPostInit+0xb4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4817      	ldr	r0, [pc, #92]	; (8000d8c <HAL_TIM_MspPostInit+0xb8>)
 8000d30:	f000 ff94 	bl	8001c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d34:	e022      	b.n	8000d7c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <HAL_TIM_MspPostInit+0xbc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d11d      	bne.n	8000d7c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_TIM_MspPostInit+0xb4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_TIM_MspPostInit+0xb4>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_TIM_MspPostInit+0xb4>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_TIM_MspPostInit+0xb8>)
 8000d78:	f000 ff70 	bl	8001c5c <HAL_GPIO_Init>
}
 8000d7c:	bf00      	nop
 8000d7e:	3728      	adds	r7, #40	; 0x28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40000400 	.word	0x40000400

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <HAL_UART_MspInit+0xf0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d162      	bne.n	8000e7c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a32      	ldr	r2, [pc, #200]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_UART_MspInit+0xf4>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dee:	230c      	movs	r3, #12
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4820      	ldr	r0, [pc, #128]	; (8000e8c <HAL_UART_MspInit+0xf8>)
 8000e0a:	f000 ff27 	bl	8001c5c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <HAL_UART_MspInit+0x100>)
 8000e12:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e42:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e52:	f000 fb03 	bl	800145c <HAL_DMA_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e5c:	f7ff fed2 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_UART_MspInit+0xfc>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2026      	movs	r0, #38	; 0x26
 8000e72:	f000 fabc 	bl	80013ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	; 0x26
 8000e78:	f000 fad5 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	40026088 	.word	0x40026088

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f962 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <DMA1_Stream5_IRQHandler+0x10>)
 8000efa:	f000 fc47 	bl	800178c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000bc 	.word	0x200000bc

08000f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <USART2_IRQHandler+0x10>)
 8000f0e:	f002 fa7b 	bl	8003408 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200001bc 	.word	0x200001bc

08000f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e009      	b.n	8000f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fd39 	bl	80009e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbf1      	blt.n	8000f68 <_write+0x12>
	}
	return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <_close>:

int _close(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <_isatty>:

int _isatty(int file)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x50>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x16>
		heap_end = &end;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <_sbrk+0x50>)
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <_sbrk+0x54>)
 800100c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <_sbrk+0x50>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <_sbrk+0x50>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	466a      	mov	r2, sp
 800101e:	4293      	cmp	r3, r2
 8001020:	d907      	bls.n	8001032 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001022:	f003 f899 	bl	8004158 <__errno>
 8001026:	4602      	mov	r2, r0
 8001028:	230c      	movs	r3, #12
 800102a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	e006      	b.n	8001040 <_sbrk+0x48>
	}

	heap_end += incr;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <_sbrk+0x50>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <_sbrk+0x50>)
 800103c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000b0 	.word	0x200000b0
 800104c:	20000208 	.word	0x20000208

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <SystemInit+0x60>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <SystemInit+0x60>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <SystemInit+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <SystemInit+0x64>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <SystemInit+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <SystemInit+0x64>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <SystemInit+0x64>)
 800107c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <SystemInit+0x64>)
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <SystemInit+0x68>)
 800108a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <SystemInit+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <SystemInit+0x64>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SystemInit+0x60>)
 80010a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a4:	609a      	str	r2, [r3, #8]
#endif
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00
 80010b4:	40023800 	.word	0x40023800
 80010b8:	24003010 	.word	0x24003010

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010c2:	e003      	b.n	80010cc <LoopCopyDataInit>

080010c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ca:	3104      	adds	r1, #4

080010cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d4:	d3f6      	bcc.n	80010c4 <CopyDataInit>
  ldr  r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010d8:	e002      	b.n	80010e0 <LoopFillZerobss>

080010da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010dc:	f842 3b04 	str.w	r3, [r2], #4

080010e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e4:	d3f9      	bcc.n	80010da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010e6:	f7ff ffb3 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f003 f83b 	bl	8004164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fa47 	bl	8000580 <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80010f8:	0800529c 	.word	0x0800529c
  ldr  r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001100:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001104:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001108:	20000204 	.word	0x20000204

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_Init+0x40>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_Init+0x40>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x40>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f94d 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fd66 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023c00 	.word	0x40023c00

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f965 	bl	8001442 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f92d 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	200001fc 	.word	0x200001fc

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200001fc 	.word	0x200001fc

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_Delay+0x40>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000008 	.word	0x20000008

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4907      	ldr	r1, [pc, #28]	; (80012d4 <__NVIC_EnableIRQ+0x38>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db0a      	blt.n	8001302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	490c      	ldr	r1, [pc, #48]	; (8001324 <__NVIC_SetPriority+0x4c>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	0112      	lsls	r2, r2, #4
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	440b      	add	r3, r1
 80012fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001300:	e00a      	b.n	8001318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <__NVIC_SetPriority+0x50>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	3b04      	subs	r3, #4
 8001310:	0112      	lsls	r2, r2, #4
 8001312:	b2d2      	uxtb	r2, r2
 8001314:	440b      	add	r3, r1
 8001316:	761a      	strb	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000e100 	.word	0xe000e100
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f1c3 0307 	rsb	r3, r3, #7
 8001346:	2b04      	cmp	r3, #4
 8001348:	bf28      	it	cs
 800134a:	2304      	movcs	r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3304      	adds	r3, #4
 8001352:	2b06      	cmp	r3, #6
 8001354:	d902      	bls.n	800135c <NVIC_EncodePriority+0x30>
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3b03      	subs	r3, #3
 800135a:	e000      	b.n	800135e <NVIC_EncodePriority+0x32>
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	f04f 32ff 	mov.w	r2, #4294967295
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43da      	mvns	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	43d9      	mvns	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	4313      	orrs	r3, r2
         );
}
 8001386:	4618      	mov	r0, r3
 8001388:	3724      	adds	r7, #36	; 0x24
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff8e 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff29 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff3e 	bl	8001280 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff8e 	bl	800132c <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa2 	bl	8001394 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff feb8 	bl	80011dc <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e099      	b.n	80015ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001498:	e00f      	b.n	80014ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800149a:	f7ff fe9f 	bl	80011dc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d908      	bls.n	80014ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e078      	b.n	80015ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1e8      	bne.n	800149a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_DMA_Init+0x158>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	2b04      	cmp	r3, #4
 8001512:	d107      	bne.n	8001524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4313      	orrs	r3, r2
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f023 0307 	bic.w	r3, r3, #7
 800153a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	4313      	orrs	r3, r2
 8001544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2b04      	cmp	r3, #4
 800154c:	d117      	bne.n	800157e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00e      	beq.n	800157e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fb01 	bl	8001b68 <DMA_CheckFifoParam>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2240      	movs	r2, #64	; 0x40
 8001570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800157a:	2301      	movs	r3, #1
 800157c:	e016      	b.n	80015ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fab8 	bl	8001afc <DMA_CalcBaseAndBitshift>
 800158c:	4603      	mov	r3, r0
 800158e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	223f      	movs	r2, #63	; 0x3f
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	f010803f 	.word	0xf010803f

080015b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_DMA_Start_IT+0x26>
 80015da:	2302      	movs	r3, #2
 80015dc:	e040      	b.n	8001660 <HAL_DMA_Start_IT+0xa8>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d12f      	bne.n	8001652 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 fa4a 	bl	8001aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001610:	223f      	movs	r2, #63	; 0x3f
 8001612:	409a      	lsls	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0216 	orr.w	r2, r2, #22
 8001626:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0208 	orr.w	r2, r2, #8
 800163e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e005      	b.n	800165e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800165a:	2302      	movs	r3, #2
 800165c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800165e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001676:	f7ff fdb1 	bl	80011dc <HAL_GetTick>
 800167a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d008      	beq.n	800169a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e052      	b.n	8001740 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0216 	bic.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_DMA_Abort+0x62>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0208 	bic.w	r2, r2, #8
 80016d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	e013      	b.n	8001714 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ec:	f7ff fd76 	bl	80011dc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d90c      	bls.n	8001714 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2203      	movs	r2, #3
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e015      	b.n	8001740 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1e4      	bne.n	80016ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	223f      	movs	r2, #63	; 0x3f
 8001728:	409a      	lsls	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d004      	beq.n	8001766 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e00c      	b.n	8001780 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2205      	movs	r2, #5
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001798:	4b92      	ldr	r3, [pc, #584]	; (80019e4 <HAL_DMA_IRQHandler+0x258>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a92      	ldr	r2, [pc, #584]	; (80019e8 <HAL_DMA_IRQHandler+0x25c>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0a9b      	lsrs	r3, r3, #10
 80017a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b6:	2208      	movs	r2, #8
 80017b8:	409a      	lsls	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01a      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0204 	bic.w	r2, r2, #4
 80017de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e4:	2208      	movs	r2, #8
 80017e6:	409a      	lsls	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	2201      	movs	r2, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d012      	beq.n	800182e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	2201      	movs	r2, #1
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f043 0202 	orr.w	r2, r3, #2
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	2204      	movs	r2, #4
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d012      	beq.n	8001864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00b      	beq.n	8001864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	2204      	movs	r2, #4
 8001852:	409a      	lsls	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185c:	f043 0204 	orr.w	r2, r3, #4
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	2210      	movs	r2, #16
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d043      	beq.n	80018fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03c      	beq.n	80018fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2210      	movs	r2, #16
 8001888:	409a      	lsls	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d018      	beq.n	80018ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d108      	bne.n	80018bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d024      	beq.n	80018fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
 80018ba:	e01f      	b.n	80018fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01b      	beq.n	80018fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	4798      	blx	r3
 80018cc:	e016      	b.n	80018fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d107      	bne.n	80018ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0208 	bic.w	r2, r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2220      	movs	r2, #32
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 808e 	beq.w	8001a2a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8086 	beq.w	8001a2a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2220      	movs	r2, #32
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b05      	cmp	r3, #5
 8001934:	d136      	bne.n	80019a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0216 	bic.w	r2, r2, #22
 8001944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d103      	bne.n	8001966 <HAL_DMA_IRQHandler+0x1da>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0208 	bic.w	r2, r2, #8
 8001974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	223f      	movs	r2, #63	; 0x3f
 800197c:	409a      	lsls	r2, r3
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001996:	2b00      	cmp	r3, #0
 8001998:	d07d      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
        }
        return;
 80019a2:	e078      	b.n	8001a96 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01c      	beq.n	80019ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d108      	bne.n	80019d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d030      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
 80019d0:	e02b      	b.n	8001a2a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d027      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	4798      	blx	r3
 80019e2:	e022      	b.n	8001a2a <HAL_DMA_IRQHandler+0x29e>
 80019e4:	20000000 	.word	0x20000000
 80019e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0210 	bic.w	r2, r2, #16
 8001a08:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d032      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d022      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2205      	movs	r2, #5
 8001a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d307      	bcc.n	8001a72 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f2      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x2ca>
 8001a70:	e000      	b.n	8001a74 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a72:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
 8001a94:	e000      	b.n	8001a98 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a96:	bf00      	nop
    }
  }
}
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop

08001aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d108      	bne.n	8001ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ade:	e007      	b.n	8001af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3b10      	subs	r3, #16
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <DMA_CalcBaseAndBitshift+0x64>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <DMA_CalcBaseAndBitshift+0x68>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d909      	bls.n	8001b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	1d1a      	adds	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b3c:	e007      	b.n	8001b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	aaaaaaab 	.word	0xaaaaaaab
 8001b64:	080051ec 	.word	0x080051ec

08001b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11f      	bne.n	8001bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d855      	bhi.n	8001c34 <DMA_CheckFifoParam+0xcc>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <DMA_CheckFifoParam+0x28>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001bb3 	.word	0x08001bb3
 8001b98:	08001ba1 	.word	0x08001ba1
 8001b9c:	08001c35 	.word	0x08001c35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d045      	beq.n	8001c38 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb0:	e042      	b.n	8001c38 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bba:	d13f      	bne.n	8001c3c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc0:	e03c      	b.n	8001c3c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bca:	d121      	bne.n	8001c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d836      	bhi.n	8001c40 <DMA_CheckFifoParam+0xd8>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <DMA_CheckFifoParam+0x70>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001bef 	.word	0x08001bef
 8001be0:	08001be9 	.word	0x08001be9
 8001be4:	08001c01 	.word	0x08001c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
      break;
 8001bec:	e02f      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d024      	beq.n	8001c44 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfe:	e021      	b.n	8001c44 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c08:	d11e      	bne.n	8001c48 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c0e:	e01b      	b.n	8001c48 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d902      	bls.n	8001c1c <DMA_CheckFifoParam+0xb4>
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d003      	beq.n	8001c22 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c1a:	e018      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c20:	e015      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00e      	beq.n	8001c4c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
      break;
 8001c32:	e00b      	b.n	8001c4c <DMA_CheckFifoParam+0xe4>
      break;
 8001c34:	bf00      	nop
 8001c36:	e00a      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;
 8001c38:	bf00      	nop
 8001c3a:	e008      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;
 8001c3c:	bf00      	nop
 8001c3e:	e006      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;
 8001c40:	bf00      	nop
 8001c42:	e004      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;
 8001c44:	bf00      	nop
 8001c46:	e002      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;   
 8001c48:	bf00      	nop
 8001c4a:	e000      	b.n	8001c4e <DMA_CheckFifoParam+0xe6>
      break;
 8001c4c:	bf00      	nop
    }
  } 
  
  return status; 
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e159      	b.n	8001f2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c78:	2201      	movs	r2, #1
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	f040 8148 	bne.w	8001f26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_GPIO_Init+0x5a>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001caa:	2b11      	cmp	r3, #17
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b12      	cmp	r3, #18
 8001cb4:	d130      	bne.n	8001d18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0xfc>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d123      	bne.n	8001da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3208      	adds	r2, #8
 8001d9a:	69b9      	ldr	r1, [r7, #24]
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	2203      	movs	r2, #3
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a2 	beq.w	8001f26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df0:	6453      	str	r3, [r2, #68]	; 0x44
 8001df2:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <HAL_GPIO_Init+0x2e4>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dfe:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a48      	ldr	r2, [pc, #288]	; (8001f48 <HAL_GPIO_Init+0x2ec>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d019      	beq.n	8001e5e <HAL_GPIO_Init+0x202>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a47      	ldr	r2, [pc, #284]	; (8001f4c <HAL_GPIO_Init+0x2f0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d013      	beq.n	8001e5a <HAL_GPIO_Init+0x1fe>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a46      	ldr	r2, [pc, #280]	; (8001f50 <HAL_GPIO_Init+0x2f4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d00d      	beq.n	8001e56 <HAL_GPIO_Init+0x1fa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <HAL_GPIO_Init+0x2f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d007      	beq.n	8001e52 <HAL_GPIO_Init+0x1f6>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a44      	ldr	r2, [pc, #272]	; (8001f58 <HAL_GPIO_Init+0x2fc>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_GPIO_Init+0x1f2>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e008      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e4e:	2307      	movs	r3, #7
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e52:	2303      	movs	r3, #3
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x204>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	f002 0203 	and.w	r2, r2, #3
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e70:	4934      	ldr	r1, [pc, #208]	; (8001f44 <HAL_GPIO_Init+0x2e8>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e7e:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ecc:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef6:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f20:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_GPIO_Init+0x300>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0f      	cmp	r3, #15
 8001f30:	f67f aea2 	bls.w	8001c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f34:	bf00      	nop
 8001f36:	3724      	adds	r7, #36	; 0x24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e25b      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d075      	beq.n	800209e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fb2:	4ba3      	ldr	r3, [pc, #652]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d00c      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4ba0      	ldr	r3, [pc, #640]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d112      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4b9d      	ldr	r3, [pc, #628]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d05b      	beq.n	800209c <HAL_RCC_OscConfig+0x108>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d157      	bne.n	800209c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e236      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x74>
 8001ffa:	4b91      	ldr	r3, [pc, #580]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a90      	ldr	r2, [pc, #576]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a8a      	ldr	r2, [pc, #552]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a87      	ldr	r2, [pc, #540]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xb0>
 800202c:	4b84      	ldr	r3, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a83      	ldr	r2, [pc, #524]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a80      	ldr	r2, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f8c6 	bl	80011dc <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f8c2 	bl	80011dc <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1fb      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xc0>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f8b2 	bl	80011dc <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f8ae 	bl	80011dc <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1e7      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0xe8>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020aa:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1bb      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b56      	ldr	r3, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4952      	ldr	r1, [pc, #328]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCC_OscConfig+0x2b0>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7ff f867 	bl	80011dc <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff f863 	bl	80011dc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e19c      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4940      	ldr	r1, [pc, #256]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_OscConfig+0x2b0>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f846 	bl	80011dc <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff f842 	bl	80011dc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e17b      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d030      	beq.n	80021e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_OscConfig+0x2b4>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f826 	bl	80011dc <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff f822 	bl	80011dc <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e15b      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x200>
 80021b2:	e015      	b.n	80021e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_OscConfig+0x2b4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff f80f 	bl	80011dc <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7ff f80b 	bl	80011dc <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e144      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f0      	bne.n	80021c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a0 	beq.w	800232e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a0e      	ldr	r2, [pc, #56]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d121      	bne.n	800226e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_RCC_OscConfig+0x2b8>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7fe ffd1 	bl	80011dc <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e011      	b.n	8002262 <HAL_RCC_OscConfig+0x2ce>
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
 800224c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7fe ffc4 	bl	80011dc <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0fd      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x4d4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 8002276:	4b7d      	ldr	r3, [pc, #500]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a7c      	ldr	r2, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x32a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 800228c:	4b77      	ldr	r3, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a76      	ldr	r2, [pc, #472]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
 8002298:	4b74      	ldr	r3, [pc, #464]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a73      	ldr	r2, [pc, #460]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x32a>
 80022a6:	4b71      	ldr	r3, [pc, #452]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022aa:	4a70      	ldr	r2, [pc, #448]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6713      	str	r3, [r2, #112]	; 0x70
 80022b2:	4b6e      	ldr	r3, [pc, #440]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a6d      	ldr	r2, [pc, #436]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe ff89 	bl	80011dc <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe ff85 	bl	80011dc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0bc      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x33a>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe ff73 	bl	80011dc <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe ff6f 	bl	80011dc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0a6      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b56      	ldr	r3, [pc, #344]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b52      	ldr	r3, [pc, #328]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a51      	ldr	r2, [pc, #324]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8092 	beq.w	800245c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002338:	4b4c      	ldr	r3, [pc, #304]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d05c      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d141      	bne.n	80023d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_RCC_OscConfig+0x4dc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe ff43 	bl	80011dc <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe ff3f 	bl	80011dc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e078      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236c:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	4933      	ldr	r1, [pc, #204]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <HAL_RCC_OscConfig+0x4dc>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe ff18 	bl	80011dc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe ff14 	bl	80011dc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04d      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x41c>
 80023ce:	e045      	b.n	800245c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x4dc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe ff01 	bl	80011dc <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fefd 	bl	80011dc <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e036      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x44a>
 80023fc:	e02e      	b.n	800245c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e029      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_RCC_OscConfig+0x4d8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	429a      	cmp	r2, r3
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d115      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002432:	4013      	ands	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002438:	4293      	cmp	r3, r2
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40007000 	.word	0x40007000
 800246c:	40023800 	.word	0x40023800
 8002470:	42470060 	.word	0x42470060

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0cc      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d90c      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b65      	ldr	r3, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d044      	beq.n	8002594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d119      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	2b03      	cmp	r3, #3
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002532:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e067      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4934      	ldr	r1, [pc, #208]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002564:	f7fe fe3a 	bl	80011dc <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7fe fe36 	bl	80011dc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e04f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 020c 	and.w	r2, r3, #12
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	429a      	cmp	r2, r3
 8002592:	d1eb      	bne.n	800256c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4601      	mov	r1, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	fa21 f303 	lsr.w	r3, r1, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd9a 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023c00 	.word	0x40023c00
 8002630:	40023800 	.word	0x40023800
 8002634:	080051d4 	.word	0x080051d4
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b04      	cmp	r3, #4
 8002660:	d007      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x32>
 8002662:	2b08      	cmp	r3, #8
 8002664:	d008      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x38>
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 80b4 	bne.w	80027d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800266e:	60bb      	str	r3, [r7, #8]
       break;
 8002670:	e0b3      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002672:	4b5e      	ldr	r3, [pc, #376]	; (80027ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002674:	60bb      	str	r3, [r7, #8]
      break;
 8002676:	e0b0      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002678:	4b5a      	ldr	r3, [pc, #360]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002682:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d04a      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268e:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	ea03 0501 	and.w	r5, r3, r1
 80026a4:	ea04 0602 	and.w	r6, r4, r2
 80026a8:	4629      	mov	r1, r5
 80026aa:	4632      	mov	r2, r6
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f04f 0400 	mov.w	r4, #0
 80026b4:	0154      	lsls	r4, r2, #5
 80026b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ba:	014b      	lsls	r3, r1, #5
 80026bc:	4619      	mov	r1, r3
 80026be:	4622      	mov	r2, r4
 80026c0:	1b49      	subs	r1, r1, r5
 80026c2:	eb62 0206 	sbc.w	r2, r2, r6
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f04f 0400 	mov.w	r4, #0
 80026ce:	0194      	lsls	r4, r2, #6
 80026d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026d4:	018b      	lsls	r3, r1, #6
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	eb64 0402 	sbc.w	r4, r4, r2
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	00e2      	lsls	r2, r4, #3
 80026e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026ea:	00d9      	lsls	r1, r3, #3
 80026ec:	460b      	mov	r3, r1
 80026ee:	4614      	mov	r4, r2
 80026f0:	195b      	adds	r3, r3, r5
 80026f2:	eb44 0406 	adc.w	r4, r4, r6
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	0262      	lsls	r2, r4, #9
 8002700:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002704:	0259      	lsls	r1, r3, #9
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	4618      	mov	r0, r3
 800270c:	4621      	mov	r1, r4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	f7fd fdb2 	bl	8000280 <__aeabi_uldivmod>
 800271c:	4603      	mov	r3, r0
 800271e:	460c      	mov	r4, r1
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e049      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002724:	4b2f      	ldr	r3, [pc, #188]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	099b      	lsrs	r3, r3, #6
 800272a:	f04f 0400 	mov.w	r4, #0
 800272e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	ea03 0501 	and.w	r5, r3, r1
 800273a:	ea04 0602 	and.w	r6, r4, r2
 800273e:	4629      	mov	r1, r5
 8002740:	4632      	mov	r2, r6
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f04f 0400 	mov.w	r4, #0
 800274a:	0154      	lsls	r4, r2, #5
 800274c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002750:	014b      	lsls	r3, r1, #5
 8002752:	4619      	mov	r1, r3
 8002754:	4622      	mov	r2, r4
 8002756:	1b49      	subs	r1, r1, r5
 8002758:	eb62 0206 	sbc.w	r2, r2, r6
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f04f 0400 	mov.w	r4, #0
 8002764:	0194      	lsls	r4, r2, #6
 8002766:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800276a:	018b      	lsls	r3, r1, #6
 800276c:	1a5b      	subs	r3, r3, r1
 800276e:	eb64 0402 	sbc.w	r4, r4, r2
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	00e2      	lsls	r2, r4, #3
 800277c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002780:	00d9      	lsls	r1, r3, #3
 8002782:	460b      	mov	r3, r1
 8002784:	4614      	mov	r4, r2
 8002786:	195b      	adds	r3, r3, r5
 8002788:	eb44 0406 	adc.w	r4, r4, r6
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	02a2      	lsls	r2, r4, #10
 8002796:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800279a:	0299      	lsls	r1, r3, #10
 800279c:	460b      	mov	r3, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	4621      	mov	r1, r4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	f7fd fd67 	bl	8000280 <__aeabi_uldivmod>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	60bb      	str	r3, [r7, #8]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027d6:	60bb      	str	r3, [r7, #8]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	68bb      	ldr	r3, [r7, #8]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200

080027f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCC_GetHCLKFreq+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000000 	.word	0x20000000

08002808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800280c:	f7ff fff0 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002810:	4601      	mov	r1, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0a9b      	lsrs	r3, r3, #10
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_RCC_GetPCLK1Freq+0x24>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	080051e4 	.word	0x080051e4

08002830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002834:	f7ff ffdc 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002838:	4601      	mov	r1, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0b5b      	lsrs	r3, r3, #13
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	080051e4 	.word	0x080051e4

08002858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e01d      	b.n	80028a6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe f9f0 	bl	8000c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f000 f902 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2201      	movs	r2, #1
 80028c0:	6839      	ldr	r1, [r7, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 faf8 	bl	8002eb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_TIM_PWM_Start+0x60>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d107      	bne.n	80028e2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b06      	cmp	r3, #6
 80028f2:	d007      	beq.n	8002904 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40010000 	.word	0x40010000

08002914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800292a:	2302      	movs	r3, #2
 800292c:	e0b4      	b.n	8002a98 <HAL_TIM_PWM_ConfigChannel+0x184>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2202      	movs	r2, #2
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	f200 809f 	bhi.w	8002a84 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	08002981 	.word	0x08002981
 8002950:	08002a85 	.word	0x08002a85
 8002954:	08002a85 	.word	0x08002a85
 8002958:	08002a85 	.word	0x08002a85
 800295c:	080029c1 	.word	0x080029c1
 8002960:	08002a85 	.word	0x08002a85
 8002964:	08002a85 	.word	0x08002a85
 8002968:	08002a85 	.word	0x08002a85
 800296c:	08002a03 	.word	0x08002a03
 8002970:	08002a85 	.word	0x08002a85
 8002974:	08002a85 	.word	0x08002a85
 8002978:	08002a85 	.word	0x08002a85
 800297c:	08002a43 	.word	0x08002a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f90a 	bl	8002ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0204 	bic.w	r2, r2, #4
 80029aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6999      	ldr	r1, [r3, #24]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	619a      	str	r2, [r3, #24]
      break;
 80029be:	e062      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f950 	bl	8002c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6999      	ldr	r1, [r3, #24]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	021a      	lsls	r2, r3, #8
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	619a      	str	r2, [r3, #24]
      break;
 8002a00:	e041      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f99b 	bl	8002d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0208 	orr.w	r2, r2, #8
 8002a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0204 	bic.w	r2, r2, #4
 8002a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69d9      	ldr	r1, [r3, #28]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	61da      	str	r2, [r3, #28]
      break;
 8002a40:	e021      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f9e5 	bl	8002e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69d9      	ldr	r1, [r3, #28]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	021a      	lsls	r2, r3, #8
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	61da      	str	r2, [r3, #28]
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a84:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a34      	ldr	r2, [pc, #208]	; (8002b84 <TIM_Base_SetConfig+0xe4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00f      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d00b      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a31      	ldr	r2, [pc, #196]	; (8002b88 <TIM_Base_SetConfig+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <TIM_Base_SetConfig+0xec>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d003      	beq.n	8002ad8 <TIM_Base_SetConfig+0x38>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <TIM_Base_SetConfig+0xf0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d108      	bne.n	8002aea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a25      	ldr	r2, [pc, #148]	; (8002b84 <TIM_Base_SetConfig+0xe4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01b      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af8:	d017      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <TIM_Base_SetConfig+0xe8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a21      	ldr	r2, [pc, #132]	; (8002b8c <TIM_Base_SetConfig+0xec>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00f      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <TIM_Base_SetConfig+0xf0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00b      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <TIM_Base_SetConfig+0xf4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <TIM_Base_SetConfig+0xf8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <TIM_Base_SetConfig+0xfc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <TIM_Base_SetConfig+0xe4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	615a      	str	r2, [r3, #20]
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800

08002ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 0302 	bic.w	r3, r3, #2
 8002be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <TIM_OC1_SetConfig+0xc8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10c      	bne.n	8002c16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f023 0308 	bic.w	r3, r3, #8
 8002c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 0304 	bic.w	r3, r3, #4
 8002c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <TIM_OC1_SetConfig+0xc8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d111      	bne.n	8002c42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	40010000 	.word	0x40010000

08002c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0210 	bic.w	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0320 	bic.w	r3, r3, #32
 8002cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <TIM_OC2_SetConfig+0xd4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10d      	bne.n	8002ce8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <TIM_OC2_SetConfig+0xd4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d113      	bne.n	8002d18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000

08002d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0303 	bic.w	r3, r3, #3
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <TIM_OC3_SetConfig+0xd0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10d      	bne.n	8002dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <TIM_OC3_SetConfig+0xd0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d113      	bne.n	8002dee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	621a      	str	r2, [r3, #32]
}
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40010000 	.word	0x40010000

08002e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	031b      	lsls	r3, r3, #12
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <TIM_OC4_SetConfig+0x9c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d109      	bne.n	8002e8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2201      	movs	r2, #1
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e050      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d018      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f68:	d013      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40014000 	.word	0x40014000

08002fe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e03d      	b.n	8003078 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e03f      	b.n	8003116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fe72 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fcc9 	bl	8003a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b088      	sub	sp, #32
 8003122:	af02      	add	r7, sp, #8
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	f040 8083 	bne.w	8003246 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_UART_Transmit+0x2e>
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e07b      	b.n	8003248 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_UART_Transmit+0x40>
 800315a:	2302      	movs	r3, #2
 800315c:	e074      	b.n	8003248 <HAL_UART_Transmit+0x12a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2221      	movs	r2, #33	; 0x21
 8003170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003174:	f7fe f832 	bl	80011dc <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	88fa      	ldrh	r2, [r7, #6]
 8003184:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800318e:	e042      	b.n	8003216 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d122      	bne.n	80031ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fad2 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e042      	b.n	8003248 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3302      	adds	r3, #2
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	e017      	b.n	8003216 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	e013      	b.n	8003216 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2200      	movs	r2, #0
 80031f6:	2180      	movs	r1, #128	; 0x80
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 faaf 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e01f      	b.n	8003248 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	60ba      	str	r2, [r7, #8]
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1b7      	bne.n	8003190 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fa96 	bl	800375c <UART_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e006      	b.n	8003248 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	d166      	bne.n	8003338 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_UART_Receive_DMA+0x26>
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e05f      	b.n	800333a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_UART_Receive_DMA+0x38>
 8003284:	2302      	movs	r3, #2
 8003286:	e058      	b.n	800333a <HAL_UART_Receive_DMA+0xea>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2222      	movs	r2, #34	; 0x22
 80032a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	4a25      	ldr	r2, [pc, #148]	; (8003344 <HAL_UART_Receive_DMA+0xf4>)
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_UART_Receive_DMA+0xf8>)
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4a23      	ldr	r2, [pc, #140]	; (800334c <HAL_UART_Receive_DMA+0xfc>)
 80032c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	2200      	movs	r2, #0
 80032c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3304      	adds	r3, #4
 80032da:	4619      	mov	r1, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	f7fe f969 	bl	80015b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003312:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003332:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	08003645 	.word	0x08003645
 8003348:	080036ad 	.word	0x080036ad
 800334c:	080036c9 	.word	0x080036c9

08003350 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b80      	cmp	r3, #128	; 0x80
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b21      	cmp	r3, #33	; 0x21
 800337c:	d116      	bne.n	80033ac <HAL_UART_DMAStop+0x5c>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003392:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe f961 	bl	8001668 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa22 	bl	80037f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b22      	cmp	r3, #34	; 0x22
 80033cc:	d116      	bne.n	80033fc <HAL_UART_DMAStop+0xac>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe f939 	bl	8001668 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa10 	bl	800381c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_UART_IRQHandler+0x52>
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa82 	bl	800395c <UART_Receive_IT>
      return;
 8003458:	e0d1      	b.n	80035fe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80b0 	beq.w	80035c2 <HAL_UART_IRQHandler+0x1ba>
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_UART_IRQHandler+0x70>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80a5 	beq.w	80035c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_UART_IRQHandler+0x90>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_UART_IRQHandler+0xb0>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	f043 0202 	orr.w	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_UART_IRQHandler+0xd0>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00f      	beq.n	8003502 <HAL_UART_IRQHandler+0xfa>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_UART_IRQHandler+0xee>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	f043 0208 	orr.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d078      	beq.n	80035fc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_UART_IRQHandler+0x11c>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fa1c 	bl	800395c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <HAL_UART_IRQHandler+0x144>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d031      	beq.n	80035b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f965 	bl	800381c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d123      	bne.n	80035a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	4a21      	ldr	r2, [pc, #132]	; (8003604 <HAL_UART_IRQHandler+0x1fc>)
 800357e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe f8df 	bl	8001748 <HAL_DMA_Abort_IT>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d016      	beq.n	80035be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800359a:	4610      	mov	r0, r2
 800359c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359e:	e00e      	b.n	80035be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f845 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a6:	e00a      	b.n	80035be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f841 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ae:	e006      	b.n	80035be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f83d 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035bc:	e01e      	b.n	80035fc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035be:	bf00      	nop
    return;
 80035c0:	e01c      	b.n	80035fc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <HAL_UART_IRQHandler+0x1d6>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f952 	bl	8003880 <UART_Transmit_IT>
    return;
 80035dc:	e00f      	b.n	80035fe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_UART_IRQHandler+0x1f6>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f99a 	bl	800392c <UART_EndTransmit_IT>
    return;
 80035f8:	bf00      	nop
 80035fa:	e000      	b.n	80035fe <HAL_UART_IRQHandler+0x1f6>
    return;
 80035fc:	bf00      	nop
  }
}
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	08003859 	.word	0x08003859

08003608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11e      	bne.n	800369e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003674:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003694:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7fd f9b4 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ffae 	bl	800361c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b21      	cmp	r3, #33	; 0x21
 80036fa:	d108      	bne.n	800370e <UART_DMAError+0x46>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2200      	movs	r2, #0
 8003706:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003708:	68b8      	ldr	r0, [r7, #8]
 800370a:	f000 f871 	bl	80037f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b22      	cmp	r3, #34	; 0x22
 800372e:	d108      	bne.n	8003742 <UART_DMAError+0x7a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2200      	movs	r2, #0
 800373a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800373c:	68b8      	ldr	r0, [r7, #8]
 800373e:	f000 f86d 	bl	800381c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800374e:	68b8      	ldr	r0, [r7, #8]
 8003750:	f7ff ff6e 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003754:	bf00      	nop
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376c:	e02c      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d028      	beq.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <UART_WaitOnFlagUntilTimeout+0x30>
 800377c:	f7fd fd2e 	bl	80011dc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	429a      	cmp	r2, r3
 800378a:	d21d      	bcs.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800379a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e00f      	b.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4013      	ands	r3, r2
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d0c3      	beq.n	800376e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003806:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003832:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7ff fedc 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b21      	cmp	r3, #33	; 0x21
 8003892:	d144      	bne.n	800391e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389c:	d11a      	bne.n	80038d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d105      	bne.n	80038c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]
 80038c6:	e00e      	b.n	80038e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]
 80038d2:	e008      	b.n	80038e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	1c59      	adds	r1, r3, #1
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6211      	str	r1, [r2, #32]
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4619      	mov	r1, r3
 80038f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003908:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003918:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003942:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fe5b 	bl	8003608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b22      	cmp	r3, #34	; 0x22
 800396e:	d171      	bne.n	8003a54 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d123      	bne.n	80039c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10e      	bne.n	80039a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
 80039a4:	e029      	b.n	80039fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28
 80039c0:	e01b      	b.n	80039fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6858      	ldr	r0, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	1c59      	adds	r1, r3, #1
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6291      	str	r1, [r2, #40]	; 0x28
 80039da:	b2c2      	uxtb	r2, r0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e00c      	b.n	80039fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	1c58      	adds	r0, r3, #1
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6288      	str	r0, [r1, #40]	; 0x28
 80039f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4619      	mov	r1, r3
 8003a08:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d120      	bne.n	8003a50 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0220 	bic.w	r2, r2, #32
 8003a1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fc ffe0 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e002      	b.n	8003a56 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aa2:	f023 030c 	bic.w	r3, r3, #12
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6812      	ldr	r2, [r2, #0]
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ace:	f040 818b 	bne.w	8003de8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4ac1      	ldr	r2, [pc, #772]	; (8003ddc <UART_SetConfig+0x37c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d005      	beq.n	8003ae8 <UART_SetConfig+0x88>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4abf      	ldr	r2, [pc, #764]	; (8003de0 <UART_SetConfig+0x380>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f040 80bd 	bne.w	8003c62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fea2 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 8003aec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	461d      	mov	r5, r3
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	46a8      	mov	r8, r5
 8003af8:	46b1      	mov	r9, r6
 8003afa:	eb18 0308 	adds.w	r3, r8, r8
 8003afe:	eb49 0409 	adc.w	r4, r9, r9
 8003b02:	4698      	mov	r8, r3
 8003b04:	46a1      	mov	r9, r4
 8003b06:	eb18 0805 	adds.w	r8, r8, r5
 8003b0a:	eb49 0906 	adc.w	r9, r9, r6
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b22:	4688      	mov	r8, r1
 8003b24:	4691      	mov	r9, r2
 8003b26:	eb18 0005 	adds.w	r0, r8, r5
 8003b2a:	eb49 0106 	adc.w	r1, r9, r6
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	461d      	mov	r5, r3
 8003b34:	f04f 0600 	mov.w	r6, #0
 8003b38:	196b      	adds	r3, r5, r5
 8003b3a:	eb46 0406 	adc.w	r4, r6, r6
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4623      	mov	r3, r4
 8003b42:	f7fc fb9d 	bl	8000280 <__aeabi_uldivmod>
 8003b46:	4603      	mov	r3, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4ba5      	ldr	r3, [pc, #660]	; (8003de4 <UART_SetConfig+0x384>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	f04f 0600 	mov.w	r6, #0
 8003b60:	46a9      	mov	r9, r5
 8003b62:	46b2      	mov	sl, r6
 8003b64:	eb19 0309 	adds.w	r3, r9, r9
 8003b68:	eb4a 040a 	adc.w	r4, sl, sl
 8003b6c:	4699      	mov	r9, r3
 8003b6e:	46a2      	mov	sl, r4
 8003b70:	eb19 0905 	adds.w	r9, r9, r5
 8003b74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b78:	f04f 0100 	mov.w	r1, #0
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b8c:	4689      	mov	r9, r1
 8003b8e:	4692      	mov	sl, r2
 8003b90:	eb19 0005 	adds.w	r0, r9, r5
 8003b94:	eb4a 0106 	adc.w	r1, sl, r6
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	f04f 0600 	mov.w	r6, #0
 8003ba2:	196b      	adds	r3, r5, r5
 8003ba4:	eb46 0406 	adc.w	r4, r6, r6
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4623      	mov	r3, r4
 8003bac:	f7fc fb68 	bl	8000280 <__aeabi_uldivmod>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b8b      	ldr	r3, [pc, #556]	; (8003de4 <UART_SetConfig+0x384>)
 8003bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	2164      	movs	r1, #100	; 0x64
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	3332      	adds	r3, #50	; 0x32
 8003bca:	4a86      	ldr	r2, [pc, #536]	; (8003de4 <UART_SetConfig+0x384>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bd8:	4498      	add	r8, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	461d      	mov	r5, r3
 8003bde:	f04f 0600 	mov.w	r6, #0
 8003be2:	46a9      	mov	r9, r5
 8003be4:	46b2      	mov	sl, r6
 8003be6:	eb19 0309 	adds.w	r3, r9, r9
 8003bea:	eb4a 040a 	adc.w	r4, sl, sl
 8003bee:	4699      	mov	r9, r3
 8003bf0:	46a2      	mov	sl, r4
 8003bf2:	eb19 0905 	adds.w	r9, r9, r5
 8003bf6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c0e:	4689      	mov	r9, r1
 8003c10:	4692      	mov	sl, r2
 8003c12:	eb19 0005 	adds.w	r0, r9, r5
 8003c16:	eb4a 0106 	adc.w	r1, sl, r6
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	461d      	mov	r5, r3
 8003c20:	f04f 0600 	mov.w	r6, #0
 8003c24:	196b      	adds	r3, r5, r5
 8003c26:	eb46 0406 	adc.w	r4, r6, r6
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	f7fc fb27 	bl	8000280 <__aeabi_uldivmod>
 8003c32:	4603      	mov	r3, r0
 8003c34:	460c      	mov	r4, r1
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b6a      	ldr	r3, [pc, #424]	; (8003de4 <UART_SetConfig+0x384>)
 8003c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2164      	movs	r1, #100	; 0x64
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	3332      	adds	r3, #50	; 0x32
 8003c4c:	4a65      	ldr	r2, [pc, #404]	; (8003de4 <UART_SetConfig+0x384>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	f003 0207 	and.w	r2, r3, #7
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4442      	add	r2, r8
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	e26f      	b.n	8004142 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c62:	f7fe fdd1 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8003c66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	f04f 0600 	mov.w	r6, #0
 8003c70:	46a8      	mov	r8, r5
 8003c72:	46b1      	mov	r9, r6
 8003c74:	eb18 0308 	adds.w	r3, r8, r8
 8003c78:	eb49 0409 	adc.w	r4, r9, r9
 8003c7c:	4698      	mov	r8, r3
 8003c7e:	46a1      	mov	r9, r4
 8003c80:	eb18 0805 	adds.w	r8, r8, r5
 8003c84:	eb49 0906 	adc.w	r9, r9, r6
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c9c:	4688      	mov	r8, r1
 8003c9e:	4691      	mov	r9, r2
 8003ca0:	eb18 0005 	adds.w	r0, r8, r5
 8003ca4:	eb49 0106 	adc.w	r1, r9, r6
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	461d      	mov	r5, r3
 8003cae:	f04f 0600 	mov.w	r6, #0
 8003cb2:	196b      	adds	r3, r5, r5
 8003cb4:	eb46 0406 	adc.w	r4, r6, r6
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f7fc fae0 	bl	8000280 <__aeabi_uldivmod>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <UART_SetConfig+0x384>)
 8003cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	461d      	mov	r5, r3
 8003cd6:	f04f 0600 	mov.w	r6, #0
 8003cda:	46a9      	mov	r9, r5
 8003cdc:	46b2      	mov	sl, r6
 8003cde:	eb19 0309 	adds.w	r3, r9, r9
 8003ce2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	46a2      	mov	sl, r4
 8003cea:	eb19 0905 	adds.w	r9, r9, r5
 8003cee:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d06:	4689      	mov	r9, r1
 8003d08:	4692      	mov	sl, r2
 8003d0a:	eb19 0005 	adds.w	r0, r9, r5
 8003d0e:	eb4a 0106 	adc.w	r1, sl, r6
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	461d      	mov	r5, r3
 8003d18:	f04f 0600 	mov.w	r6, #0
 8003d1c:	196b      	adds	r3, r5, r5
 8003d1e:	eb46 0406 	adc.w	r4, r6, r6
 8003d22:	461a      	mov	r2, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	f7fc faab 	bl	8000280 <__aeabi_uldivmod>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <UART_SetConfig+0x384>)
 8003d32:	fba3 1302 	umull	r1, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2164      	movs	r1, #100	; 0x64
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	3332      	adds	r3, #50	; 0x32
 8003d44:	4a27      	ldr	r2, [pc, #156]	; (8003de4 <UART_SetConfig+0x384>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d52:	4498      	add	r8, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	461d      	mov	r5, r3
 8003d58:	f04f 0600 	mov.w	r6, #0
 8003d5c:	46a9      	mov	r9, r5
 8003d5e:	46b2      	mov	sl, r6
 8003d60:	eb19 0309 	adds.w	r3, r9, r9
 8003d64:	eb4a 040a 	adc.w	r4, sl, sl
 8003d68:	4699      	mov	r9, r3
 8003d6a:	46a2      	mov	sl, r4
 8003d6c:	eb19 0905 	adds.w	r9, r9, r5
 8003d70:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d88:	4689      	mov	r9, r1
 8003d8a:	4692      	mov	sl, r2
 8003d8c:	eb19 0005 	adds.w	r0, r9, r5
 8003d90:	eb4a 0106 	adc.w	r1, sl, r6
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	461d      	mov	r5, r3
 8003d9a:	f04f 0600 	mov.w	r6, #0
 8003d9e:	196b      	adds	r3, r5, r5
 8003da0:	eb46 0406 	adc.w	r4, r6, r6
 8003da4:	461a      	mov	r2, r3
 8003da6:	4623      	mov	r3, r4
 8003da8:	f7fc fa6a 	bl	8000280 <__aeabi_uldivmod>
 8003dac:	4603      	mov	r3, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <UART_SetConfig+0x384>)
 8003db4:	fba3 1302 	umull	r1, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	2164      	movs	r1, #100	; 0x64
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	3332      	adds	r3, #50	; 0x32
 8003dc6:	4a07      	ldr	r2, [pc, #28]	; (8003de4 <UART_SetConfig+0x384>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	f003 0207 	and.w	r2, r3, #7
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4442      	add	r2, r8
 8003dd8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003dda:	e1b2      	b.n	8004142 <UART_SetConfig+0x6e2>
 8003ddc:	40011000 	.word	0x40011000
 8003de0:	40011400 	.word	0x40011400
 8003de4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4ad7      	ldr	r2, [pc, #860]	; (800414c <UART_SetConfig+0x6ec>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d005      	beq.n	8003dfe <UART_SetConfig+0x39e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4ad6      	ldr	r2, [pc, #856]	; (8004150 <UART_SetConfig+0x6f0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	f040 80d1 	bne.w	8003fa0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dfe:	f7fe fd17 	bl	8002830 <HAL_RCC_GetPCLK2Freq>
 8003e02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	469a      	mov	sl, r3
 8003e08:	f04f 0b00 	mov.w	fp, #0
 8003e0c:	46d0      	mov	r8, sl
 8003e0e:	46d9      	mov	r9, fp
 8003e10:	eb18 0308 	adds.w	r3, r8, r8
 8003e14:	eb49 0409 	adc.w	r4, r9, r9
 8003e18:	4698      	mov	r8, r3
 8003e1a:	46a1      	mov	r9, r4
 8003e1c:	eb18 080a 	adds.w	r8, r8, sl
 8003e20:	eb49 090b 	adc.w	r9, r9, fp
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e38:	4688      	mov	r8, r1
 8003e3a:	4691      	mov	r9, r2
 8003e3c:	eb1a 0508 	adds.w	r5, sl, r8
 8003e40:	eb4b 0609 	adc.w	r6, fp, r9
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	f04f 0400 	mov.w	r4, #0
 8003e56:	0094      	lsls	r4, r2, #2
 8003e58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e5c:	008b      	lsls	r3, r1, #2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4623      	mov	r3, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	4631      	mov	r1, r6
 8003e66:	f7fc fa0b 	bl	8000280 <__aeabi_uldivmod>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4bb8      	ldr	r3, [pc, #736]	; (8004154 <UART_SetConfig+0x6f4>)
 8003e72:	fba3 2302 	umull	r2, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	469b      	mov	fp, r3
 8003e80:	f04f 0c00 	mov.w	ip, #0
 8003e84:	46d9      	mov	r9, fp
 8003e86:	46e2      	mov	sl, ip
 8003e88:	eb19 0309 	adds.w	r3, r9, r9
 8003e8c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e90:	4699      	mov	r9, r3
 8003e92:	46a2      	mov	sl, r4
 8003e94:	eb19 090b 	adds.w	r9, r9, fp
 8003e98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e9c:	f04f 0100 	mov.w	r1, #0
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ea8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003eb0:	4689      	mov	r9, r1
 8003eb2:	4692      	mov	sl, r2
 8003eb4:	eb1b 0509 	adds.w	r5, fp, r9
 8003eb8:	eb4c 060a 	adc.w	r6, ip, sl
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	0094      	lsls	r4, r2, #2
 8003ed0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ed4:	008b      	lsls	r3, r1, #2
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4623      	mov	r3, r4
 8003eda:	4628      	mov	r0, r5
 8003edc:	4631      	mov	r1, r6
 8003ede:	f7fc f9cf 	bl	8000280 <__aeabi_uldivmod>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b9a      	ldr	r3, [pc, #616]	; (8004154 <UART_SetConfig+0x6f4>)
 8003eea:	fba3 1302 	umull	r1, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2164      	movs	r1, #100	; 0x64
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a95      	ldr	r2, [pc, #596]	; (8004154 <UART_SetConfig+0x6f4>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f08:	4498      	add	r8, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	469b      	mov	fp, r3
 8003f0e:	f04f 0c00 	mov.w	ip, #0
 8003f12:	46d9      	mov	r9, fp
 8003f14:	46e2      	mov	sl, ip
 8003f16:	eb19 0309 	adds.w	r3, r9, r9
 8003f1a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f1e:	4699      	mov	r9, r3
 8003f20:	46a2      	mov	sl, r4
 8003f22:	eb19 090b 	adds.w	r9, r9, fp
 8003f26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f3e:	4689      	mov	r9, r1
 8003f40:	4692      	mov	sl, r2
 8003f42:	eb1b 0509 	adds.w	r5, fp, r9
 8003f46:	eb4c 060a 	adc.w	r6, ip, sl
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f04f 0400 	mov.w	r4, #0
 8003f5c:	0094      	lsls	r4, r2, #2
 8003f5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f62:	008b      	lsls	r3, r1, #2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	f7fc f988 	bl	8000280 <__aeabi_uldivmod>
 8003f70:	4603      	mov	r3, r0
 8003f72:	460c      	mov	r4, r1
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b77      	ldr	r3, [pc, #476]	; (8004154 <UART_SetConfig+0x6f4>)
 8003f78:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	2164      	movs	r1, #100	; 0x64
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	3332      	adds	r3, #50	; 0x32
 8003f8a:	4a72      	ldr	r2, [pc, #456]	; (8004154 <UART_SetConfig+0x6f4>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4442      	add	r2, r8
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	e0d0      	b.n	8004142 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fe fc32 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	469a      	mov	sl, r3
 8003faa:	f04f 0b00 	mov.w	fp, #0
 8003fae:	46d0      	mov	r8, sl
 8003fb0:	46d9      	mov	r9, fp
 8003fb2:	eb18 0308 	adds.w	r3, r8, r8
 8003fb6:	eb49 0409 	adc.w	r4, r9, r9
 8003fba:	4698      	mov	r8, r3
 8003fbc:	46a1      	mov	r9, r4
 8003fbe:	eb18 080a 	adds.w	r8, r8, sl
 8003fc2:	eb49 090b 	adc.w	r9, r9, fp
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fda:	4688      	mov	r8, r1
 8003fdc:	4691      	mov	r9, r2
 8003fde:	eb1a 0508 	adds.w	r5, sl, r8
 8003fe2:	eb4b 0609 	adc.w	r6, fp, r9
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4619      	mov	r1, r3
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	0094      	lsls	r4, r2, #2
 8003ffa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ffe:	008b      	lsls	r3, r1, #2
 8004000:	461a      	mov	r2, r3
 8004002:	4623      	mov	r3, r4
 8004004:	4628      	mov	r0, r5
 8004006:	4631      	mov	r1, r6
 8004008:	f7fc f93a 	bl	8000280 <__aeabi_uldivmod>
 800400c:	4603      	mov	r3, r0
 800400e:	460c      	mov	r4, r1
 8004010:	461a      	mov	r2, r3
 8004012:	4b50      	ldr	r3, [pc, #320]	; (8004154 <UART_SetConfig+0x6f4>)
 8004014:	fba3 2302 	umull	r2, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	469b      	mov	fp, r3
 8004022:	f04f 0c00 	mov.w	ip, #0
 8004026:	46d9      	mov	r9, fp
 8004028:	46e2      	mov	sl, ip
 800402a:	eb19 0309 	adds.w	r3, r9, r9
 800402e:	eb4a 040a 	adc.w	r4, sl, sl
 8004032:	4699      	mov	r9, r3
 8004034:	46a2      	mov	sl, r4
 8004036:	eb19 090b 	adds.w	r9, r9, fp
 800403a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800404a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800404e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004052:	4689      	mov	r9, r1
 8004054:	4692      	mov	sl, r2
 8004056:	eb1b 0509 	adds.w	r5, fp, r9
 800405a:	eb4c 060a 	adc.w	r6, ip, sl
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	0094      	lsls	r4, r2, #2
 8004072:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004076:	008b      	lsls	r3, r1, #2
 8004078:	461a      	mov	r2, r3
 800407a:	4623      	mov	r3, r4
 800407c:	4628      	mov	r0, r5
 800407e:	4631      	mov	r1, r6
 8004080:	f7fc f8fe 	bl	8000280 <__aeabi_uldivmod>
 8004084:	4603      	mov	r3, r0
 8004086:	460c      	mov	r4, r1
 8004088:	461a      	mov	r2, r3
 800408a:	4b32      	ldr	r3, [pc, #200]	; (8004154 <UART_SetConfig+0x6f4>)
 800408c:	fba3 1302 	umull	r1, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	2164      	movs	r1, #100	; 0x64
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	3332      	adds	r3, #50	; 0x32
 800409e:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <UART_SetConfig+0x6f4>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040aa:	4498      	add	r8, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	469b      	mov	fp, r3
 80040b0:	f04f 0c00 	mov.w	ip, #0
 80040b4:	46d9      	mov	r9, fp
 80040b6:	46e2      	mov	sl, ip
 80040b8:	eb19 0309 	adds.w	r3, r9, r9
 80040bc:	eb4a 040a 	adc.w	r4, sl, sl
 80040c0:	4699      	mov	r9, r3
 80040c2:	46a2      	mov	sl, r4
 80040c4:	eb19 090b 	adds.w	r9, r9, fp
 80040c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040e0:	4689      	mov	r9, r1
 80040e2:	4692      	mov	sl, r2
 80040e4:	eb1b 0509 	adds.w	r5, fp, r9
 80040e8:	eb4c 060a 	adc.w	r6, ip, sl
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4619      	mov	r1, r3
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	f04f 0400 	mov.w	r4, #0
 80040fe:	0094      	lsls	r4, r2, #2
 8004100:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004104:	008b      	lsls	r3, r1, #2
 8004106:	461a      	mov	r2, r3
 8004108:	4623      	mov	r3, r4
 800410a:	4628      	mov	r0, r5
 800410c:	4631      	mov	r1, r6
 800410e:	f7fc f8b7 	bl	8000280 <__aeabi_uldivmod>
 8004112:	4603      	mov	r3, r0
 8004114:	460c      	mov	r4, r1
 8004116:	461a      	mov	r2, r3
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <UART_SetConfig+0x6f4>)
 800411a:	fba3 1302 	umull	r1, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2164      	movs	r1, #100	; 0x64
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	3332      	adds	r3, #50	; 0x32
 800412c:	4a09      	ldr	r2, [pc, #36]	; (8004154 <UART_SetConfig+0x6f4>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	f003 020f 	and.w	r2, r3, #15
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4442      	add	r2, r8
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	e7ff      	b.n	8004142 <UART_SetConfig+0x6e2>
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414c:	40011000 	.word	0x40011000
 8004150:	40011400 	.word	0x40011400
 8004154:	51eb851f 	.word	0x51eb851f

08004158 <__errno>:
 8004158:	4b01      	ldr	r3, [pc, #4]	; (8004160 <__errno+0x8>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	2000000c 	.word	0x2000000c

08004164 <__libc_init_array>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4e0d      	ldr	r6, [pc, #52]	; (800419c <__libc_init_array+0x38>)
 8004168:	4c0d      	ldr	r4, [pc, #52]	; (80041a0 <__libc_init_array+0x3c>)
 800416a:	1ba4      	subs	r4, r4, r6
 800416c:	10a4      	asrs	r4, r4, #2
 800416e:	2500      	movs	r5, #0
 8004170:	42a5      	cmp	r5, r4
 8004172:	d109      	bne.n	8004188 <__libc_init_array+0x24>
 8004174:	4e0b      	ldr	r6, [pc, #44]	; (80041a4 <__libc_init_array+0x40>)
 8004176:	4c0c      	ldr	r4, [pc, #48]	; (80041a8 <__libc_init_array+0x44>)
 8004178:	f000 ffcc 	bl	8005114 <_init>
 800417c:	1ba4      	subs	r4, r4, r6
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	2500      	movs	r5, #0
 8004182:	42a5      	cmp	r5, r4
 8004184:	d105      	bne.n	8004192 <__libc_init_array+0x2e>
 8004186:	bd70      	pop	{r4, r5, r6, pc}
 8004188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800418c:	4798      	blx	r3
 800418e:	3501      	adds	r5, #1
 8004190:	e7ee      	b.n	8004170 <__libc_init_array+0xc>
 8004192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004196:	4798      	blx	r3
 8004198:	3501      	adds	r5, #1
 800419a:	e7f2      	b.n	8004182 <__libc_init_array+0x1e>
 800419c:	08005294 	.word	0x08005294
 80041a0:	08005294 	.word	0x08005294
 80041a4:	08005294 	.word	0x08005294
 80041a8:	08005298 	.word	0x08005298

080041ac <memset>:
 80041ac:	4402      	add	r2, r0
 80041ae:	4603      	mov	r3, r0
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d100      	bne.n	80041b6 <memset+0xa>
 80041b4:	4770      	bx	lr
 80041b6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ba:	e7f9      	b.n	80041b0 <memset+0x4>

080041bc <iprintf>:
 80041bc:	b40f      	push	{r0, r1, r2, r3}
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <iprintf+0x2c>)
 80041c0:	b513      	push	{r0, r1, r4, lr}
 80041c2:	681c      	ldr	r4, [r3, #0]
 80041c4:	b124      	cbz	r4, 80041d0 <iprintf+0x14>
 80041c6:	69a3      	ldr	r3, [r4, #24]
 80041c8:	b913      	cbnz	r3, 80041d0 <iprintf+0x14>
 80041ca:	4620      	mov	r0, r4
 80041cc:	f000 fa50 	bl	8004670 <__sinit>
 80041d0:	ab05      	add	r3, sp, #20
 80041d2:	9a04      	ldr	r2, [sp, #16]
 80041d4:	68a1      	ldr	r1, [r4, #8]
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fc09 	bl	80049f0 <_vfiprintf_r>
 80041de:	b002      	add	sp, #8
 80041e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e4:	b004      	add	sp, #16
 80041e6:	4770      	bx	lr
 80041e8:	2000000c 	.word	0x2000000c

080041ec <putchar>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <putchar+0x24>)
 80041f0:	681c      	ldr	r4, [r3, #0]
 80041f2:	4605      	mov	r5, r0
 80041f4:	b124      	cbz	r4, 8004200 <putchar+0x14>
 80041f6:	69a3      	ldr	r3, [r4, #24]
 80041f8:	b913      	cbnz	r3, 8004200 <putchar+0x14>
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 fa38 	bl	8004670 <__sinit>
 8004200:	68a2      	ldr	r2, [r4, #8]
 8004202:	4629      	mov	r1, r5
 8004204:	4620      	mov	r0, r4
 8004206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800420a:	f000 be8f 	b.w	8004f2c <_putc_r>
 800420e:	bf00      	nop
 8004210:	2000000c 	.word	0x2000000c

08004214 <_puts_r>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	460e      	mov	r6, r1
 8004218:	4605      	mov	r5, r0
 800421a:	b118      	cbz	r0, 8004224 <_puts_r+0x10>
 800421c:	6983      	ldr	r3, [r0, #24]
 800421e:	b90b      	cbnz	r3, 8004224 <_puts_r+0x10>
 8004220:	f000 fa26 	bl	8004670 <__sinit>
 8004224:	69ab      	ldr	r3, [r5, #24]
 8004226:	68ac      	ldr	r4, [r5, #8]
 8004228:	b913      	cbnz	r3, 8004230 <_puts_r+0x1c>
 800422a:	4628      	mov	r0, r5
 800422c:	f000 fa20 	bl	8004670 <__sinit>
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <_puts_r+0xac>)
 8004232:	429c      	cmp	r4, r3
 8004234:	d117      	bne.n	8004266 <_puts_r+0x52>
 8004236:	686c      	ldr	r4, [r5, #4]
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	071b      	lsls	r3, r3, #28
 800423c:	d51d      	bpl.n	800427a <_puts_r+0x66>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	b1db      	cbz	r3, 800427a <_puts_r+0x66>
 8004242:	3e01      	subs	r6, #1
 8004244:	68a3      	ldr	r3, [r4, #8]
 8004246:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800424a:	3b01      	subs	r3, #1
 800424c:	60a3      	str	r3, [r4, #8]
 800424e:	b9e9      	cbnz	r1, 800428c <_puts_r+0x78>
 8004250:	2b00      	cmp	r3, #0
 8004252:	da2e      	bge.n	80042b2 <_puts_r+0x9e>
 8004254:	4622      	mov	r2, r4
 8004256:	210a      	movs	r1, #10
 8004258:	4628      	mov	r0, r5
 800425a:	f000 f859 	bl	8004310 <__swbuf_r>
 800425e:	3001      	adds	r0, #1
 8004260:	d011      	beq.n	8004286 <_puts_r+0x72>
 8004262:	200a      	movs	r0, #10
 8004264:	e011      	b.n	800428a <_puts_r+0x76>
 8004266:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <_puts_r+0xb0>)
 8004268:	429c      	cmp	r4, r3
 800426a:	d101      	bne.n	8004270 <_puts_r+0x5c>
 800426c:	68ac      	ldr	r4, [r5, #8]
 800426e:	e7e3      	b.n	8004238 <_puts_r+0x24>
 8004270:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <_puts_r+0xb4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	bf08      	it	eq
 8004276:	68ec      	ldreq	r4, [r5, #12]
 8004278:	e7de      	b.n	8004238 <_puts_r+0x24>
 800427a:	4621      	mov	r1, r4
 800427c:	4628      	mov	r0, r5
 800427e:	f000 f899 	bl	80043b4 <__swsetup_r>
 8004282:	2800      	cmp	r0, #0
 8004284:	d0dd      	beq.n	8004242 <_puts_r+0x2e>
 8004286:	f04f 30ff 	mov.w	r0, #4294967295
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	2b00      	cmp	r3, #0
 800428e:	da04      	bge.n	800429a <_puts_r+0x86>
 8004290:	69a2      	ldr	r2, [r4, #24]
 8004292:	429a      	cmp	r2, r3
 8004294:	dc06      	bgt.n	80042a4 <_puts_r+0x90>
 8004296:	290a      	cmp	r1, #10
 8004298:	d004      	beq.n	80042a4 <_puts_r+0x90>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	6022      	str	r2, [r4, #0]
 80042a0:	7019      	strb	r1, [r3, #0]
 80042a2:	e7cf      	b.n	8004244 <_puts_r+0x30>
 80042a4:	4622      	mov	r2, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f832 	bl	8004310 <__swbuf_r>
 80042ac:	3001      	adds	r0, #1
 80042ae:	d1c9      	bne.n	8004244 <_puts_r+0x30>
 80042b0:	e7e9      	b.n	8004286 <_puts_r+0x72>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	200a      	movs	r0, #10
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	6022      	str	r2, [r4, #0]
 80042ba:	7018      	strb	r0, [r3, #0]
 80042bc:	e7e5      	b.n	800428a <_puts_r+0x76>
 80042be:	bf00      	nop
 80042c0:	08005218 	.word	0x08005218
 80042c4:	08005238 	.word	0x08005238
 80042c8:	080051f8 	.word	0x080051f8

080042cc <puts>:
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <puts+0xc>)
 80042ce:	4601      	mov	r1, r0
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f7ff bf9f 	b.w	8004214 <_puts_r>
 80042d6:	bf00      	nop
 80042d8:	2000000c 	.word	0x2000000c

080042dc <strstr>:
 80042dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042de:	7803      	ldrb	r3, [r0, #0]
 80042e0:	b17b      	cbz	r3, 8004302 <strstr+0x26>
 80042e2:	4604      	mov	r4, r0
 80042e4:	7823      	ldrb	r3, [r4, #0]
 80042e6:	4620      	mov	r0, r4
 80042e8:	1c66      	adds	r6, r4, #1
 80042ea:	b17b      	cbz	r3, 800430c <strstr+0x30>
 80042ec:	1e4a      	subs	r2, r1, #1
 80042ee:	1e63      	subs	r3, r4, #1
 80042f0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80042f4:	b14d      	cbz	r5, 800430a <strstr+0x2e>
 80042f6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80042fa:	42af      	cmp	r7, r5
 80042fc:	4634      	mov	r4, r6
 80042fe:	d0f7      	beq.n	80042f0 <strstr+0x14>
 8004300:	e7f0      	b.n	80042e4 <strstr+0x8>
 8004302:	780b      	ldrb	r3, [r1, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	bf18      	it	ne
 8004308:	2000      	movne	r0, #0
 800430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430c:	4618      	mov	r0, r3
 800430e:	e7fc      	b.n	800430a <strstr+0x2e>

08004310 <__swbuf_r>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	460e      	mov	r6, r1
 8004314:	4614      	mov	r4, r2
 8004316:	4605      	mov	r5, r0
 8004318:	b118      	cbz	r0, 8004322 <__swbuf_r+0x12>
 800431a:	6983      	ldr	r3, [r0, #24]
 800431c:	b90b      	cbnz	r3, 8004322 <__swbuf_r+0x12>
 800431e:	f000 f9a7 	bl	8004670 <__sinit>
 8004322:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <__swbuf_r+0x98>)
 8004324:	429c      	cmp	r4, r3
 8004326:	d12a      	bne.n	800437e <__swbuf_r+0x6e>
 8004328:	686c      	ldr	r4, [r5, #4]
 800432a:	69a3      	ldr	r3, [r4, #24]
 800432c:	60a3      	str	r3, [r4, #8]
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	071a      	lsls	r2, r3, #28
 8004332:	d52e      	bpl.n	8004392 <__swbuf_r+0x82>
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	b363      	cbz	r3, 8004392 <__swbuf_r+0x82>
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	1ac0      	subs	r0, r0, r3
 800433e:	6963      	ldr	r3, [r4, #20]
 8004340:	b2f6      	uxtb	r6, r6
 8004342:	4283      	cmp	r3, r0
 8004344:	4637      	mov	r7, r6
 8004346:	dc04      	bgt.n	8004352 <__swbuf_r+0x42>
 8004348:	4621      	mov	r1, r4
 800434a:	4628      	mov	r0, r5
 800434c:	f000 f926 	bl	800459c <_fflush_r>
 8004350:	bb28      	cbnz	r0, 800439e <__swbuf_r+0x8e>
 8004352:	68a3      	ldr	r3, [r4, #8]
 8004354:	3b01      	subs	r3, #1
 8004356:	60a3      	str	r3, [r4, #8]
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	6022      	str	r2, [r4, #0]
 800435e:	701e      	strb	r6, [r3, #0]
 8004360:	6963      	ldr	r3, [r4, #20]
 8004362:	3001      	adds	r0, #1
 8004364:	4283      	cmp	r3, r0
 8004366:	d004      	beq.n	8004372 <__swbuf_r+0x62>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	07db      	lsls	r3, r3, #31
 800436c:	d519      	bpl.n	80043a2 <__swbuf_r+0x92>
 800436e:	2e0a      	cmp	r6, #10
 8004370:	d117      	bne.n	80043a2 <__swbuf_r+0x92>
 8004372:	4621      	mov	r1, r4
 8004374:	4628      	mov	r0, r5
 8004376:	f000 f911 	bl	800459c <_fflush_r>
 800437a:	b190      	cbz	r0, 80043a2 <__swbuf_r+0x92>
 800437c:	e00f      	b.n	800439e <__swbuf_r+0x8e>
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <__swbuf_r+0x9c>)
 8004380:	429c      	cmp	r4, r3
 8004382:	d101      	bne.n	8004388 <__swbuf_r+0x78>
 8004384:	68ac      	ldr	r4, [r5, #8]
 8004386:	e7d0      	b.n	800432a <__swbuf_r+0x1a>
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <__swbuf_r+0xa0>)
 800438a:	429c      	cmp	r4, r3
 800438c:	bf08      	it	eq
 800438e:	68ec      	ldreq	r4, [r5, #12]
 8004390:	e7cb      	b.n	800432a <__swbuf_r+0x1a>
 8004392:	4621      	mov	r1, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f80d 	bl	80043b4 <__swsetup_r>
 800439a:	2800      	cmp	r0, #0
 800439c:	d0cc      	beq.n	8004338 <__swbuf_r+0x28>
 800439e:	f04f 37ff 	mov.w	r7, #4294967295
 80043a2:	4638      	mov	r0, r7
 80043a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a6:	bf00      	nop
 80043a8:	08005218 	.word	0x08005218
 80043ac:	08005238 	.word	0x08005238
 80043b0:	080051f8 	.word	0x080051f8

080043b4 <__swsetup_r>:
 80043b4:	4b32      	ldr	r3, [pc, #200]	; (8004480 <__swsetup_r+0xcc>)
 80043b6:	b570      	push	{r4, r5, r6, lr}
 80043b8:	681d      	ldr	r5, [r3, #0]
 80043ba:	4606      	mov	r6, r0
 80043bc:	460c      	mov	r4, r1
 80043be:	b125      	cbz	r5, 80043ca <__swsetup_r+0x16>
 80043c0:	69ab      	ldr	r3, [r5, #24]
 80043c2:	b913      	cbnz	r3, 80043ca <__swsetup_r+0x16>
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 f953 	bl	8004670 <__sinit>
 80043ca:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <__swsetup_r+0xd0>)
 80043cc:	429c      	cmp	r4, r3
 80043ce:	d10f      	bne.n	80043f0 <__swsetup_r+0x3c>
 80043d0:	686c      	ldr	r4, [r5, #4]
 80043d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	0715      	lsls	r5, r2, #28
 80043da:	d42c      	bmi.n	8004436 <__swsetup_r+0x82>
 80043dc:	06d0      	lsls	r0, r2, #27
 80043de:	d411      	bmi.n	8004404 <__swsetup_r+0x50>
 80043e0:	2209      	movs	r2, #9
 80043e2:	6032      	str	r2, [r6, #0]
 80043e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	f04f 30ff 	mov.w	r0, #4294967295
 80043ee:	e03e      	b.n	800446e <__swsetup_r+0xba>
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <__swsetup_r+0xd4>)
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d101      	bne.n	80043fa <__swsetup_r+0x46>
 80043f6:	68ac      	ldr	r4, [r5, #8]
 80043f8:	e7eb      	b.n	80043d2 <__swsetup_r+0x1e>
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <__swsetup_r+0xd8>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	bf08      	it	eq
 8004400:	68ec      	ldreq	r4, [r5, #12]
 8004402:	e7e6      	b.n	80043d2 <__swsetup_r+0x1e>
 8004404:	0751      	lsls	r1, r2, #29
 8004406:	d512      	bpl.n	800442e <__swsetup_r+0x7a>
 8004408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800440a:	b141      	cbz	r1, 800441e <__swsetup_r+0x6a>
 800440c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004410:	4299      	cmp	r1, r3
 8004412:	d002      	beq.n	800441a <__swsetup_r+0x66>
 8004414:	4630      	mov	r0, r6
 8004416:	f000 fa19 	bl	800484c <_free_r>
 800441a:	2300      	movs	r3, #0
 800441c:	6363      	str	r3, [r4, #52]	; 0x34
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	2300      	movs	r3, #0
 8004428:	6063      	str	r3, [r4, #4]
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f043 0308 	orr.w	r3, r3, #8
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	6923      	ldr	r3, [r4, #16]
 8004438:	b94b      	cbnz	r3, 800444e <__swsetup_r+0x9a>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004444:	d003      	beq.n	800444e <__swsetup_r+0x9a>
 8004446:	4621      	mov	r1, r4
 8004448:	4630      	mov	r0, r6
 800444a:	f000 f9bf 	bl	80047cc <__smakebuf_r>
 800444e:	89a2      	ldrh	r2, [r4, #12]
 8004450:	f012 0301 	ands.w	r3, r2, #1
 8004454:	d00c      	beq.n	8004470 <__swsetup_r+0xbc>
 8004456:	2300      	movs	r3, #0
 8004458:	60a3      	str	r3, [r4, #8]
 800445a:	6963      	ldr	r3, [r4, #20]
 800445c:	425b      	negs	r3, r3
 800445e:	61a3      	str	r3, [r4, #24]
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	b953      	cbnz	r3, 800447a <__swsetup_r+0xc6>
 8004464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004468:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800446c:	d1ba      	bne.n	80043e4 <__swsetup_r+0x30>
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	0792      	lsls	r2, r2, #30
 8004472:	bf58      	it	pl
 8004474:	6963      	ldrpl	r3, [r4, #20]
 8004476:	60a3      	str	r3, [r4, #8]
 8004478:	e7f2      	b.n	8004460 <__swsetup_r+0xac>
 800447a:	2000      	movs	r0, #0
 800447c:	e7f7      	b.n	800446e <__swsetup_r+0xba>
 800447e:	bf00      	nop
 8004480:	2000000c 	.word	0x2000000c
 8004484:	08005218 	.word	0x08005218
 8004488:	08005238 	.word	0x08005238
 800448c:	080051f8 	.word	0x080051f8

08004490 <__sflush_r>:
 8004490:	898a      	ldrh	r2, [r1, #12]
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	4605      	mov	r5, r0
 8004498:	0710      	lsls	r0, r2, #28
 800449a:	460c      	mov	r4, r1
 800449c:	d458      	bmi.n	8004550 <__sflush_r+0xc0>
 800449e:	684b      	ldr	r3, [r1, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dc05      	bgt.n	80044b0 <__sflush_r+0x20>
 80044a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	dc02      	bgt.n	80044b0 <__sflush_r+0x20>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	d0f9      	beq.n	80044aa <__sflush_r+0x1a>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044bc:	682f      	ldr	r7, [r5, #0]
 80044be:	6a21      	ldr	r1, [r4, #32]
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	d032      	beq.n	800452a <__sflush_r+0x9a>
 80044c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	075a      	lsls	r2, r3, #29
 80044ca:	d505      	bpl.n	80044d8 <__sflush_r+0x48>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	1ac0      	subs	r0, r0, r3
 80044d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044d2:	b10b      	cbz	r3, 80044d8 <__sflush_r+0x48>
 80044d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d6:	1ac0      	subs	r0, r0, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	4602      	mov	r2, r0
 80044dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b0      	blx	r6
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	d106      	bne.n	80044f8 <__sflush_r+0x68>
 80044ea:	6829      	ldr	r1, [r5, #0]
 80044ec:	291d      	cmp	r1, #29
 80044ee:	d848      	bhi.n	8004582 <__sflush_r+0xf2>
 80044f0:	4a29      	ldr	r2, [pc, #164]	; (8004598 <__sflush_r+0x108>)
 80044f2:	40ca      	lsrs	r2, r1
 80044f4:	07d6      	lsls	r6, r2, #31
 80044f6:	d544      	bpl.n	8004582 <__sflush_r+0xf2>
 80044f8:	2200      	movs	r2, #0
 80044fa:	6062      	str	r2, [r4, #4]
 80044fc:	04d9      	lsls	r1, r3, #19
 80044fe:	6922      	ldr	r2, [r4, #16]
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	d504      	bpl.n	800450e <__sflush_r+0x7e>
 8004504:	1c42      	adds	r2, r0, #1
 8004506:	d101      	bne.n	800450c <__sflush_r+0x7c>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b903      	cbnz	r3, 800450e <__sflush_r+0x7e>
 800450c:	6560      	str	r0, [r4, #84]	; 0x54
 800450e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004510:	602f      	str	r7, [r5, #0]
 8004512:	2900      	cmp	r1, #0
 8004514:	d0c9      	beq.n	80044aa <__sflush_r+0x1a>
 8004516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800451a:	4299      	cmp	r1, r3
 800451c:	d002      	beq.n	8004524 <__sflush_r+0x94>
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f994 	bl	800484c <_free_r>
 8004524:	2000      	movs	r0, #0
 8004526:	6360      	str	r0, [r4, #52]	; 0x34
 8004528:	e7c0      	b.n	80044ac <__sflush_r+0x1c>
 800452a:	2301      	movs	r3, #1
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	1c41      	adds	r1, r0, #1
 8004532:	d1c8      	bne.n	80044c6 <__sflush_r+0x36>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0c5      	beq.n	80044c6 <__sflush_r+0x36>
 800453a:	2b1d      	cmp	r3, #29
 800453c:	d001      	beq.n	8004542 <__sflush_r+0xb2>
 800453e:	2b16      	cmp	r3, #22
 8004540:	d101      	bne.n	8004546 <__sflush_r+0xb6>
 8004542:	602f      	str	r7, [r5, #0]
 8004544:	e7b1      	b.n	80044aa <__sflush_r+0x1a>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	e7ad      	b.n	80044ac <__sflush_r+0x1c>
 8004550:	690f      	ldr	r7, [r1, #16]
 8004552:	2f00      	cmp	r7, #0
 8004554:	d0a9      	beq.n	80044aa <__sflush_r+0x1a>
 8004556:	0793      	lsls	r3, r2, #30
 8004558:	680e      	ldr	r6, [r1, #0]
 800455a:	bf08      	it	eq
 800455c:	694b      	ldreq	r3, [r1, #20]
 800455e:	600f      	str	r7, [r1, #0]
 8004560:	bf18      	it	ne
 8004562:	2300      	movne	r3, #0
 8004564:	eba6 0807 	sub.w	r8, r6, r7
 8004568:	608b      	str	r3, [r1, #8]
 800456a:	f1b8 0f00 	cmp.w	r8, #0
 800456e:	dd9c      	ble.n	80044aa <__sflush_r+0x1a>
 8004570:	4643      	mov	r3, r8
 8004572:	463a      	mov	r2, r7
 8004574:	6a21      	ldr	r1, [r4, #32]
 8004576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004578:	4628      	mov	r0, r5
 800457a:	47b0      	blx	r6
 800457c:	2800      	cmp	r0, #0
 800457e:	dc06      	bgt.n	800458e <__sflush_r+0xfe>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e78e      	b.n	80044ac <__sflush_r+0x1c>
 800458e:	4407      	add	r7, r0
 8004590:	eba8 0800 	sub.w	r8, r8, r0
 8004594:	e7e9      	b.n	800456a <__sflush_r+0xda>
 8004596:	bf00      	nop
 8004598:	20400001 	.word	0x20400001

0800459c <_fflush_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	690b      	ldr	r3, [r1, #16]
 80045a0:	4605      	mov	r5, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	b1db      	cbz	r3, 80045de <_fflush_r+0x42>
 80045a6:	b118      	cbz	r0, 80045b0 <_fflush_r+0x14>
 80045a8:	6983      	ldr	r3, [r0, #24]
 80045aa:	b90b      	cbnz	r3, 80045b0 <_fflush_r+0x14>
 80045ac:	f000 f860 	bl	8004670 <__sinit>
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <_fflush_r+0x48>)
 80045b2:	429c      	cmp	r4, r3
 80045b4:	d109      	bne.n	80045ca <_fflush_r+0x2e>
 80045b6:	686c      	ldr	r4, [r5, #4]
 80045b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045bc:	b17b      	cbz	r3, 80045de <_fflush_r+0x42>
 80045be:	4621      	mov	r1, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045c6:	f7ff bf63 	b.w	8004490 <__sflush_r>
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <_fflush_r+0x4c>)
 80045cc:	429c      	cmp	r4, r3
 80045ce:	d101      	bne.n	80045d4 <_fflush_r+0x38>
 80045d0:	68ac      	ldr	r4, [r5, #8]
 80045d2:	e7f1      	b.n	80045b8 <_fflush_r+0x1c>
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <_fflush_r+0x50>)
 80045d6:	429c      	cmp	r4, r3
 80045d8:	bf08      	it	eq
 80045da:	68ec      	ldreq	r4, [r5, #12]
 80045dc:	e7ec      	b.n	80045b8 <_fflush_r+0x1c>
 80045de:	2000      	movs	r0, #0
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	bf00      	nop
 80045e4:	08005218 	.word	0x08005218
 80045e8:	08005238 	.word	0x08005238
 80045ec:	080051f8 	.word	0x080051f8

080045f0 <std>:
 80045f0:	2300      	movs	r3, #0
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
 80045f6:	e9c0 3300 	strd	r3, r3, [r0]
 80045fa:	6083      	str	r3, [r0, #8]
 80045fc:	8181      	strh	r1, [r0, #12]
 80045fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004600:	81c2      	strh	r2, [r0, #14]
 8004602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004606:	6183      	str	r3, [r0, #24]
 8004608:	4619      	mov	r1, r3
 800460a:	2208      	movs	r2, #8
 800460c:	305c      	adds	r0, #92	; 0x5c
 800460e:	f7ff fdcd 	bl	80041ac <memset>
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <std+0x38>)
 8004614:	6263      	str	r3, [r4, #36]	; 0x24
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <std+0x3c>)
 8004618:	62a3      	str	r3, [r4, #40]	; 0x28
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <std+0x40>)
 800461c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <std+0x44>)
 8004620:	6224      	str	r4, [r4, #32]
 8004622:	6323      	str	r3, [r4, #48]	; 0x30
 8004624:	bd10      	pop	{r4, pc}
 8004626:	bf00      	nop
 8004628:	08004fb9 	.word	0x08004fb9
 800462c:	08004fdb 	.word	0x08004fdb
 8004630:	08005013 	.word	0x08005013
 8004634:	08005037 	.word	0x08005037

08004638 <_cleanup_r>:
 8004638:	4901      	ldr	r1, [pc, #4]	; (8004640 <_cleanup_r+0x8>)
 800463a:	f000 b885 	b.w	8004748 <_fwalk_reent>
 800463e:	bf00      	nop
 8004640:	0800459d 	.word	0x0800459d

08004644 <__sfmoreglue>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	1e4a      	subs	r2, r1, #1
 8004648:	2568      	movs	r5, #104	; 0x68
 800464a:	4355      	muls	r5, r2
 800464c:	460e      	mov	r6, r1
 800464e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004652:	f000 f949 	bl	80048e8 <_malloc_r>
 8004656:	4604      	mov	r4, r0
 8004658:	b140      	cbz	r0, 800466c <__sfmoreglue+0x28>
 800465a:	2100      	movs	r1, #0
 800465c:	e9c0 1600 	strd	r1, r6, [r0]
 8004660:	300c      	adds	r0, #12
 8004662:	60a0      	str	r0, [r4, #8]
 8004664:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004668:	f7ff fda0 	bl	80041ac <memset>
 800466c:	4620      	mov	r0, r4
 800466e:	bd70      	pop	{r4, r5, r6, pc}

08004670 <__sinit>:
 8004670:	6983      	ldr	r3, [r0, #24]
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	bb33      	cbnz	r3, 80046c6 <__sinit+0x56>
 8004678:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800467c:	6503      	str	r3, [r0, #80]	; 0x50
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <__sinit+0x58>)
 8004680:	4a12      	ldr	r2, [pc, #72]	; (80046cc <__sinit+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6282      	str	r2, [r0, #40]	; 0x28
 8004686:	4298      	cmp	r0, r3
 8004688:	bf04      	itt	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	6183      	streq	r3, [r0, #24]
 800468e:	f000 f81f 	bl	80046d0 <__sfp>
 8004692:	6060      	str	r0, [r4, #4]
 8004694:	4620      	mov	r0, r4
 8004696:	f000 f81b 	bl	80046d0 <__sfp>
 800469a:	60a0      	str	r0, [r4, #8]
 800469c:	4620      	mov	r0, r4
 800469e:	f000 f817 	bl	80046d0 <__sfp>
 80046a2:	2200      	movs	r2, #0
 80046a4:	60e0      	str	r0, [r4, #12]
 80046a6:	2104      	movs	r1, #4
 80046a8:	6860      	ldr	r0, [r4, #4]
 80046aa:	f7ff ffa1 	bl	80045f0 <std>
 80046ae:	2201      	movs	r2, #1
 80046b0:	2109      	movs	r1, #9
 80046b2:	68a0      	ldr	r0, [r4, #8]
 80046b4:	f7ff ff9c 	bl	80045f0 <std>
 80046b8:	2202      	movs	r2, #2
 80046ba:	2112      	movs	r1, #18
 80046bc:	68e0      	ldr	r0, [r4, #12]
 80046be:	f7ff ff97 	bl	80045f0 <std>
 80046c2:	2301      	movs	r3, #1
 80046c4:	61a3      	str	r3, [r4, #24]
 80046c6:	bd10      	pop	{r4, pc}
 80046c8:	080051f4 	.word	0x080051f4
 80046cc:	08004639 	.word	0x08004639

080046d0 <__sfp>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <__sfp+0x70>)
 80046d4:	681e      	ldr	r6, [r3, #0]
 80046d6:	69b3      	ldr	r3, [r6, #24]
 80046d8:	4607      	mov	r7, r0
 80046da:	b913      	cbnz	r3, 80046e2 <__sfp+0x12>
 80046dc:	4630      	mov	r0, r6
 80046de:	f7ff ffc7 	bl	8004670 <__sinit>
 80046e2:	3648      	adds	r6, #72	; 0x48
 80046e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	d503      	bpl.n	80046f4 <__sfp+0x24>
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	b133      	cbz	r3, 80046fe <__sfp+0x2e>
 80046f0:	6836      	ldr	r6, [r6, #0]
 80046f2:	e7f7      	b.n	80046e4 <__sfp+0x14>
 80046f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80046f8:	b16d      	cbz	r5, 8004716 <__sfp+0x46>
 80046fa:	3468      	adds	r4, #104	; 0x68
 80046fc:	e7f4      	b.n	80046e8 <__sfp+0x18>
 80046fe:	2104      	movs	r1, #4
 8004700:	4638      	mov	r0, r7
 8004702:	f7ff ff9f 	bl	8004644 <__sfmoreglue>
 8004706:	6030      	str	r0, [r6, #0]
 8004708:	2800      	cmp	r0, #0
 800470a:	d1f1      	bne.n	80046f0 <__sfp+0x20>
 800470c:	230c      	movs	r3, #12
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	4604      	mov	r4, r0
 8004712:	4620      	mov	r0, r4
 8004714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <__sfp+0x74>)
 8004718:	6665      	str	r5, [r4, #100]	; 0x64
 800471a:	e9c4 5500 	strd	r5, r5, [r4]
 800471e:	60a5      	str	r5, [r4, #8]
 8004720:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004724:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004728:	2208      	movs	r2, #8
 800472a:	4629      	mov	r1, r5
 800472c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004730:	f7ff fd3c 	bl	80041ac <memset>
 8004734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800473c:	e7e9      	b.n	8004712 <__sfp+0x42>
 800473e:	bf00      	nop
 8004740:	080051f4 	.word	0x080051f4
 8004744:	ffff0001 	.word	0xffff0001

08004748 <_fwalk_reent>:
 8004748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800474c:	4680      	mov	r8, r0
 800474e:	4689      	mov	r9, r1
 8004750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004754:	2600      	movs	r6, #0
 8004756:	b914      	cbnz	r4, 800475e <_fwalk_reent+0x16>
 8004758:	4630      	mov	r0, r6
 800475a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004762:	3f01      	subs	r7, #1
 8004764:	d501      	bpl.n	800476a <_fwalk_reent+0x22>
 8004766:	6824      	ldr	r4, [r4, #0]
 8004768:	e7f5      	b.n	8004756 <_fwalk_reent+0xe>
 800476a:	89ab      	ldrh	r3, [r5, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d907      	bls.n	8004780 <_fwalk_reent+0x38>
 8004770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004774:	3301      	adds	r3, #1
 8004776:	d003      	beq.n	8004780 <_fwalk_reent+0x38>
 8004778:	4629      	mov	r1, r5
 800477a:	4640      	mov	r0, r8
 800477c:	47c8      	blx	r9
 800477e:	4306      	orrs	r6, r0
 8004780:	3568      	adds	r5, #104	; 0x68
 8004782:	e7ee      	b.n	8004762 <_fwalk_reent+0x1a>

08004784 <__swhatbuf_r>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	460e      	mov	r6, r1
 8004788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478c:	2900      	cmp	r1, #0
 800478e:	b096      	sub	sp, #88	; 0x58
 8004790:	4614      	mov	r4, r2
 8004792:	461d      	mov	r5, r3
 8004794:	da07      	bge.n	80047a6 <__swhatbuf_r+0x22>
 8004796:	2300      	movs	r3, #0
 8004798:	602b      	str	r3, [r5, #0]
 800479a:	89b3      	ldrh	r3, [r6, #12]
 800479c:	061a      	lsls	r2, r3, #24
 800479e:	d410      	bmi.n	80047c2 <__swhatbuf_r+0x3e>
 80047a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a4:	e00e      	b.n	80047c4 <__swhatbuf_r+0x40>
 80047a6:	466a      	mov	r2, sp
 80047a8:	f000 fc6c 	bl	8005084 <_fstat_r>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	dbf2      	blt.n	8004796 <__swhatbuf_r+0x12>
 80047b0:	9a01      	ldr	r2, [sp, #4]
 80047b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047ba:	425a      	negs	r2, r3
 80047bc:	415a      	adcs	r2, r3
 80047be:	602a      	str	r2, [r5, #0]
 80047c0:	e7ee      	b.n	80047a0 <__swhatbuf_r+0x1c>
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	2000      	movs	r0, #0
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	b016      	add	sp, #88	; 0x58
 80047ca:	bd70      	pop	{r4, r5, r6, pc}

080047cc <__smakebuf_r>:
 80047cc:	898b      	ldrh	r3, [r1, #12]
 80047ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047d0:	079d      	lsls	r5, r3, #30
 80047d2:	4606      	mov	r6, r0
 80047d4:	460c      	mov	r4, r1
 80047d6:	d507      	bpl.n	80047e8 <__smakebuf_r+0x1c>
 80047d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	6123      	str	r3, [r4, #16]
 80047e0:	2301      	movs	r3, #1
 80047e2:	6163      	str	r3, [r4, #20]
 80047e4:	b002      	add	sp, #8
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	ab01      	add	r3, sp, #4
 80047ea:	466a      	mov	r2, sp
 80047ec:	f7ff ffca 	bl	8004784 <__swhatbuf_r>
 80047f0:	9900      	ldr	r1, [sp, #0]
 80047f2:	4605      	mov	r5, r0
 80047f4:	4630      	mov	r0, r6
 80047f6:	f000 f877 	bl	80048e8 <_malloc_r>
 80047fa:	b948      	cbnz	r0, 8004810 <__smakebuf_r+0x44>
 80047fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004800:	059a      	lsls	r2, r3, #22
 8004802:	d4ef      	bmi.n	80047e4 <__smakebuf_r+0x18>
 8004804:	f023 0303 	bic.w	r3, r3, #3
 8004808:	f043 0302 	orr.w	r3, r3, #2
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	e7e3      	b.n	80047d8 <__smakebuf_r+0xc>
 8004810:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <__smakebuf_r+0x7c>)
 8004812:	62b3      	str	r3, [r6, #40]	; 0x28
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	6020      	str	r0, [r4, #0]
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	9b00      	ldr	r3, [sp, #0]
 8004820:	6163      	str	r3, [r4, #20]
 8004822:	9b01      	ldr	r3, [sp, #4]
 8004824:	6120      	str	r0, [r4, #16]
 8004826:	b15b      	cbz	r3, 8004840 <__smakebuf_r+0x74>
 8004828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482c:	4630      	mov	r0, r6
 800482e:	f000 fc3b 	bl	80050a8 <_isatty_r>
 8004832:	b128      	cbz	r0, 8004840 <__smakebuf_r+0x74>
 8004834:	89a3      	ldrh	r3, [r4, #12]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	81a3      	strh	r3, [r4, #12]
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	431d      	orrs	r5, r3
 8004844:	81a5      	strh	r5, [r4, #12]
 8004846:	e7cd      	b.n	80047e4 <__smakebuf_r+0x18>
 8004848:	08004639 	.word	0x08004639

0800484c <_free_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	d045      	beq.n	80048e0 <_free_r+0x94>
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	18e4      	addlt	r4, r4, r3
 8004860:	f000 fc44 	bl	80050ec <__malloc_lock>
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <_free_r+0x98>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	4610      	mov	r0, r2
 800486a:	b933      	cbnz	r3, 800487a <_free_r+0x2e>
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6014      	str	r4, [r2, #0]
 8004870:	4628      	mov	r0, r5
 8004872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004876:	f000 bc3a 	b.w	80050ee <__malloc_unlock>
 800487a:	42a3      	cmp	r3, r4
 800487c:	d90c      	bls.n	8004898 <_free_r+0x4c>
 800487e:	6821      	ldr	r1, [r4, #0]
 8004880:	1862      	adds	r2, r4, r1
 8004882:	4293      	cmp	r3, r2
 8004884:	bf04      	itt	eq
 8004886:	681a      	ldreq	r2, [r3, #0]
 8004888:	685b      	ldreq	r3, [r3, #4]
 800488a:	6063      	str	r3, [r4, #4]
 800488c:	bf04      	itt	eq
 800488e:	1852      	addeq	r2, r2, r1
 8004890:	6022      	streq	r2, [r4, #0]
 8004892:	6004      	str	r4, [r0, #0]
 8004894:	e7ec      	b.n	8004870 <_free_r+0x24>
 8004896:	4613      	mov	r3, r2
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	b10a      	cbz	r2, 80048a0 <_free_r+0x54>
 800489c:	42a2      	cmp	r2, r4
 800489e:	d9fa      	bls.n	8004896 <_free_r+0x4a>
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	1858      	adds	r0, r3, r1
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d10b      	bne.n	80048c0 <_free_r+0x74>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	4401      	add	r1, r0
 80048ac:	1858      	adds	r0, r3, r1
 80048ae:	4282      	cmp	r2, r0
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	d1dd      	bne.n	8004870 <_free_r+0x24>
 80048b4:	6810      	ldr	r0, [r2, #0]
 80048b6:	6852      	ldr	r2, [r2, #4]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	4401      	add	r1, r0
 80048bc:	6019      	str	r1, [r3, #0]
 80048be:	e7d7      	b.n	8004870 <_free_r+0x24>
 80048c0:	d902      	bls.n	80048c8 <_free_r+0x7c>
 80048c2:	230c      	movs	r3, #12
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	e7d3      	b.n	8004870 <_free_r+0x24>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	1821      	adds	r1, r4, r0
 80048cc:	428a      	cmp	r2, r1
 80048ce:	bf04      	itt	eq
 80048d0:	6811      	ldreq	r1, [r2, #0]
 80048d2:	6852      	ldreq	r2, [r2, #4]
 80048d4:	6062      	str	r2, [r4, #4]
 80048d6:	bf04      	itt	eq
 80048d8:	1809      	addeq	r1, r1, r0
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	605c      	str	r4, [r3, #4]
 80048de:	e7c7      	b.n	8004870 <_free_r+0x24>
 80048e0:	bd38      	pop	{r3, r4, r5, pc}
 80048e2:	bf00      	nop
 80048e4:	200000b4 	.word	0x200000b4

080048e8 <_malloc_r>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	1ccd      	adds	r5, r1, #3
 80048ec:	f025 0503 	bic.w	r5, r5, #3
 80048f0:	3508      	adds	r5, #8
 80048f2:	2d0c      	cmp	r5, #12
 80048f4:	bf38      	it	cc
 80048f6:	250c      	movcc	r5, #12
 80048f8:	2d00      	cmp	r5, #0
 80048fa:	4606      	mov	r6, r0
 80048fc:	db01      	blt.n	8004902 <_malloc_r+0x1a>
 80048fe:	42a9      	cmp	r1, r5
 8004900:	d903      	bls.n	800490a <_malloc_r+0x22>
 8004902:	230c      	movs	r3, #12
 8004904:	6033      	str	r3, [r6, #0]
 8004906:	2000      	movs	r0, #0
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	f000 fbef 	bl	80050ec <__malloc_lock>
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <_malloc_r+0xac>)
 8004910:	6814      	ldr	r4, [r2, #0]
 8004912:	4621      	mov	r1, r4
 8004914:	b991      	cbnz	r1, 800493c <_malloc_r+0x54>
 8004916:	4c20      	ldr	r4, [pc, #128]	; (8004998 <_malloc_r+0xb0>)
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	b91b      	cbnz	r3, 8004924 <_malloc_r+0x3c>
 800491c:	4630      	mov	r0, r6
 800491e:	f000 fb3b 	bl	8004f98 <_sbrk_r>
 8004922:	6020      	str	r0, [r4, #0]
 8004924:	4629      	mov	r1, r5
 8004926:	4630      	mov	r0, r6
 8004928:	f000 fb36 	bl	8004f98 <_sbrk_r>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d124      	bne.n	800497a <_malloc_r+0x92>
 8004930:	230c      	movs	r3, #12
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	4630      	mov	r0, r6
 8004936:	f000 fbda 	bl	80050ee <__malloc_unlock>
 800493a:	e7e4      	b.n	8004906 <_malloc_r+0x1e>
 800493c:	680b      	ldr	r3, [r1, #0]
 800493e:	1b5b      	subs	r3, r3, r5
 8004940:	d418      	bmi.n	8004974 <_malloc_r+0x8c>
 8004942:	2b0b      	cmp	r3, #11
 8004944:	d90f      	bls.n	8004966 <_malloc_r+0x7e>
 8004946:	600b      	str	r3, [r1, #0]
 8004948:	50cd      	str	r5, [r1, r3]
 800494a:	18cc      	adds	r4, r1, r3
 800494c:	4630      	mov	r0, r6
 800494e:	f000 fbce 	bl	80050ee <__malloc_unlock>
 8004952:	f104 000b 	add.w	r0, r4, #11
 8004956:	1d23      	adds	r3, r4, #4
 8004958:	f020 0007 	bic.w	r0, r0, #7
 800495c:	1ac3      	subs	r3, r0, r3
 800495e:	d0d3      	beq.n	8004908 <_malloc_r+0x20>
 8004960:	425a      	negs	r2, r3
 8004962:	50e2      	str	r2, [r4, r3]
 8004964:	e7d0      	b.n	8004908 <_malloc_r+0x20>
 8004966:	428c      	cmp	r4, r1
 8004968:	684b      	ldr	r3, [r1, #4]
 800496a:	bf16      	itet	ne
 800496c:	6063      	strne	r3, [r4, #4]
 800496e:	6013      	streq	r3, [r2, #0]
 8004970:	460c      	movne	r4, r1
 8004972:	e7eb      	b.n	800494c <_malloc_r+0x64>
 8004974:	460c      	mov	r4, r1
 8004976:	6849      	ldr	r1, [r1, #4]
 8004978:	e7cc      	b.n	8004914 <_malloc_r+0x2c>
 800497a:	1cc4      	adds	r4, r0, #3
 800497c:	f024 0403 	bic.w	r4, r4, #3
 8004980:	42a0      	cmp	r0, r4
 8004982:	d005      	beq.n	8004990 <_malloc_r+0xa8>
 8004984:	1a21      	subs	r1, r4, r0
 8004986:	4630      	mov	r0, r6
 8004988:	f000 fb06 	bl	8004f98 <_sbrk_r>
 800498c:	3001      	adds	r0, #1
 800498e:	d0cf      	beq.n	8004930 <_malloc_r+0x48>
 8004990:	6025      	str	r5, [r4, #0]
 8004992:	e7db      	b.n	800494c <_malloc_r+0x64>
 8004994:	200000b4 	.word	0x200000b4
 8004998:	200000b8 	.word	0x200000b8

0800499c <__sfputc_r>:
 800499c:	6893      	ldr	r3, [r2, #8]
 800499e:	3b01      	subs	r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	b410      	push	{r4}
 80049a4:	6093      	str	r3, [r2, #8]
 80049a6:	da08      	bge.n	80049ba <__sfputc_r+0x1e>
 80049a8:	6994      	ldr	r4, [r2, #24]
 80049aa:	42a3      	cmp	r3, r4
 80049ac:	db01      	blt.n	80049b2 <__sfputc_r+0x16>
 80049ae:	290a      	cmp	r1, #10
 80049b0:	d103      	bne.n	80049ba <__sfputc_r+0x1e>
 80049b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049b6:	f7ff bcab 	b.w	8004310 <__swbuf_r>
 80049ba:	6813      	ldr	r3, [r2, #0]
 80049bc:	1c58      	adds	r0, r3, #1
 80049be:	6010      	str	r0, [r2, #0]
 80049c0:	7019      	strb	r1, [r3, #0]
 80049c2:	4608      	mov	r0, r1
 80049c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <__sfputs_r>:
 80049ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049cc:	4606      	mov	r6, r0
 80049ce:	460f      	mov	r7, r1
 80049d0:	4614      	mov	r4, r2
 80049d2:	18d5      	adds	r5, r2, r3
 80049d4:	42ac      	cmp	r4, r5
 80049d6:	d101      	bne.n	80049dc <__sfputs_r+0x12>
 80049d8:	2000      	movs	r0, #0
 80049da:	e007      	b.n	80049ec <__sfputs_r+0x22>
 80049dc:	463a      	mov	r2, r7
 80049de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e2:	4630      	mov	r0, r6
 80049e4:	f7ff ffda 	bl	800499c <__sfputc_r>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d1f3      	bne.n	80049d4 <__sfputs_r+0xa>
 80049ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049f0 <_vfiprintf_r>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	460c      	mov	r4, r1
 80049f6:	b09d      	sub	sp, #116	; 0x74
 80049f8:	4617      	mov	r7, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	4606      	mov	r6, r0
 80049fe:	b118      	cbz	r0, 8004a08 <_vfiprintf_r+0x18>
 8004a00:	6983      	ldr	r3, [r0, #24]
 8004a02:	b90b      	cbnz	r3, 8004a08 <_vfiprintf_r+0x18>
 8004a04:	f7ff fe34 	bl	8004670 <__sinit>
 8004a08:	4b7c      	ldr	r3, [pc, #496]	; (8004bfc <_vfiprintf_r+0x20c>)
 8004a0a:	429c      	cmp	r4, r3
 8004a0c:	d158      	bne.n	8004ac0 <_vfiprintf_r+0xd0>
 8004a0e:	6874      	ldr	r4, [r6, #4]
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	0718      	lsls	r0, r3, #28
 8004a14:	d55e      	bpl.n	8004ad4 <_vfiprintf_r+0xe4>
 8004a16:	6923      	ldr	r3, [r4, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d05b      	beq.n	8004ad4 <_vfiprintf_r+0xe4>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	2320      	movs	r3, #32
 8004a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a26:	2330      	movs	r3, #48	; 0x30
 8004a28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a2c:	9503      	str	r5, [sp, #12]
 8004a2e:	f04f 0b01 	mov.w	fp, #1
 8004a32:	46b8      	mov	r8, r7
 8004a34:	4645      	mov	r5, r8
 8004a36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a3a:	b10b      	cbz	r3, 8004a40 <_vfiprintf_r+0x50>
 8004a3c:	2b25      	cmp	r3, #37	; 0x25
 8004a3e:	d154      	bne.n	8004aea <_vfiprintf_r+0xfa>
 8004a40:	ebb8 0a07 	subs.w	sl, r8, r7
 8004a44:	d00b      	beq.n	8004a5e <_vfiprintf_r+0x6e>
 8004a46:	4653      	mov	r3, sl
 8004a48:	463a      	mov	r2, r7
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff ffbc 	bl	80049ca <__sfputs_r>
 8004a52:	3001      	adds	r0, #1
 8004a54:	f000 80c2 	beq.w	8004bdc <_vfiprintf_r+0x1ec>
 8004a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5a:	4453      	add	r3, sl
 8004a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5e:	f898 3000 	ldrb.w	r3, [r8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80ba 	beq.w	8004bdc <_vfiprintf_r+0x1ec>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	9307      	str	r3, [sp, #28]
 8004a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a7c:	46a8      	mov	r8, r5
 8004a7e:	2205      	movs	r2, #5
 8004a80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004a84:	485e      	ldr	r0, [pc, #376]	; (8004c00 <_vfiprintf_r+0x210>)
 8004a86:	f7fb fbab 	bl	80001e0 <memchr>
 8004a8a:	9b04      	ldr	r3, [sp, #16]
 8004a8c:	bb78      	cbnz	r0, 8004aee <_vfiprintf_r+0xfe>
 8004a8e:	06d9      	lsls	r1, r3, #27
 8004a90:	bf44      	itt	mi
 8004a92:	2220      	movmi	r2, #32
 8004a94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a98:	071a      	lsls	r2, r3, #28
 8004a9a:	bf44      	itt	mi
 8004a9c:	222b      	movmi	r2, #43	; 0x2b
 8004a9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aa2:	782a      	ldrb	r2, [r5, #0]
 8004aa4:	2a2a      	cmp	r2, #42	; 0x2a
 8004aa6:	d02a      	beq.n	8004afe <_vfiprintf_r+0x10e>
 8004aa8:	9a07      	ldr	r2, [sp, #28]
 8004aaa:	46a8      	mov	r8, r5
 8004aac:	2000      	movs	r0, #0
 8004aae:	250a      	movs	r5, #10
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab6:	3b30      	subs	r3, #48	; 0x30
 8004ab8:	2b09      	cmp	r3, #9
 8004aba:	d969      	bls.n	8004b90 <_vfiprintf_r+0x1a0>
 8004abc:	b360      	cbz	r0, 8004b18 <_vfiprintf_r+0x128>
 8004abe:	e024      	b.n	8004b0a <_vfiprintf_r+0x11a>
 8004ac0:	4b50      	ldr	r3, [pc, #320]	; (8004c04 <_vfiprintf_r+0x214>)
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d101      	bne.n	8004aca <_vfiprintf_r+0xda>
 8004ac6:	68b4      	ldr	r4, [r6, #8]
 8004ac8:	e7a2      	b.n	8004a10 <_vfiprintf_r+0x20>
 8004aca:	4b4f      	ldr	r3, [pc, #316]	; (8004c08 <_vfiprintf_r+0x218>)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	bf08      	it	eq
 8004ad0:	68f4      	ldreq	r4, [r6, #12]
 8004ad2:	e79d      	b.n	8004a10 <_vfiprintf_r+0x20>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f7ff fc6c 	bl	80043b4 <__swsetup_r>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d09d      	beq.n	8004a1c <_vfiprintf_r+0x2c>
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	b01d      	add	sp, #116	; 0x74
 8004ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aea:	46a8      	mov	r8, r5
 8004aec:	e7a2      	b.n	8004a34 <_vfiprintf_r+0x44>
 8004aee:	4a44      	ldr	r2, [pc, #272]	; (8004c00 <_vfiprintf_r+0x210>)
 8004af0:	1a80      	subs	r0, r0, r2
 8004af2:	fa0b f000 	lsl.w	r0, fp, r0
 8004af6:	4318      	orrs	r0, r3
 8004af8:	9004      	str	r0, [sp, #16]
 8004afa:	4645      	mov	r5, r8
 8004afc:	e7be      	b.n	8004a7c <_vfiprintf_r+0x8c>
 8004afe:	9a03      	ldr	r2, [sp, #12]
 8004b00:	1d11      	adds	r1, r2, #4
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	9103      	str	r1, [sp, #12]
 8004b06:	2a00      	cmp	r2, #0
 8004b08:	db01      	blt.n	8004b0e <_vfiprintf_r+0x11e>
 8004b0a:	9207      	str	r2, [sp, #28]
 8004b0c:	e004      	b.n	8004b18 <_vfiprintf_r+0x128>
 8004b0e:	4252      	negs	r2, r2
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	9207      	str	r2, [sp, #28]
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	f898 3000 	ldrb.w	r3, [r8]
 8004b1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b1e:	d10e      	bne.n	8004b3e <_vfiprintf_r+0x14e>
 8004b20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b24:	2b2a      	cmp	r3, #42	; 0x2a
 8004b26:	d138      	bne.n	8004b9a <_vfiprintf_r+0x1aa>
 8004b28:	9b03      	ldr	r3, [sp, #12]
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	9203      	str	r2, [sp, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfb8      	it	lt
 8004b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b38:	f108 0802 	add.w	r8, r8, #2
 8004b3c:	9305      	str	r3, [sp, #20]
 8004b3e:	4d33      	ldr	r5, [pc, #204]	; (8004c0c <_vfiprintf_r+0x21c>)
 8004b40:	f898 1000 	ldrb.w	r1, [r8]
 8004b44:	2203      	movs	r2, #3
 8004b46:	4628      	mov	r0, r5
 8004b48:	f7fb fb4a 	bl	80001e0 <memchr>
 8004b4c:	b140      	cbz	r0, 8004b60 <_vfiprintf_r+0x170>
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	1b40      	subs	r0, r0, r5
 8004b52:	fa03 f000 	lsl.w	r0, r3, r0
 8004b56:	9b04      	ldr	r3, [sp, #16]
 8004b58:	4303      	orrs	r3, r0
 8004b5a:	f108 0801 	add.w	r8, r8, #1
 8004b5e:	9304      	str	r3, [sp, #16]
 8004b60:	f898 1000 	ldrb.w	r1, [r8]
 8004b64:	482a      	ldr	r0, [pc, #168]	; (8004c10 <_vfiprintf_r+0x220>)
 8004b66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b6a:	2206      	movs	r2, #6
 8004b6c:	f108 0701 	add.w	r7, r8, #1
 8004b70:	f7fb fb36 	bl	80001e0 <memchr>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d037      	beq.n	8004be8 <_vfiprintf_r+0x1f8>
 8004b78:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <_vfiprintf_r+0x224>)
 8004b7a:	bb1b      	cbnz	r3, 8004bc4 <_vfiprintf_r+0x1d4>
 8004b7c:	9b03      	ldr	r3, [sp, #12]
 8004b7e:	3307      	adds	r3, #7
 8004b80:	f023 0307 	bic.w	r3, r3, #7
 8004b84:	3308      	adds	r3, #8
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8a:	444b      	add	r3, r9
 8004b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8e:	e750      	b.n	8004a32 <_vfiprintf_r+0x42>
 8004b90:	fb05 3202 	mla	r2, r5, r2, r3
 8004b94:	2001      	movs	r0, #1
 8004b96:	4688      	mov	r8, r1
 8004b98:	e78a      	b.n	8004ab0 <_vfiprintf_r+0xc0>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f108 0801 	add.w	r8, r8, #1
 8004ba0:	9305      	str	r3, [sp, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	250a      	movs	r5, #10
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bac:	3a30      	subs	r2, #48	; 0x30
 8004bae:	2a09      	cmp	r2, #9
 8004bb0:	d903      	bls.n	8004bba <_vfiprintf_r+0x1ca>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0c3      	beq.n	8004b3e <_vfiprintf_r+0x14e>
 8004bb6:	9105      	str	r1, [sp, #20]
 8004bb8:	e7c1      	b.n	8004b3e <_vfiprintf_r+0x14e>
 8004bba:	fb05 2101 	mla	r1, r5, r1, r2
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	e7f0      	b.n	8004ba6 <_vfiprintf_r+0x1b6>
 8004bc4:	ab03      	add	r3, sp, #12
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <_vfiprintf_r+0x228>)
 8004bcc:	a904      	add	r1, sp, #16
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f3af 8000 	nop.w
 8004bd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bd8:	4681      	mov	r9, r0
 8004bda:	d1d5      	bne.n	8004b88 <_vfiprintf_r+0x198>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	065b      	lsls	r3, r3, #25
 8004be0:	f53f af7e 	bmi.w	8004ae0 <_vfiprintf_r+0xf0>
 8004be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be6:	e77d      	b.n	8004ae4 <_vfiprintf_r+0xf4>
 8004be8:	ab03      	add	r3, sp, #12
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4622      	mov	r2, r4
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <_vfiprintf_r+0x228>)
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f000 f888 	bl	8004d08 <_printf_i>
 8004bf8:	e7ec      	b.n	8004bd4 <_vfiprintf_r+0x1e4>
 8004bfa:	bf00      	nop
 8004bfc:	08005218 	.word	0x08005218
 8004c00:	08005258 	.word	0x08005258
 8004c04:	08005238 	.word	0x08005238
 8004c08:	080051f8 	.word	0x080051f8
 8004c0c:	0800525e 	.word	0x0800525e
 8004c10:	08005262 	.word	0x08005262
 8004c14:	00000000 	.word	0x00000000
 8004c18:	080049cb 	.word	0x080049cb

08004c1c <_printf_common>:
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	4691      	mov	r9, r2
 8004c22:	461f      	mov	r7, r3
 8004c24:	688a      	ldr	r2, [r1, #8]
 8004c26:	690b      	ldr	r3, [r1, #16]
 8004c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bfb8      	it	lt
 8004c30:	4613      	movlt	r3, r2
 8004c32:	f8c9 3000 	str.w	r3, [r9]
 8004c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	b112      	cbz	r2, 8004c46 <_printf_common+0x2a>
 8004c40:	3301      	adds	r3, #1
 8004c42:	f8c9 3000 	str.w	r3, [r9]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	0699      	lsls	r1, r3, #26
 8004c4a:	bf42      	ittt	mi
 8004c4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c50:	3302      	addmi	r3, #2
 8004c52:	f8c9 3000 	strmi.w	r3, [r9]
 8004c56:	6825      	ldr	r5, [r4, #0]
 8004c58:	f015 0506 	ands.w	r5, r5, #6
 8004c5c:	d107      	bne.n	8004c6e <_printf_common+0x52>
 8004c5e:	f104 0a19 	add.w	sl, r4, #25
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	f8d9 2000 	ldr.w	r2, [r9]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	42ab      	cmp	r3, r5
 8004c6c:	dc28      	bgt.n	8004cc0 <_printf_common+0xa4>
 8004c6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	3300      	adds	r3, #0
 8004c76:	bf18      	it	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	0692      	lsls	r2, r2, #26
 8004c7c:	d42d      	bmi.n	8004cda <_printf_common+0xbe>
 8004c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c82:	4639      	mov	r1, r7
 8004c84:	4630      	mov	r0, r6
 8004c86:	47c0      	blx	r8
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d020      	beq.n	8004cce <_printf_common+0xb2>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	68e5      	ldr	r5, [r4, #12]
 8004c90:	f8d9 2000 	ldr.w	r2, [r9]
 8004c94:	f003 0306 	and.w	r3, r3, #6
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	bf08      	it	eq
 8004c9c:	1aad      	subeq	r5, r5, r2
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	bf0c      	ite	eq
 8004ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca8:	2500      	movne	r5, #0
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bfc4      	itt	gt
 8004cae:	1a9b      	subgt	r3, r3, r2
 8004cb0:	18ed      	addgt	r5, r5, r3
 8004cb2:	f04f 0900 	mov.w	r9, #0
 8004cb6:	341a      	adds	r4, #26
 8004cb8:	454d      	cmp	r5, r9
 8004cba:	d11a      	bne.n	8004cf2 <_printf_common+0xd6>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e008      	b.n	8004cd2 <_printf_common+0xb6>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4639      	mov	r1, r7
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	47c0      	blx	r8
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d103      	bne.n	8004cd6 <_printf_common+0xba>
 8004cce:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	e7c3      	b.n	8004c62 <_printf_common+0x46>
 8004cda:	18e1      	adds	r1, r4, r3
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	2030      	movs	r0, #48	; 0x30
 8004ce0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ce4:	4422      	add	r2, r4
 8004ce6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cee:	3302      	adds	r3, #2
 8004cf0:	e7c5      	b.n	8004c7e <_printf_common+0x62>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d0e6      	beq.n	8004cce <_printf_common+0xb2>
 8004d00:	f109 0901 	add.w	r9, r9, #1
 8004d04:	e7d8      	b.n	8004cb8 <_printf_common+0x9c>
	...

08004d08 <_printf_i>:
 8004d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d10:	460c      	mov	r4, r1
 8004d12:	7e09      	ldrb	r1, [r1, #24]
 8004d14:	b085      	sub	sp, #20
 8004d16:	296e      	cmp	r1, #110	; 0x6e
 8004d18:	4617      	mov	r7, r2
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	4698      	mov	r8, r3
 8004d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d20:	f000 80b3 	beq.w	8004e8a <_printf_i+0x182>
 8004d24:	d822      	bhi.n	8004d6c <_printf_i+0x64>
 8004d26:	2963      	cmp	r1, #99	; 0x63
 8004d28:	d036      	beq.n	8004d98 <_printf_i+0x90>
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x3a>
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	f000 80b9 	beq.w	8004ea4 <_printf_i+0x19c>
 8004d32:	2958      	cmp	r1, #88	; 0x58
 8004d34:	f000 8083 	beq.w	8004e3e <_printf_i+0x136>
 8004d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d40:	e032      	b.n	8004da8 <_printf_i+0xa0>
 8004d42:	2964      	cmp	r1, #100	; 0x64
 8004d44:	d001      	beq.n	8004d4a <_printf_i+0x42>
 8004d46:	2969      	cmp	r1, #105	; 0x69
 8004d48:	d1f6      	bne.n	8004d38 <_printf_i+0x30>
 8004d4a:	6820      	ldr	r0, [r4, #0]
 8004d4c:	6813      	ldr	r3, [r2, #0]
 8004d4e:	0605      	lsls	r5, r0, #24
 8004d50:	f103 0104 	add.w	r1, r3, #4
 8004d54:	d52a      	bpl.n	8004dac <_printf_i+0xa4>
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6011      	str	r1, [r2, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da03      	bge.n	8004d66 <_printf_i+0x5e>
 8004d5e:	222d      	movs	r2, #45	; 0x2d
 8004d60:	425b      	negs	r3, r3
 8004d62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d66:	486f      	ldr	r0, [pc, #444]	; (8004f24 <_printf_i+0x21c>)
 8004d68:	220a      	movs	r2, #10
 8004d6a:	e039      	b.n	8004de0 <_printf_i+0xd8>
 8004d6c:	2973      	cmp	r1, #115	; 0x73
 8004d6e:	f000 809d 	beq.w	8004eac <_printf_i+0x1a4>
 8004d72:	d808      	bhi.n	8004d86 <_printf_i+0x7e>
 8004d74:	296f      	cmp	r1, #111	; 0x6f
 8004d76:	d020      	beq.n	8004dba <_printf_i+0xb2>
 8004d78:	2970      	cmp	r1, #112	; 0x70
 8004d7a:	d1dd      	bne.n	8004d38 <_printf_i+0x30>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	f043 0320 	orr.w	r3, r3, #32
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	e003      	b.n	8004d8e <_printf_i+0x86>
 8004d86:	2975      	cmp	r1, #117	; 0x75
 8004d88:	d017      	beq.n	8004dba <_printf_i+0xb2>
 8004d8a:	2978      	cmp	r1, #120	; 0x78
 8004d8c:	d1d4      	bne.n	8004d38 <_printf_i+0x30>
 8004d8e:	2378      	movs	r3, #120	; 0x78
 8004d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d94:	4864      	ldr	r0, [pc, #400]	; (8004f28 <_printf_i+0x220>)
 8004d96:	e055      	b.n	8004e44 <_printf_i+0x13c>
 8004d98:	6813      	ldr	r3, [r2, #0]
 8004d9a:	1d19      	adds	r1, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6011      	str	r1, [r2, #0]
 8004da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da8:	2301      	movs	r3, #1
 8004daa:	e08c      	b.n	8004ec6 <_printf_i+0x1be>
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6011      	str	r1, [r2, #0]
 8004db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004db4:	bf18      	it	ne
 8004db6:	b21b      	sxthne	r3, r3
 8004db8:	e7cf      	b.n	8004d5a <_printf_i+0x52>
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1d18      	adds	r0, r3, #4
 8004dc0:	6010      	str	r0, [r2, #0]
 8004dc2:	0628      	lsls	r0, r5, #24
 8004dc4:	d501      	bpl.n	8004dca <_printf_i+0xc2>
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	e002      	b.n	8004dd0 <_printf_i+0xc8>
 8004dca:	0668      	lsls	r0, r5, #25
 8004dcc:	d5fb      	bpl.n	8004dc6 <_printf_i+0xbe>
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	4854      	ldr	r0, [pc, #336]	; (8004f24 <_printf_i+0x21c>)
 8004dd2:	296f      	cmp	r1, #111	; 0x6f
 8004dd4:	bf14      	ite	ne
 8004dd6:	220a      	movne	r2, #10
 8004dd8:	2208      	moveq	r2, #8
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de0:	6865      	ldr	r5, [r4, #4]
 8004de2:	60a5      	str	r5, [r4, #8]
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	f2c0 8095 	blt.w	8004f14 <_printf_i+0x20c>
 8004dea:	6821      	ldr	r1, [r4, #0]
 8004dec:	f021 0104 	bic.w	r1, r1, #4
 8004df0:	6021      	str	r1, [r4, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d13d      	bne.n	8004e72 <_printf_i+0x16a>
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	f040 808e 	bne.w	8004f18 <_printf_i+0x210>
 8004dfc:	4665      	mov	r5, ip
 8004dfe:	2a08      	cmp	r2, #8
 8004e00:	d10b      	bne.n	8004e1a <_printf_i+0x112>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	07db      	lsls	r3, r3, #31
 8004e06:	d508      	bpl.n	8004e1a <_printf_i+0x112>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	6862      	ldr	r2, [r4, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	bfde      	ittt	le
 8004e10:	2330      	movle	r3, #48	; 0x30
 8004e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e1a:	ebac 0305 	sub.w	r3, ip, r5
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	f8cd 8000 	str.w	r8, [sp]
 8004e24:	463b      	mov	r3, r7
 8004e26:	aa03      	add	r2, sp, #12
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff fef6 	bl	8004c1c <_printf_common>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d14d      	bne.n	8004ed0 <_printf_i+0x1c8>
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	b005      	add	sp, #20
 8004e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e3e:	4839      	ldr	r0, [pc, #228]	; (8004f24 <_printf_i+0x21c>)
 8004e40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e44:	6813      	ldr	r3, [r2, #0]
 8004e46:	6821      	ldr	r1, [r4, #0]
 8004e48:	1d1d      	adds	r5, r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6015      	str	r5, [r2, #0]
 8004e4e:	060a      	lsls	r2, r1, #24
 8004e50:	d50b      	bpl.n	8004e6a <_printf_i+0x162>
 8004e52:	07ca      	lsls	r2, r1, #31
 8004e54:	bf44      	itt	mi
 8004e56:	f041 0120 	orrmi.w	r1, r1, #32
 8004e5a:	6021      	strmi	r1, [r4, #0]
 8004e5c:	b91b      	cbnz	r3, 8004e66 <_printf_i+0x15e>
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	f022 0220 	bic.w	r2, r2, #32
 8004e64:	6022      	str	r2, [r4, #0]
 8004e66:	2210      	movs	r2, #16
 8004e68:	e7b7      	b.n	8004dda <_printf_i+0xd2>
 8004e6a:	064d      	lsls	r5, r1, #25
 8004e6c:	bf48      	it	mi
 8004e6e:	b29b      	uxthmi	r3, r3
 8004e70:	e7ef      	b.n	8004e52 <_printf_i+0x14a>
 8004e72:	4665      	mov	r5, ip
 8004e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e78:	fb02 3311 	mls	r3, r2, r1, r3
 8004e7c:	5cc3      	ldrb	r3, [r0, r3]
 8004e7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e82:	460b      	mov	r3, r1
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d1f5      	bne.n	8004e74 <_printf_i+0x16c>
 8004e88:	e7b9      	b.n	8004dfe <_printf_i+0xf6>
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	6825      	ldr	r5, [r4, #0]
 8004e8e:	6961      	ldr	r1, [r4, #20]
 8004e90:	1d18      	adds	r0, r3, #4
 8004e92:	6010      	str	r0, [r2, #0]
 8004e94:	0628      	lsls	r0, r5, #24
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	d501      	bpl.n	8004e9e <_printf_i+0x196>
 8004e9a:	6019      	str	r1, [r3, #0]
 8004e9c:	e002      	b.n	8004ea4 <_printf_i+0x19c>
 8004e9e:	066a      	lsls	r2, r5, #25
 8004ea0:	d5fb      	bpl.n	8004e9a <_printf_i+0x192>
 8004ea2:	8019      	strh	r1, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	4665      	mov	r5, ip
 8004eaa:	e7b9      	b.n	8004e20 <_printf_i+0x118>
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	1d19      	adds	r1, r3, #4
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	681d      	ldr	r5, [r3, #0]
 8004eb4:	6862      	ldr	r2, [r4, #4]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f7fb f991 	bl	80001e0 <memchr>
 8004ebe:	b108      	cbz	r0, 8004ec4 <_printf_i+0x1bc>
 8004ec0:	1b40      	subs	r0, r0, r5
 8004ec2:	6060      	str	r0, [r4, #4]
 8004ec4:	6863      	ldr	r3, [r4, #4]
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ece:	e7a7      	b.n	8004e20 <_printf_i+0x118>
 8004ed0:	6923      	ldr	r3, [r4, #16]
 8004ed2:	462a      	mov	r2, r5
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	47c0      	blx	r8
 8004eda:	3001      	adds	r0, #1
 8004edc:	d0aa      	beq.n	8004e34 <_printf_i+0x12c>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	079b      	lsls	r3, r3, #30
 8004ee2:	d413      	bmi.n	8004f0c <_printf_i+0x204>
 8004ee4:	68e0      	ldr	r0, [r4, #12]
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	4298      	cmp	r0, r3
 8004eea:	bfb8      	it	lt
 8004eec:	4618      	movlt	r0, r3
 8004eee:	e7a3      	b.n	8004e38 <_printf_i+0x130>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	464a      	mov	r2, r9
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	47c0      	blx	r8
 8004efa:	3001      	adds	r0, #1
 8004efc:	d09a      	beq.n	8004e34 <_printf_i+0x12c>
 8004efe:	3501      	adds	r5, #1
 8004f00:	68e3      	ldr	r3, [r4, #12]
 8004f02:	9a03      	ldr	r2, [sp, #12]
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	42ab      	cmp	r3, r5
 8004f08:	dcf2      	bgt.n	8004ef0 <_printf_i+0x1e8>
 8004f0a:	e7eb      	b.n	8004ee4 <_printf_i+0x1dc>
 8004f0c:	2500      	movs	r5, #0
 8004f0e:	f104 0919 	add.w	r9, r4, #25
 8004f12:	e7f5      	b.n	8004f00 <_printf_i+0x1f8>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1ac      	bne.n	8004e72 <_printf_i+0x16a>
 8004f18:	7803      	ldrb	r3, [r0, #0]
 8004f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f22:	e76c      	b.n	8004dfe <_printf_i+0xf6>
 8004f24:	08005269 	.word	0x08005269
 8004f28:	0800527a 	.word	0x0800527a

08004f2c <_putc_r>:
 8004f2c:	b570      	push	{r4, r5, r6, lr}
 8004f2e:	460d      	mov	r5, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	4606      	mov	r6, r0
 8004f34:	b118      	cbz	r0, 8004f3e <_putc_r+0x12>
 8004f36:	6983      	ldr	r3, [r0, #24]
 8004f38:	b90b      	cbnz	r3, 8004f3e <_putc_r+0x12>
 8004f3a:	f7ff fb99 	bl	8004670 <__sinit>
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <_putc_r+0x60>)
 8004f40:	429c      	cmp	r4, r3
 8004f42:	d112      	bne.n	8004f6a <_putc_r+0x3e>
 8004f44:	6874      	ldr	r4, [r6, #4]
 8004f46:	68a3      	ldr	r3, [r4, #8]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	60a3      	str	r3, [r4, #8]
 8004f4e:	da16      	bge.n	8004f7e <_putc_r+0x52>
 8004f50:	69a2      	ldr	r2, [r4, #24]
 8004f52:	4293      	cmp	r3, r2
 8004f54:	db02      	blt.n	8004f5c <_putc_r+0x30>
 8004f56:	b2eb      	uxtb	r3, r5
 8004f58:	2b0a      	cmp	r3, #10
 8004f5a:	d110      	bne.n	8004f7e <_putc_r+0x52>
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4630      	mov	r0, r6
 8004f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f66:	f7ff b9d3 	b.w	8004310 <__swbuf_r>
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <_putc_r+0x64>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	d101      	bne.n	8004f74 <_putc_r+0x48>
 8004f70:	68b4      	ldr	r4, [r6, #8]
 8004f72:	e7e8      	b.n	8004f46 <_putc_r+0x1a>
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <_putc_r+0x68>)
 8004f76:	429c      	cmp	r4, r3
 8004f78:	bf08      	it	eq
 8004f7a:	68f4      	ldreq	r4, [r6, #12]
 8004f7c:	e7e3      	b.n	8004f46 <_putc_r+0x1a>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	6022      	str	r2, [r4, #0]
 8004f84:	701d      	strb	r5, [r3, #0]
 8004f86:	b2e8      	uxtb	r0, r5
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08005218 	.word	0x08005218
 8004f90:	08005238 	.word	0x08005238
 8004f94:	080051f8 	.word	0x080051f8

08004f98 <_sbrk_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4c06      	ldr	r4, [pc, #24]	; (8004fb4 <_sbrk_r+0x1c>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	f7fc f828 	bl	8000ff8 <_sbrk>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_sbrk_r+0x1a>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_sbrk_r+0x1a>
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000200 	.word	0x20000200

08004fb8 <__sread>:
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	460c      	mov	r4, r1
 8004fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc0:	f000 f896 	bl	80050f0 <_read_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	bfab      	itete	ge
 8004fc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fca:	89a3      	ldrhlt	r3, [r4, #12]
 8004fcc:	181b      	addge	r3, r3, r0
 8004fce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fd2:	bfac      	ite	ge
 8004fd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fd6:	81a3      	strhlt	r3, [r4, #12]
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <__swrite>:
 8004fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	461f      	mov	r7, r3
 8004fe0:	898b      	ldrh	r3, [r1, #12]
 8004fe2:	05db      	lsls	r3, r3, #23
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	4616      	mov	r6, r2
 8004fea:	d505      	bpl.n	8004ff8 <__swrite+0x1e>
 8004fec:	2302      	movs	r3, #2
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	f000 f868 	bl	80050c8 <_lseek_r>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	4632      	mov	r2, r6
 8005006:	463b      	mov	r3, r7
 8005008:	4628      	mov	r0, r5
 800500a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500e:	f000 b817 	b.w	8005040 <_write_r>

08005012 <__sseek>:
 8005012:	b510      	push	{r4, lr}
 8005014:	460c      	mov	r4, r1
 8005016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501a:	f000 f855 	bl	80050c8 <_lseek_r>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	bf15      	itete	ne
 8005024:	6560      	strne	r0, [r4, #84]	; 0x54
 8005026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800502a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800502e:	81a3      	strheq	r3, [r4, #12]
 8005030:	bf18      	it	ne
 8005032:	81a3      	strhne	r3, [r4, #12]
 8005034:	bd10      	pop	{r4, pc}

08005036 <__sclose>:
 8005036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503a:	f000 b813 	b.w	8005064 <_close_r>
	...

08005040 <_write_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4c07      	ldr	r4, [pc, #28]	; (8005060 <_write_r+0x20>)
 8005044:	4605      	mov	r5, r0
 8005046:	4608      	mov	r0, r1
 8005048:	4611      	mov	r1, r2
 800504a:	2200      	movs	r2, #0
 800504c:	6022      	str	r2, [r4, #0]
 800504e:	461a      	mov	r2, r3
 8005050:	f7fb ff81 	bl	8000f56 <_write>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_write_r+0x1e>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	b103      	cbz	r3, 800505e <_write_r+0x1e>
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	20000200 	.word	0x20000200

08005064 <_close_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4c06      	ldr	r4, [pc, #24]	; (8005080 <_close_r+0x1c>)
 8005068:	2300      	movs	r3, #0
 800506a:	4605      	mov	r5, r0
 800506c:	4608      	mov	r0, r1
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	f7fb ff8d 	bl	8000f8e <_close>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_close_r+0x1a>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	b103      	cbz	r3, 800507e <_close_r+0x1a>
 800507c:	602b      	str	r3, [r5, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	20000200 	.word	0x20000200

08005084 <_fstat_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4c07      	ldr	r4, [pc, #28]	; (80050a4 <_fstat_r+0x20>)
 8005088:	2300      	movs	r3, #0
 800508a:	4605      	mov	r5, r0
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	f7fb ff88 	bl	8000fa6 <_fstat>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d102      	bne.n	80050a0 <_fstat_r+0x1c>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	b103      	cbz	r3, 80050a0 <_fstat_r+0x1c>
 800509e:	602b      	str	r3, [r5, #0]
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	20000200 	.word	0x20000200

080050a8 <_isatty_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4c06      	ldr	r4, [pc, #24]	; (80050c4 <_isatty_r+0x1c>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4605      	mov	r5, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	f7fb ff87 	bl	8000fc6 <_isatty>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_isatty_r+0x1a>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_isatty_r+0x1a>
 80050c0:	602b      	str	r3, [r5, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	20000200 	.word	0x20000200

080050c8 <_lseek_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4c07      	ldr	r4, [pc, #28]	; (80050e8 <_lseek_r+0x20>)
 80050cc:	4605      	mov	r5, r0
 80050ce:	4608      	mov	r0, r1
 80050d0:	4611      	mov	r1, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f7fb ff80 	bl	8000fdc <_lseek>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_lseek_r+0x1e>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_lseek_r+0x1e>
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20000200 	.word	0x20000200

080050ec <__malloc_lock>:
 80050ec:	4770      	bx	lr

080050ee <__malloc_unlock>:
 80050ee:	4770      	bx	lr

080050f0 <_read_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4c07      	ldr	r4, [pc, #28]	; (8005110 <_read_r+0x20>)
 80050f4:	4605      	mov	r5, r0
 80050f6:	4608      	mov	r0, r1
 80050f8:	4611      	mov	r1, r2
 80050fa:	2200      	movs	r2, #0
 80050fc:	6022      	str	r2, [r4, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	f7fb ff0c 	bl	8000f1c <_read>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d102      	bne.n	800510e <_read_r+0x1e>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	b103      	cbz	r3, 800510e <_read_r+0x1e>
 800510c:	602b      	str	r3, [r5, #0]
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	20000200 	.word	0x20000200

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
