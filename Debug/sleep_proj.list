
sleep_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a4  080052a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  0800531c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800531c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5ed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d25  00000000  00000000  0002c68d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017103  00000000  00000000  0002fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009840  00000000  00000000  00046ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cddf  00000000  00000000  00050523  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000dd380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005124 	.word	0x08005124

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005124 	.word	0x08005124

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fdcc 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f82e 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f9c4 	bl	8000918 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f9a2 	bl	80008d8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000594:	f000 f894 	bl	80006c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000598:	f000 f918 	bl	80007cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f972 	bl	8000884 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2 );
 80005a0:	2104      	movs	r1, #4
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0x54>)
 80005a4:	f002 f98c 	bl	80028c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <main+0x58>)
 80005ac:	f002 f988 	bl	80028c0 <HAL_TIM_PWM_Start>

	printf("Starting my application...\r\n");
 80005b0:	480a      	ldr	r0, [pc, #40]	; (80005dc <main+0x5c>)
 80005b2:	f003 fe93 	bl	80042dc <puts>

	//** Fixed size command of 3 bytes *[]#, Initialise
	//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 21);	//3); //
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9); //dma return
 80005b6:	2209      	movs	r2, #9
 80005b8:	4909      	ldr	r1, [pc, #36]	; (80005e0 <main+0x60>)
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <main+0x64>)
 80005bc:	f002 fe50 	bl	8003260 <HAL_UART_Receive_DMA>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fe1f 	bl	8001204 <HAL_Delay>
	process_keystroke();
 80005c6:	f000 fae3 	bl	8000b90 <process_keystroke>
		HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
			count++;
	}
	  if(huart2.RxXferCount > count)
		  count=huart2.RxXferCount;*/
	  HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f000 fe1a 	bl	8001204 <HAL_Delay>
  {	HAL_Delay(100);
 80005d0:	e7f6      	b.n	80005c0 <main+0x40>
 80005d2:	bf00      	nop
 80005d4:	20000160 	.word	0x20000160
 80005d8:	20000104 	.word	0x20000104
 80005dc:	0800513c 	.word	0x0800513c
 80005e0:	20000144 	.word	0x20000144
 80005e4:	200001a0 	.word	0x200001a0

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fde0 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <SystemClock_Config+0xd0>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a28      	ldr	r2, [pc, #160]	; (80006b8 <SystemClock_Config+0xd0>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <SystemClock_Config+0xd0>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd4>)
 8000636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fc96 	bl	8001fa4 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 fac9 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fef0 	bl	8002484 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006aa:	f000 fab3 	bl	8000c14 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b092      	sub	sp, #72	; 0x48
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]
 80006e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2220      	movs	r2, #32
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 fd66 	bl	80041bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f0:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <MX_TIM1_Init+0x104>)
 80006f2:	4a35      	ldr	r2, [pc, #212]	; (80007c8 <MX_TIM1_Init+0x108>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 17000;
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <MX_TIM1_Init+0x104>)
 80006f8:	f244 2268 	movw	r2, #17000	; 0x4268
 80006fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <MX_TIM1_Init+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8000704:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <MX_TIM1_Init+0x104>)
 8000706:	f241 3288 	movw	r2, #5000	; 0x1388
 800070a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <MX_TIM1_Init+0x104>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_TIM1_Init+0x104>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <MX_TIM1_Init+0x104>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071e:	4829      	ldr	r0, [pc, #164]	; (80007c4 <MX_TIM1_Init+0x104>)
 8000720:	f002 f8a2 	bl	8002868 <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 fa73 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073a:	4619      	mov	r1, r3
 800073c:	4821      	ldr	r0, [pc, #132]	; (80007c4 <MX_TIM1_Init+0x104>)
 800073e:	f002 fbe9 	bl	8002f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000748:	f000 fa64 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074c:	2360      	movs	r3, #96	; 0x60
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8000750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000762:	2300      	movs	r3, #0
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800076a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076e:	2204      	movs	r2, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_TIM1_Init+0x104>)
 8000774:	f002 f8d6 	bl	8002924 <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800077e:	f000 fa49 	bl	8000c14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <MX_TIM1_Init+0x104>)
 80007a6:	f002 fc23 	bl	8002ff0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80007b0:	f000 fa30 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007b4:	4803      	ldr	r0, [pc, #12]	; (80007c4 <MX_TIM1_Init+0x104>)
 80007b6:	f000 fa95 	bl	8000ce4 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3748      	adds	r7, #72	; 0x48
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000160 	.word	0x20000160
 80007c8:	40010000 	.word	0x40010000

080007cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_TIM3_Init+0xb0>)
 80007f0:	4a23      	ldr	r2, [pc, #140]	; (8000880 <MX_TIM3_Init+0xb4>)
 80007f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_TIM3_Init+0xb0>)
 80007f6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80007fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_TIM3_Init+0xb0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_TIM3_Init+0xb0>)
 8000804:	f241 3288 	movw	r2, #5000	; 0x1388
 8000808:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM3_Init+0xb0>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM3_Init+0xb0>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000816:	4819      	ldr	r0, [pc, #100]	; (800087c <MX_TIM3_Init+0xb0>)
 8000818:	f002 f826 	bl	8002868 <HAL_TIM_PWM_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000822:	f000 f9f7 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_TIM3_Init+0xb0>)
 8000836:	f002 fb6d 	bl	8002f14 <HAL_TIMEx_MasterConfigSynchronization>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000840:	f000 f9e8 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	2360      	movs	r3, #96	; 0x60
 8000846:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1400;
 8000848:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800084c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM3_Init+0xb0>)
 800085e:	f002 f861 	bl	8002924 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000868:	f000 f9d4 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <MX_TIM3_Init+0xb0>)
 800086e:	f000 fa39 	bl	8000ce4 <HAL_TIM_MspPostInit>

}
 8000872:	bf00      	nop
 8000874:	3728      	adds	r7, #40	; 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000104 	.word	0x20000104
 8000880:	40000400 	.word	0x40000400

08000884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART2_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x4c>)
 80008bc:	f002 fbea 	bl	8003094 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f9a5 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001a0 	.word	0x200001a0
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA_Init+0x3c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <MX_DMA_Init+0x3c>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_DMA_Init+0x3c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2010      	movs	r0, #16
 8000900:	f000 fd7d 	bl	80013fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000904:	2010      	movs	r0, #16
 8000906:	f000 fd96 	bl	8001436 <HAL_NVIC_EnableIRQ>

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2c      	ldr	r2, [pc, #176]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_GPIO_Init+0xd0>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_GPIO_Init+0xd4>)
 80009a4:	f001 fae4 	bl	8001f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <MX_GPIO_Init+0xd8>)
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_GPIO_Init+0xdc>)
 80009be:	f001 f955 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c2:	2320      	movs	r3, #32
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0xd4>)
 80009da:	f001 f947 	bl	8001c6c <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000
 80009f0:	10210000 	.word	0x10210000
 80009f4:	40020800 	.word	0x40020800

080009f8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a00:	1d39      	adds	r1, r7, #4
 8000a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a06:	2201      	movs	r2, #1
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <__io_putchar+0x20>)
 8000a0a:	f002 fb90 	bl	800312e <HAL_UART_Transmit>

  return ch;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200001a0 	.word	0x200001a0

08000a1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
	echo_ptr=rxBuf+count;
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_UART_RxCpltCallback+0xe0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a35      	ldr	r2, [pc, #212]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000a30:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_UART_RxCpltCallback+0xe8>)
 8000a34:	6819      	ldr	r1, [r3, #0]
 8000a36:	230a      	movs	r3, #10
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4833      	ldr	r0, [pc, #204]	; (8000b08 <HAL_UART_RxCpltCallback+0xec>)
 8000a3c:	f002 fb77 	bl	800312e <HAL_UART_Transmit>
	printf("\r\n");
 8000a40:	4832      	ldr	r0, [pc, #200]	; (8000b0c <HAL_UART_RxCpltCallback+0xf0>)
 8000a42:	f003 fc4b 	bl	80042dc <puts>
	switch(myUART_State)
 8000a46:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <HAL_UART_RxCpltCallback+0xf4>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <HAL_UART_RxCpltCallback+0x38>
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d037      	beq.n	8000ac2 <HAL_UART_RxCpltCallback+0xa6>
 8000a52:	e047      	b.n	8000ae4 <HAL_UART_RxCpltCallback+0xc8>
	{
		case UT_START:
			if(rxBuf[0] == '*' && rxBuf[2] == '#')
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b2a      	cmp	r3, #42	; 0x2a
 8000a5a:	d128      	bne.n	8000aae <HAL_UART_RxCpltCallback+0x92>
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	2b23      	cmp	r3, #35	; 0x23
 8000a62:	d124      	bne.n	8000aae <HAL_UART_RxCpltCallback+0x92>
			{
				//Start UART DMA receive based on User specified length (Caviat: always ensure user requested)
				rxBuf[1]=rxBuf[1]-'0';
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	3b30      	subs	r3, #48	; 0x30
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a6e:	705a      	strb	r2, [r3, #1]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	2b19      	cmp	r3, #25
 8000a76:	d811      	bhi.n	8000a9c <HAL_UART_RxCpltCallback+0x80>
				{
					printf("Send CMD %i characters long:\r\n", rxBuf[1]);
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4825      	ldr	r0, [pc, #148]	; (8000b14 <HAL_UART_RxCpltCallback+0xf8>)
 8000a80:	f003 fba4 	bl	80041cc <iprintf>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, rxBuf[1]);
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	491c      	ldr	r1, [pc, #112]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000a8e:	481e      	ldr	r0, [pc, #120]	; (8000b08 <HAL_UART_RxCpltCallback+0xec>)
 8000a90:	f002 fbe6 	bl	8003260 <HAL_UART_Receive_DMA>
					myUART_State = UT_APP;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <HAL_UART_RxCpltCallback+0xf4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
				if(rxBuf[1] <= sizeof(rxBuf))
 8000a9a:	e011      	b.n	8000ac0 <HAL_UART_RxCpltCallback+0xa4>
				}
				else
				{
					printf("Invalid size\r\n");
 8000a9c:	481e      	ldr	r0, [pc, #120]	; (8000b18 <HAL_UART_RxCpltCallback+0xfc>)
 8000a9e:	f003 fc1d 	bl	80042dc <puts>
					HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	4916      	ldr	r1, [pc, #88]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <HAL_UART_RxCpltCallback+0xec>)
 8000aa8:	f002 fbda 	bl	8003260 <HAL_UART_Receive_DMA>
				if(rxBuf[1] <= sizeof(rxBuf))
 8000aac:	e008      	b.n	8000ac0 <HAL_UART_RxCpltCallback+0xa4>
				}
			}
			else
			{
				printf("Invalid command\r\n");
 8000aae:	481b      	ldr	r0, [pc, #108]	; (8000b1c <HAL_UART_RxCpltCallback+0x100>)
 8000ab0:	f003 fc14 	bl	80042dc <puts>
				HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	4912      	ldr	r1, [pc, #72]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000ab8:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_UART_RxCpltCallback+0xec>)
 8000aba:	f002 fbd1 	bl	8003260 <HAL_UART_Receive_DMA>
			}
			break;
 8000abe:	e011      	b.n	8000ae4 <HAL_UART_RxCpltCallback+0xc8>
 8000ac0:	e010      	b.n	8000ae4 <HAL_UART_RxCpltCallback+0xc8>

		case UT_APP:
			application_handling(rxBuf);
 8000ac2:	480f      	ldr	r0, [pc, #60]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000ac4:	f000 f82c 	bl	8000b20 <application_handling>
			memset(rxBuf,'\0', sizeof(rxBuf));
 8000ac8:	2219      	movs	r2, #25
 8000aca:	2100      	movs	r1, #0
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000ace:	f003 fb75 	bl	80041bc <memset>
			//Get back to state 1
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	490a      	ldr	r1, [pc, #40]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000ad6:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_UART_RxCpltCallback+0xec>)
 8000ad8:	f002 fbc2 	bl	8003260 <HAL_UART_Receive_DMA>
			myUART_State = UT_START;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_UART_RxCpltCallback+0xf4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
			break;
 8000ae2:	bf00      	nop
	}

//resets index for echo
	memset(rxBuf,'\0', sizeof(rxBuf));
 8000ae4:	2219      	movs	r2, #25
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_RxCpltCallback+0xe4>)
 8000aea:	f003 fb67 	bl	80041bc <memset>
	count=0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_UART_RxCpltCallback+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
//			printf("Invalid Command!\r\n");
//		}
//	}

//	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 3);
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	20000144 	.word	0x20000144
 8000b04:	20000100 	.word	0x20000100
 8000b08:	200001a0 	.word	0x200001a0
 8000b0c:	08005158 	.word	0x08005158
 8000b10:	20000090 	.word	0x20000090
 8000b14:	0800515c 	.word	0x0800515c
 8000b18:	0800517c 	.word	0x0800517c
 8000b1c:	0800518c 	.word	0x0800518c

08000b20 <application_handling>:


//UART Application handling function
void application_handling(char *cmd)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(strstr(cmd, "LED ON") != NULL)
 8000b28:	4913      	ldr	r1, [pc, #76]	; (8000b78 <application_handling+0x58>)
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f003 fbde 	bl	80042ec <strstr>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d008      	beq.n	8000b48 <application_handling+0x28>
	{
		//Turn LED ON (GPIOA, GPIO_PIN_5);
		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2120      	movs	r1, #32
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <application_handling+0x5c>)
 8000b3c:	f001 fa18 	bl	8001f70 <HAL_GPIO_WritePin>
		printf("LED Turned ON\r\n");
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <application_handling+0x60>)
 8000b42:	f003 fbcb 	bl	80042dc <puts>
	else
	{
		//Invalid command
		printf("Invalid Command!\r\n");
	}
}
 8000b46:	e012      	b.n	8000b6e <application_handling+0x4e>
	else if(strstr(cmd, "LED OFF") != NULL)
 8000b48:	490e      	ldr	r1, [pc, #56]	; (8000b84 <application_handling+0x64>)
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f003 fbce 	bl	80042ec <strstr>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <application_handling+0x48>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <application_handling+0x5c>)
 8000b5c:	f001 fa08 	bl	8001f70 <HAL_GPIO_WritePin>
		printf("LED Turned OFF\r\n");
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <application_handling+0x68>)
 8000b62:	f003 fbbb 	bl	80042dc <puts>
}
 8000b66:	e002      	b.n	8000b6e <application_handling+0x4e>
		printf("Invalid Command!\r\n");
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <application_handling+0x6c>)
 8000b6a:	f003 fbb7 	bl	80042dc <puts>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	080051a0 	.word	0x080051a0
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	080051a8 	.word	0x080051a8
 8000b84:	080051b8 	.word	0x080051b8
 8000b88:	080051c0 	.word	0x080051c0
 8000b8c:	080051d0 	.word	0x080051d0

08000b90 <process_keystroke>:
/*
 * function will echo last keystroke, if '\n' it will see if it is a valid command
 */
void process_keystroke()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if(rxBuf[count] != '\0')
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <process_keystroke+0x74>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1b      	ldr	r2, [pc, #108]	; (8000c08 <process_keystroke+0x78>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d02f      	beq.n	8000c00 <process_keystroke+0x70>
	{	echo_ptr=rxBuf+count;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <process_keystroke+0x74>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <process_keystroke+0x78>)
 8000ba8:	4413      	add	r3, r2
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <process_keystroke+0x7c>)
 8000bac:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,(uint8_t *)echo_ptr,1,10);
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <process_keystroke+0x7c>)
 8000bb0:	6819      	ldr	r1, [r3, #0]
 8000bb2:	230a      	movs	r3, #10
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4816      	ldr	r0, [pc, #88]	; (8000c10 <process_keystroke+0x80>)
 8000bb8:	f002 fab9 	bl	800312e <HAL_UART_Transmit>

		if(rxBuf[count] == '\r')
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <process_keystroke+0x74>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <process_keystroke+0x78>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	2b0d      	cmp	r3, #13
 8000bc6:	d116      	bne.n	8000bf6 <process_keystroke+0x66>
		{	//command may have been submitted.
			printf("\n");
 8000bc8:	200a      	movs	r0, #10
 8000bca:	f003 fb17 	bl	80041fc <putchar>
			application_handling(rxBuf);
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <process_keystroke+0x78>)
 8000bd0:	f7ff ffa6 	bl	8000b20 <application_handling>
			HAL_UART_DMAStop(&huart2);
 8000bd4:	480e      	ldr	r0, [pc, #56]	; (8000c10 <process_keystroke+0x80>)
 8000bd6:	f002 fbc3 	bl	8003360 <HAL_UART_DMAStop>

			//printf("Message!\r\n");
		//	MX_DMA_Init();
			//MX_USART2_UART_Init();
			//HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 7); //dma return
			memset(rxBuf,'\0', sizeof(rxBuf));
 8000bda:	2219      	movs	r2, #25
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <process_keystroke+0x78>)
 8000be0:	f003 faec 	bl	80041bc <memset>
			count=0;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <process_keystroke+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxBuf, 9);
 8000bea:	2209      	movs	r2, #9
 8000bec:	4906      	ldr	r1, [pc, #24]	; (8000c08 <process_keystroke+0x78>)
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <process_keystroke+0x80>)
 8000bf0:	f002 fb36 	bl	8003260 <HAL_UART_Receive_DMA>
		}
		else
			count++;
	}

}
 8000bf4:	e004      	b.n	8000c00 <process_keystroke+0x70>
			count++;
 8000bf6:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <process_keystroke+0x74>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a01      	ldr	r2, [pc, #4]	; (8000c04 <process_keystroke+0x74>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000008c 	.word	0x2000008c
 8000c08:	20000144 	.word	0x20000144
 8000c0c:	20000100 	.word	0x20000100
 8000c10:	200001a0 	.word	0x200001a0

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c62:	2007      	movs	r0, #7
 8000c64:	f000 fbc0 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_TIM_PWM_MspInit+0x64>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10e      	bne.n	8000ca4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_TIM_PWM_MspInit+0x68>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_TIM_PWM_MspInit+0x68>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_TIM_PWM_MspInit+0x68>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ca2:	e012      	b.n	8000cca <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_TIM_PWM_MspInit+0x6c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_PWM_MspInit+0x68>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_PWM_MspInit+0x68>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_TIM_PWM_MspInit+0x68>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a24      	ldr	r2, [pc, #144]	; (8000d94 <HAL_TIM_MspPostInit+0xb0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d11f      	bne.n	8000d46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <HAL_TIM_MspPostInit+0xb4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <HAL_TIM_MspPostInit+0xb4>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_TIM_MspPostInit+0xb4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4817      	ldr	r0, [pc, #92]	; (8000d9c <HAL_TIM_MspPostInit+0xb8>)
 8000d40:	f000 ff94 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d44:	e022      	b.n	8000d8c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <HAL_TIM_MspPostInit+0xbc>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d11d      	bne.n	8000d8c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_TIM_MspPostInit+0xb4>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_TIM_MspPostInit+0xb4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_TIM_MspPostInit+0xb4>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d6c:	2340      	movs	r3, #64	; 0x40
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_TIM_MspPostInit+0xb8>)
 8000d88:	f000 ff70 	bl	8001c6c <HAL_GPIO_Init>
}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40010000 	.word	0x40010000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40000400 	.word	0x40000400

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <HAL_UART_MspInit+0xf0>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d162      	bne.n	8000e8c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a32      	ldr	r2, [pc, #200]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a2b      	ldr	r2, [pc, #172]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <HAL_UART_MspInit+0xf4>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4820      	ldr	r0, [pc, #128]	; (8000e9c <HAL_UART_MspInit+0xf8>)
 8000e1a:	f000 ff27 	bl	8001c6c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_UART_MspInit+0x100>)
 8000e22:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e62:	f000 fb03 	bl	800146c <HAL_DMA_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e6c:	f7ff fed2 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_UART_MspInit+0xfc>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2026      	movs	r0, #38	; 0x26
 8000e82:	f000 fabc 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e86:	2026      	movs	r0, #38	; 0x26
 8000e88:	f000 fad5 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	200000a0 	.word	0x200000a0
 8000ea4:	40026088 	.word	0x40026088

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f962 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <DMA1_Stream5_IRQHandler+0x10>)
 8000f0a:	f000 fc47 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000a0 	.word	0x200000a0

08000f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <USART2_IRQHandler+0x10>)
 8000f1e:	f002 fa7b 	bl	8003418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001a0 	.word	0x200001a0

08000f2c <_read>:
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e00a      	b.n	8000f54 <_read+0x28>
 8000f3e:	f3af 8000 	nop.w
 8000f42:	4601      	mov	r1, r0
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf0      	blt.n	8000f3e <_read+0x12>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_write>:
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e009      	b.n	8000f8c <_write+0x26>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fd39 	bl	80009f8 <__io_putchar>
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf1      	blt.n	8000f78 <_write+0x12>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_close>:
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_fstat>:
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_lseek>:
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x50>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x16>
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <_sbrk+0x50>)
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <_sbrk+0x54>)
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <_sbrk+0x50>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <_sbrk+0x50>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4413      	add	r3, r2
 800102c:	466a      	mov	r2, sp
 800102e:	4293      	cmp	r3, r2
 8001030:	d907      	bls.n	8001042 <_sbrk+0x3a>
 8001032:	f003 f899 	bl	8004168 <__errno>
 8001036:	4602      	mov	r2, r0
 8001038:	230c      	movs	r3, #12
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	e006      	b.n	8001050 <_sbrk+0x48>
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <_sbrk+0x50>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <_sbrk+0x50>)
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000094 	.word	0x20000094
 800105c:	200001e8 	.word	0x200001e8

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <SystemInit+0x60>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <SystemInit+0x60>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <SystemInit+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <SystemInit+0x64>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <SystemInit+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <SystemInit+0x64>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <SystemInit+0x64>)
 800108c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <SystemInit+0x64>)
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <SystemInit+0x68>)
 800109a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <SystemInit+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <SystemInit+0x64>)
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SystemInit+0x60>)
 80010b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b4:	609a      	str	r2, [r3, #8]
#endif
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	24003010 	.word	0x24003010

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001104 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010d2:	e003      	b.n	80010dc <LoopCopyDataInit>

080010d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010da:	3104      	adds	r1, #4

080010dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010e4:	d3f6      	bcc.n	80010d4 <CopyDataInit>
  ldr  r2, =_sbss
 80010e6:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010e8:	e002      	b.n	80010f0 <LoopFillZerobss>

080010ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010ec:	f842 3b04 	str.w	r3, [r2], #4

080010f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010f4:	d3f9      	bcc.n	80010ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010f6:	f7ff ffb3 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f003 f83b 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fa3f 	bl	8000580 <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001108:	080052ac 	.word	0x080052ac
  ldr  r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001110:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001114:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001118:	200001e8 	.word	0x200001e8

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_Init+0x40>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <HAL_Init+0x40>)
 8001136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800113a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_Init+0x40>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001148:	2003      	movs	r0, #3
 800114a:	f000 f94d 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f808 	bl	8001164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001154:	f7ff fd66 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023c00 	.word	0x40023c00

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x54>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_InitTick+0x58>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f965 	bl	8001452 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f92d 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x5c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000008 	.word	0x20000008
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008
 80011e8:	200001e0 	.word	0x200001e0

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200001e0 	.word	0x200001e0

08001204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff ffee 	bl	80011ec <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d005      	beq.n	800122a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_Delay+0x40>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800122a:	bf00      	nop
 800122c:	f7ff ffde 	bl	80011ec <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d8f7      	bhi.n	800122c <HAL_Delay+0x28>
  {
  }
}
 800123c:	bf00      	nop
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff8e 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff29 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff3e 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff8e 	bl	800133c <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff31 	bl	80012ac <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff feb8 	bl	80011ec <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e099      	b.n	80015bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a8:	e00f      	b.n	80014ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014aa:	f7ff fe9f 	bl	80011ec <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d908      	bls.n	80014ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2220      	movs	r2, #32
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2203      	movs	r2, #3
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e078      	b.n	80015bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e8      	bne.n	80014aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_DMA_Init+0x158>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b04      	cmp	r3, #4
 8001522:	d107      	bne.n	8001534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4313      	orrs	r3, r2
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4313      	orrs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f023 0307 	bic.w	r3, r3, #7
 800154a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	2b04      	cmp	r3, #4
 800155c:	d117      	bne.n	800158e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fb01 	bl	8001b78 <DMA_CheckFifoParam>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800158a:	2301      	movs	r3, #1
 800158c:	e016      	b.n	80015bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fab8 	bl	8001b0c <DMA_CalcBaseAndBitshift>
 800159c:	4603      	mov	r3, r0
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	223f      	movs	r2, #63	; 0x3f
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	f010803f 	.word	0xf010803f

080015c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Start_IT+0x26>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e040      	b.n	8001670 <HAL_DMA_Start_IT+0xa8>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d12f      	bne.n	8001662 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2202      	movs	r2, #2
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 fa4a 	bl	8001ab0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	223f      	movs	r2, #63	; 0x3f
 8001622:	409a      	lsls	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0216 	orr.w	r2, r2, #22
 8001636:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d007      	beq.n	8001650 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0208 	orr.w	r2, r2, #8
 800164e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e005      	b.n	800166e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800166a:	2302      	movs	r3, #2
 800166c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800166e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001684:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001686:	f7ff fdb1 	bl	80011ec <HAL_GetTick>
 800168a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d008      	beq.n	80016aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e052      	b.n	8001750 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0216 	bic.w	r2, r2, #22
 80016b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <HAL_DMA_Abort+0x62>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0208 	bic.w	r2, r2, #8
 80016e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016fa:	e013      	b.n	8001724 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016fc:	f7ff fd76 	bl	80011ec <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b05      	cmp	r3, #5
 8001708:	d90c      	bls.n	8001724 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e015      	b.n	8001750 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e4      	bne.n	80016fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	223f      	movs	r2, #63	; 0x3f
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d004      	beq.n	8001776 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00c      	b.n	8001790 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2205      	movs	r2, #5
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0201 	bic.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017a8:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <HAL_DMA_IRQHandler+0x258>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a92      	ldr	r2, [pc, #584]	; (80019f8 <HAL_DMA_IRQHandler+0x25c>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0a9b      	lsrs	r3, r3, #10
 80017b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c6:	2208      	movs	r2, #8
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01a      	beq.n	8001808 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0204 	bic.w	r2, r2, #4
 80017ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	2208      	movs	r2, #8
 80017f6:	409a      	lsls	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2201      	movs	r2, #1
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d012      	beq.n	800183e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2201      	movs	r2, #1
 800182c:	409a      	lsls	r2, r3
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f043 0202 	orr.w	r2, r3, #2
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2204      	movs	r2, #4
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d012      	beq.n	8001874 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2204      	movs	r2, #4
 8001862:	409a      	lsls	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f043 0204 	orr.w	r2, r3, #4
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	2210      	movs	r2, #16
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d043      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03c      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2210      	movs	r2, #16
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d018      	beq.n	80018de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d024      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
 80018ca:	e01f      	b.n	800190c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
 80018dc:	e016      	b.n	800190c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0208 	bic.w	r2, r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	2220      	movs	r2, #32
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 808e 	beq.w	8001a3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8086 	beq.w	8001a3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001932:	2220      	movs	r2, #32
 8001934:	409a      	lsls	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b05      	cmp	r3, #5
 8001944:	d136      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0216 	bic.w	r2, r2, #22
 8001954:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001964:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d103      	bne.n	8001976 <HAL_DMA_IRQHandler+0x1da>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0208 	bic.w	r2, r2, #8
 8001984:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	223f      	movs	r2, #63	; 0x3f
 800198c:	409a      	lsls	r2, r3
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d07d      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
        }
        return;
 80019b2:	e078      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d01c      	beq.n	80019fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d108      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d030      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e02b      	b.n	8001a3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d027      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
 80019f2:	e022      	b.n	8001a3a <HAL_DMA_IRQHandler+0x29e>
 80019f4:	20000000 	.word	0x20000000
 80019f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0210 	bic.w	r2, r2, #16
 8001a18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d032      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d022      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2205      	movs	r2, #5
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d307      	bcc.n	8001a82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f2      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x2ca>
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e000      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001aa6:	bf00      	nop
    }
  }
}
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001acc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d108      	bne.n	8001af0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aee:	e007      	b.n	8001b00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	60da      	str	r2, [r3, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3b10      	subs	r3, #16
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <DMA_CalcBaseAndBitshift+0x64>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <DMA_CalcBaseAndBitshift+0x68>)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d909      	bls.n	8001b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	1d1a      	adds	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b4c:	e007      	b.n	8001b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b56:	f023 0303 	bic.w	r3, r3, #3
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	aaaaaaab 	.word	0xaaaaaaab
 8001b74:	080051fc 	.word	0x080051fc

08001b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11f      	bne.n	8001bd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d855      	bhi.n	8001c44 <DMA_CheckFifoParam+0xcc>
 8001b98:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <DMA_CheckFifoParam+0x28>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001bc3 	.word	0x08001bc3
 8001ba8:	08001bb1 	.word	0x08001bb1
 8001bac:	08001c45 	.word	0x08001c45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d045      	beq.n	8001c48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc0:	e042      	b.n	8001c48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bca:	d13f      	bne.n	8001c4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd0:	e03c      	b.n	8001c4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bda:	d121      	bne.n	8001c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d836      	bhi.n	8001c50 <DMA_CheckFifoParam+0xd8>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <DMA_CheckFifoParam+0x70>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001bf9 	.word	0x08001bf9
 8001bec:	08001bff 	.word	0x08001bff
 8001bf0:	08001bf9 	.word	0x08001bf9
 8001bf4:	08001c11 	.word	0x08001c11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8001bfc:	e02f      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d024      	beq.n	8001c54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0e:	e021      	b.n	8001c54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c18:	d11e      	bne.n	8001c58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c1e:	e01b      	b.n	8001c58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d902      	bls.n	8001c2c <DMA_CheckFifoParam+0xb4>
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d003      	beq.n	8001c32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c2a:	e018      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c30:	e015      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00e      	beq.n	8001c5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
      break;
 8001c42:	e00b      	b.n	8001c5c <DMA_CheckFifoParam+0xe4>
      break;
 8001c44:	bf00      	nop
 8001c46:	e00a      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;
 8001c48:	bf00      	nop
 8001c4a:	e008      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;
 8001c4c:	bf00      	nop
 8001c4e:	e006      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;
 8001c50:	bf00      	nop
 8001c52:	e004      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;
 8001c54:	bf00      	nop
 8001c56:	e002      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;   
 8001c58:	bf00      	nop
 8001c5a:	e000      	b.n	8001c5e <DMA_CheckFifoParam+0xe6>
      break;
 8001c5c:	bf00      	nop
    }
  } 
  
  return status; 
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e159      	b.n	8001f3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8148 	bne.w	8001f36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d00b      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b12      	cmp	r3, #18
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0xfc>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a2 	beq.w	8001f36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a55      	ldr	r2, [pc, #340]	; (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_GPIO_Init+0x2e4>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_GPIO_Init+0x2ec>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x202>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_GPIO_Init+0x2f0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x1fe>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <HAL_GPIO_Init+0x2f4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x1fa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_GPIO_Init+0x2f8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x1f6>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a44      	ldr	r2, [pc, #272]	; (8001f68 <HAL_GPIO_Init+0x2fc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x1f2>
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	e008      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e5e:	2307      	movs	r3, #7
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e62:	2303      	movs	r3, #3
 8001e64:	e004      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x204>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f002 0203 	and.w	r2, r2, #3
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4093      	lsls	r3, r2
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e80:	4934      	ldr	r1, [pc, #208]	; (8001f54 <HAL_GPIO_Init+0x2e8>)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb2:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f06:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61fb      	str	r3, [r7, #28]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	2b0f      	cmp	r3, #15
 8001f40:	f67f aea2 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	3724      	adds	r7, #36	; 0x24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	807b      	strh	r3, [r7, #2]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f8c:	e003      	b.n	8001f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8e:	887b      	ldrh	r3, [r7, #2]
 8001f90:	041a      	lsls	r2, r3, #16
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	619a      	str	r2, [r3, #24]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e25b      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d075      	beq.n	80020ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc2:	4ba3      	ldr	r3, [pc, #652]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4b99      	ldr	r3, [pc, #612]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d05b      	beq.n	80020ac <HAL_RCC_OscConfig+0x108>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d157      	bne.n	80020ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e236      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x74>
 800200a:	4b91      	ldr	r3, [pc, #580]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a90      	ldr	r2, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x98>
 8002022:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a8a      	ldr	r2, [pc, #552]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a87      	ldr	r2, [pc, #540]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a83      	ldr	r2, [pc, #524]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b81      	ldr	r3, [pc, #516]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a80      	ldr	r2, [pc, #512]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f8c6 	bl	80011ec <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff f8c2 	bl	80011ec <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1fb      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xc0>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff f8b2 	bl	80011ec <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff f8ae 	bl	80011ec <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1e7      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0xe8>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ba:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1bb      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4952      	ldr	r1, [pc, #328]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b4f      	ldr	r3, [pc, #316]	; (8002254 <HAL_RCC_OscConfig+0x2b0>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff f867 	bl	80011ec <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff f863 	bl	80011ec <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e19c      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4940      	ldr	r1, [pc, #256]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x2b0>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff f846 	bl	80011ec <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7ff f842 	bl	80011ec <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e17b      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d030      	beq.n	80021f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b30      	ldr	r3, [pc, #192]	; (8002258 <HAL_RCC_OscConfig+0x2b4>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff f826 	bl	80011ec <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a4:	f7ff f822 	bl	80011ec <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e15b      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x200>
 80021c2:	e015      	b.n	80021f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_OscConfig+0x2b4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff f80f 	bl	80011ec <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff f80b 	bl	80011ec <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e144      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a0 	beq.w	800233e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x2b8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d121      	bne.n	800227e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_RCC_OscConfig+0x2b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_RCC_OscConfig+0x2b8>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002246:	f7fe ffd1 	bl	80011ec <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	e011      	b.n	8002272 <HAL_RCC_OscConfig+0x2ce>
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	42470000 	.word	0x42470000
 8002258:	42470e80 	.word	0x42470e80
 800225c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe ffc4 	bl	80011ec <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0fd      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b81      	ldr	r3, [pc, #516]	; (8002478 <HAL_RCC_OscConfig+0x4d4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x2f0>
 8002286:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a7c      	ldr	r2, [pc, #496]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	e01c      	b.n	80022ce <HAL_RCC_OscConfig+0x32a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d10c      	bne.n	80022b6 <HAL_RCC_OscConfig+0x312>
 800229c:	4b77      	ldr	r3, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a76      	ldr	r2, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a73      	ldr	r2, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
 80022b4:	e00b      	b.n	80022ce <HAL_RCC_OscConfig+0x32a>
 80022b6:	4b71      	ldr	r3, [pc, #452]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a70      	ldr	r2, [pc, #448]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	4b6e      	ldr	r3, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c6:	4a6d      	ldr	r2, [pc, #436]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022c8:	f023 0304 	bic.w	r3, r3, #4
 80022cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d015      	beq.n	8002302 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7fe ff89 	bl	80011ec <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe ff85 	bl	80011ec <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0bc      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ee      	beq.n	80022de <HAL_RCC_OscConfig+0x33a>
 8002300:	e014      	b.n	800232c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002302:	f7fe ff73 	bl	80011ec <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe ff6f 	bl	80011ec <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0a6      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b52      	ldr	r3, [pc, #328]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a51      	ldr	r2, [pc, #324]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8092 	beq.w	800246c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002348:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b08      	cmp	r3, #8
 8002352:	d05c      	beq.n	800240e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d141      	bne.n	80023e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b48      	ldr	r3, [pc, #288]	; (8002480 <HAL_RCC_OscConfig+0x4dc>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe ff43 	bl	80011ec <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe ff3f 	bl	80011ec <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e078      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	3b01      	subs	r3, #1
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	4933      	ldr	r1, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_RCC_OscConfig+0x4dc>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff18 	bl	80011ec <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe ff14 	bl	80011ec <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e04d      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x41c>
 80023de:	e045      	b.n	800246c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_RCC_OscConfig+0x4dc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7fe ff01 	bl	80011ec <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7fe fefd 	bl	80011ec <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e036      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x44a>
 800240c:	e02e      	b.n	800246c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e029      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_RCC_OscConfig+0x4d8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	429a      	cmp	r2, r3
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d115      	bne.n	8002468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002442:	4013      	ands	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002448:	4293      	cmp	r3, r2
 800244a:	d10d      	bne.n	8002468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40007000 	.word	0x40007000
 800247c:	40023800 	.word	0x40023800
 8002480:	42470060 	.word	0x42470060

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cc      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d90c      	bls.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ae:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0b8      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4a52      	ldr	r2, [pc, #328]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fc:	4b50      	ldr	r3, [pc, #320]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	494d      	ldr	r1, [pc, #308]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d044      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d119      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e07f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d003      	beq.n	8002542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	2b03      	cmp	r3, #3
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e06f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e067      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4934      	ldr	r1, [pc, #208]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7fe fe3a 	bl	80011ec <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe fe36 	bl	80011ec <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e04f      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d20c      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e032      	b.n	8002632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d009      	beq.n	800260a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	490e      	ldr	r1, [pc, #56]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800260a:	f000 f821 	bl	8002650 <HAL_RCC_GetSysClockFreq>
 800260e:	4601      	mov	r1, r0
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	fa21 f303 	lsr.w	r3, r1, r3
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fd9a 	bl	8001164 <HAL_InitTick>

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023c00 	.word	0x40023c00
 8002640:	40023800 	.word	0x40023800
 8002644:	080051e4 	.word	0x080051e4
 8002648:	20000000 	.word	0x20000000
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002666:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d007      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x32>
 8002672:	2b08      	cmp	r3, #8
 8002674:	d008      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x38>
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80b4 	bne.w	80027e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800267e:	60bb      	str	r3, [r7, #8]
       break;
 8002680:	e0b3      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002682:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002684:	60bb      	str	r3, [r7, #8]
      break;
 8002686:	e0b0      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002688:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002690:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d04a      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b55      	ldr	r3, [pc, #340]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	f04f 0400 	mov.w	r4, #0
 80026a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	ea03 0501 	and.w	r5, r3, r1
 80026b4:	ea04 0602 	and.w	r6, r4, r2
 80026b8:	4629      	mov	r1, r5
 80026ba:	4632      	mov	r2, r6
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	0154      	lsls	r4, r2, #5
 80026c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ca:	014b      	lsls	r3, r1, #5
 80026cc:	4619      	mov	r1, r3
 80026ce:	4622      	mov	r2, r4
 80026d0:	1b49      	subs	r1, r1, r5
 80026d2:	eb62 0206 	sbc.w	r2, r2, r6
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	0194      	lsls	r4, r2, #6
 80026e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026e4:	018b      	lsls	r3, r1, #6
 80026e6:	1a5b      	subs	r3, r3, r1
 80026e8:	eb64 0402 	sbc.w	r4, r4, r2
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	00e2      	lsls	r2, r4, #3
 80026f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026fa:	00d9      	lsls	r1, r3, #3
 80026fc:	460b      	mov	r3, r1
 80026fe:	4614      	mov	r4, r2
 8002700:	195b      	adds	r3, r3, r5
 8002702:	eb44 0406 	adc.w	r4, r4, r6
 8002706:	f04f 0100 	mov.w	r1, #0
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	0262      	lsls	r2, r4, #9
 8002710:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002714:	0259      	lsls	r1, r3, #9
 8002716:	460b      	mov	r3, r1
 8002718:	4614      	mov	r4, r2
 800271a:	4618      	mov	r0, r3
 800271c:	4621      	mov	r1, r4
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f04f 0400 	mov.w	r4, #0
 8002724:	461a      	mov	r2, r3
 8002726:	4623      	mov	r3, r4
 8002728:	f7fd fdaa 	bl	8000280 <__aeabi_uldivmod>
 800272c:	4603      	mov	r3, r0
 800272e:	460c      	mov	r4, r1
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e049      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002734:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	f04f 0400 	mov.w	r4, #0
 800273e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	ea03 0501 	and.w	r5, r3, r1
 800274a:	ea04 0602 	and.w	r6, r4, r2
 800274e:	4629      	mov	r1, r5
 8002750:	4632      	mov	r2, r6
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	0154      	lsls	r4, r2, #5
 800275c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002760:	014b      	lsls	r3, r1, #5
 8002762:	4619      	mov	r1, r3
 8002764:	4622      	mov	r2, r4
 8002766:	1b49      	subs	r1, r1, r5
 8002768:	eb62 0206 	sbc.w	r2, r2, r6
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f04f 0400 	mov.w	r4, #0
 8002774:	0194      	lsls	r4, r2, #6
 8002776:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	1a5b      	subs	r3, r3, r1
 800277e:	eb64 0402 	sbc.w	r4, r4, r2
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002790:	00d9      	lsls	r1, r3, #3
 8002792:	460b      	mov	r3, r1
 8002794:	4614      	mov	r4, r2
 8002796:	195b      	adds	r3, r3, r5
 8002798:	eb44 0406 	adc.w	r4, r4, r6
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	02a2      	lsls	r2, r4, #10
 80027a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027aa:	0299      	lsls	r1, r3, #10
 80027ac:	460b      	mov	r3, r1
 80027ae:	4614      	mov	r4, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	4621      	mov	r1, r4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	461a      	mov	r2, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	f7fd fd5f 	bl	8000280 <__aeabi_uldivmod>
 80027c2:	4603      	mov	r3, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	60bb      	str	r3, [r7, #8]
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027e6:	60bb      	str	r3, [r7, #8]
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	68bb      	ldr	r3, [r7, #8]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_RCC_GetHCLKFreq+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff0 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002820:	4601      	mov	r1, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4a03      	ldr	r2, [pc, #12]	; (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	080051f4 	.word	0x080051f4

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffdc 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002848:	4601      	mov	r1, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	080051f4 	.word	0x080051f4

08002868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e01d      	b.n	80028b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe f9f0 	bl	8000c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 f902 	bl	8002ab0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 faf8 	bl	8002ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_TIM_PWM_Start+0x60>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d107      	bne.n	80028f2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d007      	beq.n	8002914 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000

08002924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800293a:	2302      	movs	r3, #2
 800293c:	e0b4      	b.n	8002aa8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b0c      	cmp	r3, #12
 8002952:	f200 809f 	bhi.w	8002a94 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	08002991 	.word	0x08002991
 8002960:	08002a95 	.word	0x08002a95
 8002964:	08002a95 	.word	0x08002a95
 8002968:	08002a95 	.word	0x08002a95
 800296c:	080029d1 	.word	0x080029d1
 8002970:	08002a95 	.word	0x08002a95
 8002974:	08002a95 	.word	0x08002a95
 8002978:	08002a95 	.word	0x08002a95
 800297c:	08002a13 	.word	0x08002a13
 8002980:	08002a95 	.word	0x08002a95
 8002984:	08002a95 	.word	0x08002a95
 8002988:	08002a95 	.word	0x08002a95
 800298c:	08002a53 	.word	0x08002a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f90a 	bl	8002bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0208 	orr.w	r2, r2, #8
 80029aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6999      	ldr	r1, [r3, #24]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	619a      	str	r2, [r3, #24]
      break;
 80029ce:	e062      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f950 	bl	8002c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6999      	ldr	r1, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	021a      	lsls	r2, r3, #8
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	619a      	str	r2, [r3, #24]
      break;
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f99b 	bl	8002d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0208 	orr.w	r2, r2, #8
 8002a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0204 	bic.w	r2, r2, #4
 8002a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69d9      	ldr	r1, [r3, #28]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	61da      	str	r2, [r3, #28]
      break;
 8002a50:	e021      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 f9e5 	bl	8002e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	021a      	lsls	r2, r3, #8
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	61da      	str	r2, [r3, #28]
      break;
 8002a92:	e000      	b.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002a94:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a34      	ldr	r2, [pc, #208]	; (8002b94 <TIM_Base_SetConfig+0xe4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00f      	beq.n	8002ae8 <TIM_Base_SetConfig+0x38>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ace:	d00b      	beq.n	8002ae8 <TIM_Base_SetConfig+0x38>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a31      	ldr	r2, [pc, #196]	; (8002b98 <TIM_Base_SetConfig+0xe8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <TIM_Base_SetConfig+0x38>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a30      	ldr	r2, [pc, #192]	; (8002b9c <TIM_Base_SetConfig+0xec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_Base_SetConfig+0x38>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <TIM_Base_SetConfig+0xf0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d108      	bne.n	8002afa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <TIM_Base_SetConfig+0xe4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01b      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d017      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <TIM_Base_SetConfig+0xe8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <TIM_Base_SetConfig+0xec>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <TIM_Base_SetConfig+0xf0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <TIM_Base_SetConfig+0xf4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <TIM_Base_SetConfig+0xf8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0x8a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <TIM_Base_SetConfig+0xfc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <TIM_Base_SetConfig+0xe4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d103      	bne.n	8002b80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	615a      	str	r2, [r3, #20]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800
 8002ba0:	40000c00 	.word	0x40000c00
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800

08002bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0201 	bic.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f023 0302 	bic.w	r3, r3, #2
 8002bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <TIM_OC1_SetConfig+0xc8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d10c      	bne.n	8002c26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0308 	bic.w	r3, r3, #8
 8002c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <TIM_OC1_SetConfig+0xc8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d111      	bne.n	8002c52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40010000 	.word	0x40010000

08002c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f023 0210 	bic.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0320 	bic.w	r3, r3, #32
 8002cc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <TIM_OC2_SetConfig+0xd4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10d      	bne.n	8002cf8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <TIM_OC2_SetConfig+0xd4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d113      	bne.n	8002d28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	621a      	str	r2, [r3, #32]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40010000 	.word	0x40010000

08002d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <TIM_OC3_SetConfig+0xd0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10d      	bne.n	8002dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <TIM_OC3_SetConfig+0xd0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d113      	bne.n	8002dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	621a      	str	r2, [r3, #32]
}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40010000 	.word	0x40010000

08002e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	031b      	lsls	r3, r3, #12
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <TIM_OC4_SetConfig+0x9c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d109      	bne.n	8002e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000

08002ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2201      	movs	r2, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1a      	ldr	r2, [r3, #32]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	401a      	ands	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
}
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e050      	b.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d018      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f78:	d013      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40000800 	.word	0x40000800
 8002fe8:	40000c00 	.word	0x40000c00
 8002fec:	40014000 	.word	0x40014000

08002ff0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003008:	2302      	movs	r3, #2
 800300a:	e03d      	b.n	8003088 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e03f      	b.n	8003126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fe72 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fcc9 	bl	8003a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b088      	sub	sp, #32
 8003132:	af02      	add	r7, sp, #8
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4613      	mov	r3, r2
 800313c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 8083 	bne.w	8003256 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_UART_Transmit+0x2e>
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e07b      	b.n	8003258 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_UART_Transmit+0x40>
 800316a:	2302      	movs	r3, #2
 800316c:	e074      	b.n	8003258 <HAL_UART_Transmit+0x12a>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2221      	movs	r2, #33	; 0x21
 8003180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003184:	f7fe f832 	bl	80011ec <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	88fa      	ldrh	r2, [r7, #6]
 8003194:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800319e:	e042      	b.n	8003226 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	d122      	bne.n	80031fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	2200      	movs	r2, #0
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fad2 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e042      	b.n	8003258 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3302      	adds	r3, #2
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	e017      	b.n	8003226 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3301      	adds	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	e013      	b.n	8003226 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2200      	movs	r2, #0
 8003206:	2180      	movs	r1, #128	; 0x80
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 faaf 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e01f      	b.n	8003258 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	60ba      	str	r2, [r7, #8]
 800321e:	781a      	ldrb	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1b7      	bne.n	80031a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2200      	movs	r2, #0
 8003238:	2140      	movs	r1, #64	; 0x40
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fa96 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e006      	b.n	8003258 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	4613      	mov	r3, r2
 800326c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b20      	cmp	r3, #32
 8003278:	d166      	bne.n	8003348 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_UART_Receive_DMA+0x26>
 8003280:	88fb      	ldrh	r3, [r7, #6]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e05f      	b.n	800334a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_UART_Receive_DMA+0x38>
 8003294:	2302      	movs	r3, #2
 8003296:	e058      	b.n	800334a <HAL_UART_Receive_DMA+0xea>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2222      	movs	r2, #34	; 0x22
 80032b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <HAL_UART_Receive_DMA+0xf4>)
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_UART_Receive_DMA+0xf8>)
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	4a23      	ldr	r2, [pc, #140]	; (800335c <HAL_UART_Receive_DMA+0xfc>)
 80032d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2200      	movs	r2, #0
 80032d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	3304      	adds	r3, #4
 80032ea:	4619      	mov	r1, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	f7fe f969 	bl	80015c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003342:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	08003655 	.word	0x08003655
 8003358:	080036bd 	.word	0x080036bd
 800335c:	080036d9 	.word	0x080036d9

08003360 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b80      	cmp	r3, #128	; 0x80
 8003378:	bf0c      	ite	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	2300      	movne	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b21      	cmp	r3, #33	; 0x21
 800338c:	d116      	bne.n	80033bc <HAL_UART_DMAStop+0x5c>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe f961 	bl	8001678 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa22 	bl	8003800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	bf0c      	ite	eq
 80033ca:	2301      	moveq	r3, #1
 80033cc:	2300      	movne	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b22      	cmp	r3, #34	; 0x22
 80033dc:	d116      	bne.n	800340c <HAL_UART_DMAStop+0xac>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f2:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe f939 	bl	8001678 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa10 	bl	800382c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003438:	2300      	movs	r3, #0
 800343a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_UART_IRQHandler+0x52>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa82 	bl	800396c <UART_Receive_IT>
      return;
 8003468:	e0d1      	b.n	800360e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80b0 	beq.w	80035d2 <HAL_UART_IRQHandler+0x1ba>
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_UART_IRQHandler+0x70>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80a5 	beq.w	80035d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_UART_IRQHandler+0x90>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	f043 0201 	orr.w	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_UART_IRQHandler+0xb0>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c0:	f043 0202 	orr.w	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_UART_IRQHandler+0xd0>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00f      	beq.n	8003512 <HAL_UART_IRQHandler+0xfa>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <HAL_UART_IRQHandler+0xee>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d005      	beq.n	8003512 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	f043 0208 	orr.w	r2, r3, #8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d078      	beq.n	800360c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <HAL_UART_IRQHandler+0x11c>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa1c 	bl	800396c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	bf0c      	ite	eq
 8003542:	2301      	moveq	r3, #1
 8003544:	2300      	movne	r3, #0
 8003546:	b2db      	uxtb	r3, r3
 8003548:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d102      	bne.n	800355c <HAL_UART_IRQHandler+0x144>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d031      	beq.n	80035c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f965 	bl	800382c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d123      	bne.n	80035b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800357e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_UART_IRQHandler+0x1fc>)
 800358e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe f8df 	bl	8001758 <HAL_DMA_Abort_IT>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035aa:	4610      	mov	r0, r2
 80035ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ae:	e00e      	b.n	80035ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f845 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b6:	e00a      	b.n	80035ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f841 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035be:	e006      	b.n	80035ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f83d 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035cc:	e01e      	b.n	800360c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	bf00      	nop
    return;
 80035d0:	e01c      	b.n	800360c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_UART_IRQHandler+0x1d6>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f952 	bl	8003890 <UART_Transmit_IT>
    return;
 80035ec:	e00f      	b.n	800360e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_UART_IRQHandler+0x1f6>
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f99a 	bl	800393c <UART_EndTransmit_IT>
    return;
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <HAL_UART_IRQHandler+0x1f6>
    return;
 800360c:	bf00      	nop
  }
}
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	08003869 	.word	0x08003869

08003618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11e      	bne.n	80036ae <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003684:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0201 	bic.w	r2, r2, #1
 8003694:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7fd f9b4 	bl	8000a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036b4:	bf00      	nop
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f7ff ffae 	bl	800362c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b21      	cmp	r3, #33	; 0x21
 800370a:	d108      	bne.n	800371e <UART_DMAError+0x46>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003718:	68b8      	ldr	r0, [r7, #8]
 800371a:	f000 f871 	bl	8003800 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b22      	cmp	r3, #34	; 0x22
 800373e:	d108      	bne.n	8003752 <UART_DMAError+0x7a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800374c:	68b8      	ldr	r0, [r7, #8]
 800374e:	f000 f86d 	bl	800382c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7ff ff6e 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	e02c      	b.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d028      	beq.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x30>
 800378c:	f7fd fd2e 	bl	80011ec <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	429a      	cmp	r2, r3
 800379a:	d21d      	bcs.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e00f      	b.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d0c3      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003816:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003842:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fedc 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b21      	cmp	r3, #33	; 0x21
 80038a2:	d144      	bne.n	800392e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d11a      	bne.n	80038e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]
 80038d6:	e00e      	b.n	80038f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	621a      	str	r2, [r3, #32]
 80038e2:	e008      	b.n	80038f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6211      	str	r1, [r2, #32]
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4619      	mov	r1, r3
 8003904:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003918:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003928:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003952:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fe5b 	bl	8003618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b22      	cmp	r3, #34	; 0x22
 800397e:	d171      	bne.n	8003a64 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003988:	d123      	bne.n	80039d2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ae:	1c9a      	adds	r2, r3, #2
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
 80039b4:	e029      	b.n	8003a0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	e01b      	b.n	8003a0a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6858      	ldr	r0, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6291      	str	r1, [r2, #40]	; 0x28
 80039ea:	b2c2      	uxtb	r2, r0
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e00c      	b.n	8003a0a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	1c58      	adds	r0, r3, #1
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	6288      	str	r0, [r1, #40]	; 0x28
 8003a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4619      	mov	r1, r3
 8003a18:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d120      	bne.n	8003a60 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0220 	bic.w	r2, r2, #32
 8003a2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fc ffe0 	bl	8000a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e002      	b.n	8003a66 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ab2:	f023 030c 	bic.w	r3, r3, #12
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	f040 818b 	bne.w	8003df8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4ac1      	ldr	r2, [pc, #772]	; (8003dec <UART_SetConfig+0x37c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d005      	beq.n	8003af8 <UART_SetConfig+0x88>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4abf      	ldr	r2, [pc, #764]	; (8003df0 <UART_SetConfig+0x380>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f040 80bd 	bne.w	8003c72 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7fe fea2 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8003afc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	461d      	mov	r5, r3
 8003b02:	f04f 0600 	mov.w	r6, #0
 8003b06:	46a8      	mov	r8, r5
 8003b08:	46b1      	mov	r9, r6
 8003b0a:	eb18 0308 	adds.w	r3, r8, r8
 8003b0e:	eb49 0409 	adc.w	r4, r9, r9
 8003b12:	4698      	mov	r8, r3
 8003b14:	46a1      	mov	r9, r4
 8003b16:	eb18 0805 	adds.w	r8, r8, r5
 8003b1a:	eb49 0906 	adc.w	r9, r9, r6
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b32:	4688      	mov	r8, r1
 8003b34:	4691      	mov	r9, r2
 8003b36:	eb18 0005 	adds.w	r0, r8, r5
 8003b3a:	eb49 0106 	adc.w	r1, r9, r6
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	461d      	mov	r5, r3
 8003b44:	f04f 0600 	mov.w	r6, #0
 8003b48:	196b      	adds	r3, r5, r5
 8003b4a:	eb46 0406 	adc.w	r4, r6, r6
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4623      	mov	r3, r4
 8003b52:	f7fc fb95 	bl	8000280 <__aeabi_uldivmod>
 8003b56:	4603      	mov	r3, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4ba5      	ldr	r3, [pc, #660]	; (8003df4 <UART_SetConfig+0x384>)
 8003b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	f04f 0600 	mov.w	r6, #0
 8003b70:	46a9      	mov	r9, r5
 8003b72:	46b2      	mov	sl, r6
 8003b74:	eb19 0309 	adds.w	r3, r9, r9
 8003b78:	eb4a 040a 	adc.w	r4, sl, sl
 8003b7c:	4699      	mov	r9, r3
 8003b7e:	46a2      	mov	sl, r4
 8003b80:	eb19 0905 	adds.w	r9, r9, r5
 8003b84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b9c:	4689      	mov	r9, r1
 8003b9e:	4692      	mov	sl, r2
 8003ba0:	eb19 0005 	adds.w	r0, r9, r5
 8003ba4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	461d      	mov	r5, r3
 8003bae:	f04f 0600 	mov.w	r6, #0
 8003bb2:	196b      	adds	r3, r5, r5
 8003bb4:	eb46 0406 	adc.w	r4, r6, r6
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	f7fc fb60 	bl	8000280 <__aeabi_uldivmod>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b8b      	ldr	r3, [pc, #556]	; (8003df4 <UART_SetConfig+0x384>)
 8003bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3332      	adds	r3, #50	; 0x32
 8003bda:	4a86      	ldr	r2, [pc, #536]	; (8003df4 <UART_SetConfig+0x384>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be8:	4498      	add	r8, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	461d      	mov	r5, r3
 8003bee:	f04f 0600 	mov.w	r6, #0
 8003bf2:	46a9      	mov	r9, r5
 8003bf4:	46b2      	mov	sl, r6
 8003bf6:	eb19 0309 	adds.w	r3, r9, r9
 8003bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfe:	4699      	mov	r9, r3
 8003c00:	46a2      	mov	sl, r4
 8003c02:	eb19 0905 	adds.w	r9, r9, r5
 8003c06:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c0a:	f04f 0100 	mov.w	r1, #0
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1e:	4689      	mov	r9, r1
 8003c20:	4692      	mov	sl, r2
 8003c22:	eb19 0005 	adds.w	r0, r9, r5
 8003c26:	eb4a 0106 	adc.w	r1, sl, r6
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	461d      	mov	r5, r3
 8003c30:	f04f 0600 	mov.w	r6, #0
 8003c34:	196b      	adds	r3, r5, r5
 8003c36:	eb46 0406 	adc.w	r4, r6, r6
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	f7fc fb1f 	bl	8000280 <__aeabi_uldivmod>
 8003c42:	4603      	mov	r3, r0
 8003c44:	460c      	mov	r4, r1
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <UART_SetConfig+0x384>)
 8003c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2164      	movs	r1, #100	; 0x64
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a65      	ldr	r2, [pc, #404]	; (8003df4 <UART_SetConfig+0x384>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 0207 	and.w	r2, r3, #7
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4442      	add	r2, r8
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e26f      	b.n	8004152 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c72:	f7fe fdd1 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8003c76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	f04f 0600 	mov.w	r6, #0
 8003c80:	46a8      	mov	r8, r5
 8003c82:	46b1      	mov	r9, r6
 8003c84:	eb18 0308 	adds.w	r3, r8, r8
 8003c88:	eb49 0409 	adc.w	r4, r9, r9
 8003c8c:	4698      	mov	r8, r3
 8003c8e:	46a1      	mov	r9, r4
 8003c90:	eb18 0805 	adds.w	r8, r8, r5
 8003c94:	eb49 0906 	adc.w	r9, r9, r6
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ca4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ca8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cac:	4688      	mov	r8, r1
 8003cae:	4691      	mov	r9, r2
 8003cb0:	eb18 0005 	adds.w	r0, r8, r5
 8003cb4:	eb49 0106 	adc.w	r1, r9, r6
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	461d      	mov	r5, r3
 8003cbe:	f04f 0600 	mov.w	r6, #0
 8003cc2:	196b      	adds	r3, r5, r5
 8003cc4:	eb46 0406 	adc.w	r4, r6, r6
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	f7fc fad8 	bl	8000280 <__aeabi_uldivmod>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b47      	ldr	r3, [pc, #284]	; (8003df4 <UART_SetConfig+0x384>)
 8003cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	f04f 0600 	mov.w	r6, #0
 8003cea:	46a9      	mov	r9, r5
 8003cec:	46b2      	mov	sl, r6
 8003cee:	eb19 0309 	adds.w	r3, r9, r9
 8003cf2:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf6:	4699      	mov	r9, r3
 8003cf8:	46a2      	mov	sl, r4
 8003cfa:	eb19 0905 	adds.w	r9, r9, r5
 8003cfe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d16:	4689      	mov	r9, r1
 8003d18:	4692      	mov	sl, r2
 8003d1a:	eb19 0005 	adds.w	r0, r9, r5
 8003d1e:	eb4a 0106 	adc.w	r1, sl, r6
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	461d      	mov	r5, r3
 8003d28:	f04f 0600 	mov.w	r6, #0
 8003d2c:	196b      	adds	r3, r5, r5
 8003d2e:	eb46 0406 	adc.w	r4, r6, r6
 8003d32:	461a      	mov	r2, r3
 8003d34:	4623      	mov	r3, r4
 8003d36:	f7fc faa3 	bl	8000280 <__aeabi_uldivmod>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b2c      	ldr	r3, [pc, #176]	; (8003df4 <UART_SetConfig+0x384>)
 8003d42:	fba3 1302 	umull	r1, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2164      	movs	r1, #100	; 0x64
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	3332      	adds	r3, #50	; 0x32
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <UART_SetConfig+0x384>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d62:	4498      	add	r8, r3
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	461d      	mov	r5, r3
 8003d68:	f04f 0600 	mov.w	r6, #0
 8003d6c:	46a9      	mov	r9, r5
 8003d6e:	46b2      	mov	sl, r6
 8003d70:	eb19 0309 	adds.w	r3, r9, r9
 8003d74:	eb4a 040a 	adc.w	r4, sl, sl
 8003d78:	4699      	mov	r9, r3
 8003d7a:	46a2      	mov	sl, r4
 8003d7c:	eb19 0905 	adds.w	r9, r9, r5
 8003d80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d98:	4689      	mov	r9, r1
 8003d9a:	4692      	mov	sl, r2
 8003d9c:	eb19 0005 	adds.w	r0, r9, r5
 8003da0:	eb4a 0106 	adc.w	r1, sl, r6
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	461d      	mov	r5, r3
 8003daa:	f04f 0600 	mov.w	r6, #0
 8003dae:	196b      	adds	r3, r5, r5
 8003db0:	eb46 0406 	adc.w	r4, r6, r6
 8003db4:	461a      	mov	r2, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	f7fc fa62 	bl	8000280 <__aeabi_uldivmod>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <UART_SetConfig+0x384>)
 8003dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc8:	095b      	lsrs	r3, r3, #5
 8003dca:	2164      	movs	r1, #100	; 0x64
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	3332      	adds	r3, #50	; 0x32
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <UART_SetConfig+0x384>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	f003 0207 	and.w	r2, r3, #7
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4442      	add	r2, r8
 8003de8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003dea:	e1b2      	b.n	8004152 <UART_SetConfig+0x6e2>
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40011400 	.word	0x40011400
 8003df4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4ad7      	ldr	r2, [pc, #860]	; (800415c <UART_SetConfig+0x6ec>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d005      	beq.n	8003e0e <UART_SetConfig+0x39e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4ad6      	ldr	r2, [pc, #856]	; (8004160 <UART_SetConfig+0x6f0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	f040 80d1 	bne.w	8003fb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e0e:	f7fe fd17 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8003e12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	469a      	mov	sl, r3
 8003e18:	f04f 0b00 	mov.w	fp, #0
 8003e1c:	46d0      	mov	r8, sl
 8003e1e:	46d9      	mov	r9, fp
 8003e20:	eb18 0308 	adds.w	r3, r8, r8
 8003e24:	eb49 0409 	adc.w	r4, r9, r9
 8003e28:	4698      	mov	r8, r3
 8003e2a:	46a1      	mov	r9, r4
 8003e2c:	eb18 080a 	adds.w	r8, r8, sl
 8003e30:	eb49 090b 	adc.w	r9, r9, fp
 8003e34:	f04f 0100 	mov.w	r1, #0
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e48:	4688      	mov	r8, r1
 8003e4a:	4691      	mov	r9, r2
 8003e4c:	eb1a 0508 	adds.w	r5, sl, r8
 8003e50:	eb4b 0609 	adc.w	r6, fp, r9
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f04f 0400 	mov.w	r4, #0
 8003e66:	0094      	lsls	r4, r2, #2
 8003e68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e6c:	008b      	lsls	r3, r1, #2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4623      	mov	r3, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	4631      	mov	r1, r6
 8003e76:	f7fc fa03 	bl	8000280 <__aeabi_uldivmod>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4bb8      	ldr	r3, [pc, #736]	; (8004164 <UART_SetConfig+0x6f4>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	469b      	mov	fp, r3
 8003e90:	f04f 0c00 	mov.w	ip, #0
 8003e94:	46d9      	mov	r9, fp
 8003e96:	46e2      	mov	sl, ip
 8003e98:	eb19 0309 	adds.w	r3, r9, r9
 8003e9c:	eb4a 040a 	adc.w	r4, sl, sl
 8003ea0:	4699      	mov	r9, r3
 8003ea2:	46a2      	mov	sl, r4
 8003ea4:	eb19 090b 	adds.w	r9, r9, fp
 8003ea8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ebc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	4692      	mov	sl, r2
 8003ec4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ec8:	eb4c 060a 	adc.w	r6, ip, sl
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f04f 0400 	mov.w	r4, #0
 8003ede:	0094      	lsls	r4, r2, #2
 8003ee0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee4:	008b      	lsls	r3, r1, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	4628      	mov	r0, r5
 8003eec:	4631      	mov	r1, r6
 8003eee:	f7fc f9c7 	bl	8000280 <__aeabi_uldivmod>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b9a      	ldr	r3, [pc, #616]	; (8004164 <UART_SetConfig+0x6f4>)
 8003efa:	fba3 1302 	umull	r1, r3, r3, r2
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2164      	movs	r1, #100	; 0x64
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	3332      	adds	r3, #50	; 0x32
 8003f0c:	4a95      	ldr	r2, [pc, #596]	; (8004164 <UART_SetConfig+0x6f4>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f18:	4498      	add	r8, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	469b      	mov	fp, r3
 8003f1e:	f04f 0c00 	mov.w	ip, #0
 8003f22:	46d9      	mov	r9, fp
 8003f24:	46e2      	mov	sl, ip
 8003f26:	eb19 0309 	adds.w	r3, r9, r9
 8003f2a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2e:	4699      	mov	r9, r3
 8003f30:	46a2      	mov	sl, r4
 8003f32:	eb19 090b 	adds.w	r9, r9, fp
 8003f36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4e:	4689      	mov	r9, r1
 8003f50:	4692      	mov	sl, r2
 8003f52:	eb1b 0509 	adds.w	r5, fp, r9
 8003f56:	eb4c 060a 	adc.w	r6, ip, sl
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	f04f 0400 	mov.w	r4, #0
 8003f6c:	0094      	lsls	r4, r2, #2
 8003f6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f72:	008b      	lsls	r3, r1, #2
 8003f74:	461a      	mov	r2, r3
 8003f76:	4623      	mov	r3, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	f7fc f980 	bl	8000280 <__aeabi_uldivmod>
 8003f80:	4603      	mov	r3, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b77      	ldr	r3, [pc, #476]	; (8004164 <UART_SetConfig+0x6f4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2164      	movs	r1, #100	; 0x64
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	3332      	adds	r3, #50	; 0x32
 8003f9a:	4a72      	ldr	r2, [pc, #456]	; (8004164 <UART_SetConfig+0x6f4>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4442      	add	r2, r8
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	e0d0      	b.n	8004152 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe fc32 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	469a      	mov	sl, r3
 8003fba:	f04f 0b00 	mov.w	fp, #0
 8003fbe:	46d0      	mov	r8, sl
 8003fc0:	46d9      	mov	r9, fp
 8003fc2:	eb18 0308 	adds.w	r3, r8, r8
 8003fc6:	eb49 0409 	adc.w	r4, r9, r9
 8003fca:	4698      	mov	r8, r3
 8003fcc:	46a1      	mov	r9, r4
 8003fce:	eb18 080a 	adds.w	r8, r8, sl
 8003fd2:	eb49 090b 	adc.w	r9, r9, fp
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fe2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fea:	4688      	mov	r8, r1
 8003fec:	4691      	mov	r9, r2
 8003fee:	eb1a 0508 	adds.w	r5, sl, r8
 8003ff2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	f04f 0400 	mov.w	r4, #0
 8004008:	0094      	lsls	r4, r2, #2
 800400a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800400e:	008b      	lsls	r3, r1, #2
 8004010:	461a      	mov	r2, r3
 8004012:	4623      	mov	r3, r4
 8004014:	4628      	mov	r0, r5
 8004016:	4631      	mov	r1, r6
 8004018:	f7fc f932 	bl	8000280 <__aeabi_uldivmod>
 800401c:	4603      	mov	r3, r0
 800401e:	460c      	mov	r4, r1
 8004020:	461a      	mov	r2, r3
 8004022:	4b50      	ldr	r3, [pc, #320]	; (8004164 <UART_SetConfig+0x6f4>)
 8004024:	fba3 2302 	umull	r2, r3, r3, r2
 8004028:	095b      	lsrs	r3, r3, #5
 800402a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	469b      	mov	fp, r3
 8004032:	f04f 0c00 	mov.w	ip, #0
 8004036:	46d9      	mov	r9, fp
 8004038:	46e2      	mov	sl, ip
 800403a:	eb19 0309 	adds.w	r3, r9, r9
 800403e:	eb4a 040a 	adc.w	r4, sl, sl
 8004042:	4699      	mov	r9, r3
 8004044:	46a2      	mov	sl, r4
 8004046:	eb19 090b 	adds.w	r9, r9, fp
 800404a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004062:	4689      	mov	r9, r1
 8004064:	4692      	mov	sl, r2
 8004066:	eb1b 0509 	adds.w	r5, fp, r9
 800406a:	eb4c 060a 	adc.w	r6, ip, sl
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4619      	mov	r1, r3
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	0094      	lsls	r4, r2, #2
 8004082:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004086:	008b      	lsls	r3, r1, #2
 8004088:	461a      	mov	r2, r3
 800408a:	4623      	mov	r3, r4
 800408c:	4628      	mov	r0, r5
 800408e:	4631      	mov	r1, r6
 8004090:	f7fc f8f6 	bl	8000280 <__aeabi_uldivmod>
 8004094:	4603      	mov	r3, r0
 8004096:	460c      	mov	r4, r1
 8004098:	461a      	mov	r2, r3
 800409a:	4b32      	ldr	r3, [pc, #200]	; (8004164 <UART_SetConfig+0x6f4>)
 800409c:	fba3 1302 	umull	r1, r3, r3, r2
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	2164      	movs	r1, #100	; 0x64
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	3332      	adds	r3, #50	; 0x32
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <UART_SetConfig+0x6f4>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ba:	4498      	add	r8, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	469b      	mov	fp, r3
 80040c0:	f04f 0c00 	mov.w	ip, #0
 80040c4:	46d9      	mov	r9, fp
 80040c6:	46e2      	mov	sl, ip
 80040c8:	eb19 0309 	adds.w	r3, r9, r9
 80040cc:	eb4a 040a 	adc.w	r4, sl, sl
 80040d0:	4699      	mov	r9, r3
 80040d2:	46a2      	mov	sl, r4
 80040d4:	eb19 090b 	adds.w	r9, r9, fp
 80040d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040dc:	f04f 0100 	mov.w	r1, #0
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f0:	4689      	mov	r9, r1
 80040f2:	4692      	mov	sl, r2
 80040f4:	eb1b 0509 	adds.w	r5, fp, r9
 80040f8:	eb4c 060a 	adc.w	r6, ip, sl
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4619      	mov	r1, r3
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	f04f 0400 	mov.w	r4, #0
 800410e:	0094      	lsls	r4, r2, #2
 8004110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004114:	008b      	lsls	r3, r1, #2
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	4628      	mov	r0, r5
 800411c:	4631      	mov	r1, r6
 800411e:	f7fc f8af 	bl	8000280 <__aeabi_uldivmod>
 8004122:	4603      	mov	r3, r0
 8004124:	460c      	mov	r4, r1
 8004126:	461a      	mov	r2, r3
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <UART_SetConfig+0x6f4>)
 800412a:	fba3 1302 	umull	r1, r3, r3, r2
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2164      	movs	r1, #100	; 0x64
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	3332      	adds	r3, #50	; 0x32
 800413c:	4a09      	ldr	r2, [pc, #36]	; (8004164 <UART_SetConfig+0x6f4>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4442      	add	r2, r8
 800414e:	609a      	str	r2, [r3, #8]
}
 8004150:	e7ff      	b.n	8004152 <UART_SetConfig+0x6e2>
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	51eb851f 	.word	0x51eb851f

08004168 <__errno>:
 8004168:	4b01      	ldr	r3, [pc, #4]	; (8004170 <__errno+0x8>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000000c 	.word	0x2000000c

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	4e0d      	ldr	r6, [pc, #52]	; (80041ac <__libc_init_array+0x38>)
 8004178:	4c0d      	ldr	r4, [pc, #52]	; (80041b0 <__libc_init_array+0x3c>)
 800417a:	1ba4      	subs	r4, r4, r6
 800417c:	10a4      	asrs	r4, r4, #2
 800417e:	2500      	movs	r5, #0
 8004180:	42a5      	cmp	r5, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	4e0b      	ldr	r6, [pc, #44]	; (80041b4 <__libc_init_array+0x40>)
 8004186:	4c0c      	ldr	r4, [pc, #48]	; (80041b8 <__libc_init_array+0x44>)
 8004188:	f000 ffcc 	bl	8005124 <_init>
 800418c:	1ba4      	subs	r4, r4, r6
 800418e:	10a4      	asrs	r4, r4, #2
 8004190:	2500      	movs	r5, #0
 8004192:	42a5      	cmp	r5, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800419c:	4798      	blx	r3
 800419e:	3501      	adds	r5, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041a6:	4798      	blx	r3
 80041a8:	3501      	adds	r5, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	080052a4 	.word	0x080052a4
 80041b0:	080052a4 	.word	0x080052a4
 80041b4:	080052a4 	.word	0x080052a4
 80041b8:	080052a8 	.word	0x080052a8

080041bc <memset>:
 80041bc:	4402      	add	r2, r0
 80041be:	4603      	mov	r3, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <iprintf>:
 80041cc:	b40f      	push	{r0, r1, r2, r3}
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <iprintf+0x2c>)
 80041d0:	b513      	push	{r0, r1, r4, lr}
 80041d2:	681c      	ldr	r4, [r3, #0]
 80041d4:	b124      	cbz	r4, 80041e0 <iprintf+0x14>
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	b913      	cbnz	r3, 80041e0 <iprintf+0x14>
 80041da:	4620      	mov	r0, r4
 80041dc:	f000 fa50 	bl	8004680 <__sinit>
 80041e0:	ab05      	add	r3, sp, #20
 80041e2:	9a04      	ldr	r2, [sp, #16]
 80041e4:	68a1      	ldr	r1, [r4, #8]
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 fc09 	bl	8004a00 <_vfiprintf_r>
 80041ee:	b002      	add	sp, #8
 80041f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f4:	b004      	add	sp, #16
 80041f6:	4770      	bx	lr
 80041f8:	2000000c 	.word	0x2000000c

080041fc <putchar>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <putchar+0x24>)
 8004200:	681c      	ldr	r4, [r3, #0]
 8004202:	4605      	mov	r5, r0
 8004204:	b124      	cbz	r4, 8004210 <putchar+0x14>
 8004206:	69a3      	ldr	r3, [r4, #24]
 8004208:	b913      	cbnz	r3, 8004210 <putchar+0x14>
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fa38 	bl	8004680 <__sinit>
 8004210:	68a2      	ldr	r2, [r4, #8]
 8004212:	4629      	mov	r1, r5
 8004214:	4620      	mov	r0, r4
 8004216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800421a:	f000 be8f 	b.w	8004f3c <_putc_r>
 800421e:	bf00      	nop
 8004220:	2000000c 	.word	0x2000000c

08004224 <_puts_r>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	460e      	mov	r6, r1
 8004228:	4605      	mov	r5, r0
 800422a:	b118      	cbz	r0, 8004234 <_puts_r+0x10>
 800422c:	6983      	ldr	r3, [r0, #24]
 800422e:	b90b      	cbnz	r3, 8004234 <_puts_r+0x10>
 8004230:	f000 fa26 	bl	8004680 <__sinit>
 8004234:	69ab      	ldr	r3, [r5, #24]
 8004236:	68ac      	ldr	r4, [r5, #8]
 8004238:	b913      	cbnz	r3, 8004240 <_puts_r+0x1c>
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fa20 	bl	8004680 <__sinit>
 8004240:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <_puts_r+0xac>)
 8004242:	429c      	cmp	r4, r3
 8004244:	d117      	bne.n	8004276 <_puts_r+0x52>
 8004246:	686c      	ldr	r4, [r5, #4]
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	071b      	lsls	r3, r3, #28
 800424c:	d51d      	bpl.n	800428a <_puts_r+0x66>
 800424e:	6923      	ldr	r3, [r4, #16]
 8004250:	b1db      	cbz	r3, 800428a <_puts_r+0x66>
 8004252:	3e01      	subs	r6, #1
 8004254:	68a3      	ldr	r3, [r4, #8]
 8004256:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800425a:	3b01      	subs	r3, #1
 800425c:	60a3      	str	r3, [r4, #8]
 800425e:	b9e9      	cbnz	r1, 800429c <_puts_r+0x78>
 8004260:	2b00      	cmp	r3, #0
 8004262:	da2e      	bge.n	80042c2 <_puts_r+0x9e>
 8004264:	4622      	mov	r2, r4
 8004266:	210a      	movs	r1, #10
 8004268:	4628      	mov	r0, r5
 800426a:	f000 f859 	bl	8004320 <__swbuf_r>
 800426e:	3001      	adds	r0, #1
 8004270:	d011      	beq.n	8004296 <_puts_r+0x72>
 8004272:	200a      	movs	r0, #10
 8004274:	e011      	b.n	800429a <_puts_r+0x76>
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <_puts_r+0xb0>)
 8004278:	429c      	cmp	r4, r3
 800427a:	d101      	bne.n	8004280 <_puts_r+0x5c>
 800427c:	68ac      	ldr	r4, [r5, #8]
 800427e:	e7e3      	b.n	8004248 <_puts_r+0x24>
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <_puts_r+0xb4>)
 8004282:	429c      	cmp	r4, r3
 8004284:	bf08      	it	eq
 8004286:	68ec      	ldreq	r4, [r5, #12]
 8004288:	e7de      	b.n	8004248 <_puts_r+0x24>
 800428a:	4621      	mov	r1, r4
 800428c:	4628      	mov	r0, r5
 800428e:	f000 f899 	bl	80043c4 <__swsetup_r>
 8004292:	2800      	cmp	r0, #0
 8004294:	d0dd      	beq.n	8004252 <_puts_r+0x2e>
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	2b00      	cmp	r3, #0
 800429e:	da04      	bge.n	80042aa <_puts_r+0x86>
 80042a0:	69a2      	ldr	r2, [r4, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	dc06      	bgt.n	80042b4 <_puts_r+0x90>
 80042a6:	290a      	cmp	r1, #10
 80042a8:	d004      	beq.n	80042b4 <_puts_r+0x90>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	6022      	str	r2, [r4, #0]
 80042b0:	7019      	strb	r1, [r3, #0]
 80042b2:	e7cf      	b.n	8004254 <_puts_r+0x30>
 80042b4:	4622      	mov	r2, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f832 	bl	8004320 <__swbuf_r>
 80042bc:	3001      	adds	r0, #1
 80042be:	d1c9      	bne.n	8004254 <_puts_r+0x30>
 80042c0:	e7e9      	b.n	8004296 <_puts_r+0x72>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	200a      	movs	r0, #10
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	6022      	str	r2, [r4, #0]
 80042ca:	7018      	strb	r0, [r3, #0]
 80042cc:	e7e5      	b.n	800429a <_puts_r+0x76>
 80042ce:	bf00      	nop
 80042d0:	08005228 	.word	0x08005228
 80042d4:	08005248 	.word	0x08005248
 80042d8:	08005208 	.word	0x08005208

080042dc <puts>:
 80042dc:	4b02      	ldr	r3, [pc, #8]	; (80042e8 <puts+0xc>)
 80042de:	4601      	mov	r1, r0
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	f7ff bf9f 	b.w	8004224 <_puts_r>
 80042e6:	bf00      	nop
 80042e8:	2000000c 	.word	0x2000000c

080042ec <strstr>:
 80042ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ee:	7803      	ldrb	r3, [r0, #0]
 80042f0:	b17b      	cbz	r3, 8004312 <strstr+0x26>
 80042f2:	4604      	mov	r4, r0
 80042f4:	7823      	ldrb	r3, [r4, #0]
 80042f6:	4620      	mov	r0, r4
 80042f8:	1c66      	adds	r6, r4, #1
 80042fa:	b17b      	cbz	r3, 800431c <strstr+0x30>
 80042fc:	1e4a      	subs	r2, r1, #1
 80042fe:	1e63      	subs	r3, r4, #1
 8004300:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004304:	b14d      	cbz	r5, 800431a <strstr+0x2e>
 8004306:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800430a:	42af      	cmp	r7, r5
 800430c:	4634      	mov	r4, r6
 800430e:	d0f7      	beq.n	8004300 <strstr+0x14>
 8004310:	e7f0      	b.n	80042f4 <strstr+0x8>
 8004312:	780b      	ldrb	r3, [r1, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf18      	it	ne
 8004318:	2000      	movne	r0, #0
 800431a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800431c:	4618      	mov	r0, r3
 800431e:	e7fc      	b.n	800431a <strstr+0x2e>

08004320 <__swbuf_r>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	460e      	mov	r6, r1
 8004324:	4614      	mov	r4, r2
 8004326:	4605      	mov	r5, r0
 8004328:	b118      	cbz	r0, 8004332 <__swbuf_r+0x12>
 800432a:	6983      	ldr	r3, [r0, #24]
 800432c:	b90b      	cbnz	r3, 8004332 <__swbuf_r+0x12>
 800432e:	f000 f9a7 	bl	8004680 <__sinit>
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <__swbuf_r+0x98>)
 8004334:	429c      	cmp	r4, r3
 8004336:	d12a      	bne.n	800438e <__swbuf_r+0x6e>
 8004338:	686c      	ldr	r4, [r5, #4]
 800433a:	69a3      	ldr	r3, [r4, #24]
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	071a      	lsls	r2, r3, #28
 8004342:	d52e      	bpl.n	80043a2 <__swbuf_r+0x82>
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	b363      	cbz	r3, 80043a2 <__swbuf_r+0x82>
 8004348:	6923      	ldr	r3, [r4, #16]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1ac0      	subs	r0, r0, r3
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	b2f6      	uxtb	r6, r6
 8004352:	4283      	cmp	r3, r0
 8004354:	4637      	mov	r7, r6
 8004356:	dc04      	bgt.n	8004362 <__swbuf_r+0x42>
 8004358:	4621      	mov	r1, r4
 800435a:	4628      	mov	r0, r5
 800435c:	f000 f926 	bl	80045ac <_fflush_r>
 8004360:	bb28      	cbnz	r0, 80043ae <__swbuf_r+0x8e>
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	3b01      	subs	r3, #1
 8004366:	60a3      	str	r3, [r4, #8]
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	6022      	str	r2, [r4, #0]
 800436e:	701e      	strb	r6, [r3, #0]
 8004370:	6963      	ldr	r3, [r4, #20]
 8004372:	3001      	adds	r0, #1
 8004374:	4283      	cmp	r3, r0
 8004376:	d004      	beq.n	8004382 <__swbuf_r+0x62>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	07db      	lsls	r3, r3, #31
 800437c:	d519      	bpl.n	80043b2 <__swbuf_r+0x92>
 800437e:	2e0a      	cmp	r6, #10
 8004380:	d117      	bne.n	80043b2 <__swbuf_r+0x92>
 8004382:	4621      	mov	r1, r4
 8004384:	4628      	mov	r0, r5
 8004386:	f000 f911 	bl	80045ac <_fflush_r>
 800438a:	b190      	cbz	r0, 80043b2 <__swbuf_r+0x92>
 800438c:	e00f      	b.n	80043ae <__swbuf_r+0x8e>
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <__swbuf_r+0x9c>)
 8004390:	429c      	cmp	r4, r3
 8004392:	d101      	bne.n	8004398 <__swbuf_r+0x78>
 8004394:	68ac      	ldr	r4, [r5, #8]
 8004396:	e7d0      	b.n	800433a <__swbuf_r+0x1a>
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <__swbuf_r+0xa0>)
 800439a:	429c      	cmp	r4, r3
 800439c:	bf08      	it	eq
 800439e:	68ec      	ldreq	r4, [r5, #12]
 80043a0:	e7cb      	b.n	800433a <__swbuf_r+0x1a>
 80043a2:	4621      	mov	r1, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f80d 	bl	80043c4 <__swsetup_r>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d0cc      	beq.n	8004348 <__swbuf_r+0x28>
 80043ae:	f04f 37ff 	mov.w	r7, #4294967295
 80043b2:	4638      	mov	r0, r7
 80043b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	08005228 	.word	0x08005228
 80043bc:	08005248 	.word	0x08005248
 80043c0:	08005208 	.word	0x08005208

080043c4 <__swsetup_r>:
 80043c4:	4b32      	ldr	r3, [pc, #200]	; (8004490 <__swsetup_r+0xcc>)
 80043c6:	b570      	push	{r4, r5, r6, lr}
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	4606      	mov	r6, r0
 80043cc:	460c      	mov	r4, r1
 80043ce:	b125      	cbz	r5, 80043da <__swsetup_r+0x16>
 80043d0:	69ab      	ldr	r3, [r5, #24]
 80043d2:	b913      	cbnz	r3, 80043da <__swsetup_r+0x16>
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 f953 	bl	8004680 <__sinit>
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <__swsetup_r+0xd0>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	d10f      	bne.n	8004400 <__swsetup_r+0x3c>
 80043e0:	686c      	ldr	r4, [r5, #4]
 80043e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	0715      	lsls	r5, r2, #28
 80043ea:	d42c      	bmi.n	8004446 <__swsetup_r+0x82>
 80043ec:	06d0      	lsls	r0, r2, #27
 80043ee:	d411      	bmi.n	8004414 <__swsetup_r+0x50>
 80043f0:	2209      	movs	r2, #9
 80043f2:	6032      	str	r2, [r6, #0]
 80043f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	e03e      	b.n	800447e <__swsetup_r+0xba>
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <__swsetup_r+0xd4>)
 8004402:	429c      	cmp	r4, r3
 8004404:	d101      	bne.n	800440a <__swsetup_r+0x46>
 8004406:	68ac      	ldr	r4, [r5, #8]
 8004408:	e7eb      	b.n	80043e2 <__swsetup_r+0x1e>
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <__swsetup_r+0xd8>)
 800440c:	429c      	cmp	r4, r3
 800440e:	bf08      	it	eq
 8004410:	68ec      	ldreq	r4, [r5, #12]
 8004412:	e7e6      	b.n	80043e2 <__swsetup_r+0x1e>
 8004414:	0751      	lsls	r1, r2, #29
 8004416:	d512      	bpl.n	800443e <__swsetup_r+0x7a>
 8004418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800441a:	b141      	cbz	r1, 800442e <__swsetup_r+0x6a>
 800441c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004420:	4299      	cmp	r1, r3
 8004422:	d002      	beq.n	800442a <__swsetup_r+0x66>
 8004424:	4630      	mov	r0, r6
 8004426:	f000 fa19 	bl	800485c <_free_r>
 800442a:	2300      	movs	r3, #0
 800442c:	6363      	str	r3, [r4, #52]	; 0x34
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	2300      	movs	r3, #0
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f043 0308 	orr.w	r3, r3, #8
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	b94b      	cbnz	r3, 800445e <__swsetup_r+0x9a>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004454:	d003      	beq.n	800445e <__swsetup_r+0x9a>
 8004456:	4621      	mov	r1, r4
 8004458:	4630      	mov	r0, r6
 800445a:	f000 f9bf 	bl	80047dc <__smakebuf_r>
 800445e:	89a2      	ldrh	r2, [r4, #12]
 8004460:	f012 0301 	ands.w	r3, r2, #1
 8004464:	d00c      	beq.n	8004480 <__swsetup_r+0xbc>
 8004466:	2300      	movs	r3, #0
 8004468:	60a3      	str	r3, [r4, #8]
 800446a:	6963      	ldr	r3, [r4, #20]
 800446c:	425b      	negs	r3, r3
 800446e:	61a3      	str	r3, [r4, #24]
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	b953      	cbnz	r3, 800448a <__swsetup_r+0xc6>
 8004474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004478:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800447c:	d1ba      	bne.n	80043f4 <__swsetup_r+0x30>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	0792      	lsls	r2, r2, #30
 8004482:	bf58      	it	pl
 8004484:	6963      	ldrpl	r3, [r4, #20]
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	e7f2      	b.n	8004470 <__swsetup_r+0xac>
 800448a:	2000      	movs	r0, #0
 800448c:	e7f7      	b.n	800447e <__swsetup_r+0xba>
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c
 8004494:	08005228 	.word	0x08005228
 8004498:	08005248 	.word	0x08005248
 800449c:	08005208 	.word	0x08005208

080044a0 <__sflush_r>:
 80044a0:	898a      	ldrh	r2, [r1, #12]
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	4605      	mov	r5, r0
 80044a8:	0710      	lsls	r0, r2, #28
 80044aa:	460c      	mov	r4, r1
 80044ac:	d458      	bmi.n	8004560 <__sflush_r+0xc0>
 80044ae:	684b      	ldr	r3, [r1, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dc05      	bgt.n	80044c0 <__sflush_r+0x20>
 80044b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dc02      	bgt.n	80044c0 <__sflush_r+0x20>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	d0f9      	beq.n	80044ba <__sflush_r+0x1a>
 80044c6:	2300      	movs	r3, #0
 80044c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044cc:	682f      	ldr	r7, [r5, #0]
 80044ce:	6a21      	ldr	r1, [r4, #32]
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	d032      	beq.n	800453a <__sflush_r+0x9a>
 80044d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044d6:	89a3      	ldrh	r3, [r4, #12]
 80044d8:	075a      	lsls	r2, r3, #29
 80044da:	d505      	bpl.n	80044e8 <__sflush_r+0x48>
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	1ac0      	subs	r0, r0, r3
 80044e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044e2:	b10b      	cbz	r3, 80044e8 <__sflush_r+0x48>
 80044e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044e6:	1ac0      	subs	r0, r0, r3
 80044e8:	2300      	movs	r3, #0
 80044ea:	4602      	mov	r2, r0
 80044ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ee:	6a21      	ldr	r1, [r4, #32]
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b0      	blx	r6
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	89a3      	ldrh	r3, [r4, #12]
 80044f8:	d106      	bne.n	8004508 <__sflush_r+0x68>
 80044fa:	6829      	ldr	r1, [r5, #0]
 80044fc:	291d      	cmp	r1, #29
 80044fe:	d848      	bhi.n	8004592 <__sflush_r+0xf2>
 8004500:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <__sflush_r+0x108>)
 8004502:	40ca      	lsrs	r2, r1
 8004504:	07d6      	lsls	r6, r2, #31
 8004506:	d544      	bpl.n	8004592 <__sflush_r+0xf2>
 8004508:	2200      	movs	r2, #0
 800450a:	6062      	str	r2, [r4, #4]
 800450c:	04d9      	lsls	r1, r3, #19
 800450e:	6922      	ldr	r2, [r4, #16]
 8004510:	6022      	str	r2, [r4, #0]
 8004512:	d504      	bpl.n	800451e <__sflush_r+0x7e>
 8004514:	1c42      	adds	r2, r0, #1
 8004516:	d101      	bne.n	800451c <__sflush_r+0x7c>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b903      	cbnz	r3, 800451e <__sflush_r+0x7e>
 800451c:	6560      	str	r0, [r4, #84]	; 0x54
 800451e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004520:	602f      	str	r7, [r5, #0]
 8004522:	2900      	cmp	r1, #0
 8004524:	d0c9      	beq.n	80044ba <__sflush_r+0x1a>
 8004526:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800452a:	4299      	cmp	r1, r3
 800452c:	d002      	beq.n	8004534 <__sflush_r+0x94>
 800452e:	4628      	mov	r0, r5
 8004530:	f000 f994 	bl	800485c <_free_r>
 8004534:	2000      	movs	r0, #0
 8004536:	6360      	str	r0, [r4, #52]	; 0x34
 8004538:	e7c0      	b.n	80044bc <__sflush_r+0x1c>
 800453a:	2301      	movs	r3, #1
 800453c:	4628      	mov	r0, r5
 800453e:	47b0      	blx	r6
 8004540:	1c41      	adds	r1, r0, #1
 8004542:	d1c8      	bne.n	80044d6 <__sflush_r+0x36>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0c5      	beq.n	80044d6 <__sflush_r+0x36>
 800454a:	2b1d      	cmp	r3, #29
 800454c:	d001      	beq.n	8004552 <__sflush_r+0xb2>
 800454e:	2b16      	cmp	r3, #22
 8004550:	d101      	bne.n	8004556 <__sflush_r+0xb6>
 8004552:	602f      	str	r7, [r5, #0]
 8004554:	e7b1      	b.n	80044ba <__sflush_r+0x1a>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	e7ad      	b.n	80044bc <__sflush_r+0x1c>
 8004560:	690f      	ldr	r7, [r1, #16]
 8004562:	2f00      	cmp	r7, #0
 8004564:	d0a9      	beq.n	80044ba <__sflush_r+0x1a>
 8004566:	0793      	lsls	r3, r2, #30
 8004568:	680e      	ldr	r6, [r1, #0]
 800456a:	bf08      	it	eq
 800456c:	694b      	ldreq	r3, [r1, #20]
 800456e:	600f      	str	r7, [r1, #0]
 8004570:	bf18      	it	ne
 8004572:	2300      	movne	r3, #0
 8004574:	eba6 0807 	sub.w	r8, r6, r7
 8004578:	608b      	str	r3, [r1, #8]
 800457a:	f1b8 0f00 	cmp.w	r8, #0
 800457e:	dd9c      	ble.n	80044ba <__sflush_r+0x1a>
 8004580:	4643      	mov	r3, r8
 8004582:	463a      	mov	r2, r7
 8004584:	6a21      	ldr	r1, [r4, #32]
 8004586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004588:	4628      	mov	r0, r5
 800458a:	47b0      	blx	r6
 800458c:	2800      	cmp	r0, #0
 800458e:	dc06      	bgt.n	800459e <__sflush_r+0xfe>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	e78e      	b.n	80044bc <__sflush_r+0x1c>
 800459e:	4407      	add	r7, r0
 80045a0:	eba8 0800 	sub.w	r8, r8, r0
 80045a4:	e7e9      	b.n	800457a <__sflush_r+0xda>
 80045a6:	bf00      	nop
 80045a8:	20400001 	.word	0x20400001

080045ac <_fflush_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	690b      	ldr	r3, [r1, #16]
 80045b0:	4605      	mov	r5, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	b1db      	cbz	r3, 80045ee <_fflush_r+0x42>
 80045b6:	b118      	cbz	r0, 80045c0 <_fflush_r+0x14>
 80045b8:	6983      	ldr	r3, [r0, #24]
 80045ba:	b90b      	cbnz	r3, 80045c0 <_fflush_r+0x14>
 80045bc:	f000 f860 	bl	8004680 <__sinit>
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <_fflush_r+0x48>)
 80045c2:	429c      	cmp	r4, r3
 80045c4:	d109      	bne.n	80045da <_fflush_r+0x2e>
 80045c6:	686c      	ldr	r4, [r5, #4]
 80045c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045cc:	b17b      	cbz	r3, 80045ee <_fflush_r+0x42>
 80045ce:	4621      	mov	r1, r4
 80045d0:	4628      	mov	r0, r5
 80045d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045d6:	f7ff bf63 	b.w	80044a0 <__sflush_r>
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <_fflush_r+0x4c>)
 80045dc:	429c      	cmp	r4, r3
 80045de:	d101      	bne.n	80045e4 <_fflush_r+0x38>
 80045e0:	68ac      	ldr	r4, [r5, #8]
 80045e2:	e7f1      	b.n	80045c8 <_fflush_r+0x1c>
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <_fflush_r+0x50>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	bf08      	it	eq
 80045ea:	68ec      	ldreq	r4, [r5, #12]
 80045ec:	e7ec      	b.n	80045c8 <_fflush_r+0x1c>
 80045ee:	2000      	movs	r0, #0
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
 80045f2:	bf00      	nop
 80045f4:	08005228 	.word	0x08005228
 80045f8:	08005248 	.word	0x08005248
 80045fc:	08005208 	.word	0x08005208

08004600 <std>:
 8004600:	2300      	movs	r3, #0
 8004602:	b510      	push	{r4, lr}
 8004604:	4604      	mov	r4, r0
 8004606:	e9c0 3300 	strd	r3, r3, [r0]
 800460a:	6083      	str	r3, [r0, #8]
 800460c:	8181      	strh	r1, [r0, #12]
 800460e:	6643      	str	r3, [r0, #100]	; 0x64
 8004610:	81c2      	strh	r2, [r0, #14]
 8004612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004616:	6183      	str	r3, [r0, #24]
 8004618:	4619      	mov	r1, r3
 800461a:	2208      	movs	r2, #8
 800461c:	305c      	adds	r0, #92	; 0x5c
 800461e:	f7ff fdcd 	bl	80041bc <memset>
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <std+0x38>)
 8004624:	6263      	str	r3, [r4, #36]	; 0x24
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <std+0x3c>)
 8004628:	62a3      	str	r3, [r4, #40]	; 0x28
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <std+0x40>)
 800462c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <std+0x44>)
 8004630:	6224      	str	r4, [r4, #32]
 8004632:	6323      	str	r3, [r4, #48]	; 0x30
 8004634:	bd10      	pop	{r4, pc}
 8004636:	bf00      	nop
 8004638:	08004fc9 	.word	0x08004fc9
 800463c:	08004feb 	.word	0x08004feb
 8004640:	08005023 	.word	0x08005023
 8004644:	08005047 	.word	0x08005047

08004648 <_cleanup_r>:
 8004648:	4901      	ldr	r1, [pc, #4]	; (8004650 <_cleanup_r+0x8>)
 800464a:	f000 b885 	b.w	8004758 <_fwalk_reent>
 800464e:	bf00      	nop
 8004650:	080045ad 	.word	0x080045ad

08004654 <__sfmoreglue>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	1e4a      	subs	r2, r1, #1
 8004658:	2568      	movs	r5, #104	; 0x68
 800465a:	4355      	muls	r5, r2
 800465c:	460e      	mov	r6, r1
 800465e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004662:	f000 f949 	bl	80048f8 <_malloc_r>
 8004666:	4604      	mov	r4, r0
 8004668:	b140      	cbz	r0, 800467c <__sfmoreglue+0x28>
 800466a:	2100      	movs	r1, #0
 800466c:	e9c0 1600 	strd	r1, r6, [r0]
 8004670:	300c      	adds	r0, #12
 8004672:	60a0      	str	r0, [r4, #8]
 8004674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004678:	f7ff fda0 	bl	80041bc <memset>
 800467c:	4620      	mov	r0, r4
 800467e:	bd70      	pop	{r4, r5, r6, pc}

08004680 <__sinit>:
 8004680:	6983      	ldr	r3, [r0, #24]
 8004682:	b510      	push	{r4, lr}
 8004684:	4604      	mov	r4, r0
 8004686:	bb33      	cbnz	r3, 80046d6 <__sinit+0x56>
 8004688:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800468c:	6503      	str	r3, [r0, #80]	; 0x50
 800468e:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <__sinit+0x58>)
 8004690:	4a12      	ldr	r2, [pc, #72]	; (80046dc <__sinit+0x5c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6282      	str	r2, [r0, #40]	; 0x28
 8004696:	4298      	cmp	r0, r3
 8004698:	bf04      	itt	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	6183      	streq	r3, [r0, #24]
 800469e:	f000 f81f 	bl	80046e0 <__sfp>
 80046a2:	6060      	str	r0, [r4, #4]
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 f81b 	bl	80046e0 <__sfp>
 80046aa:	60a0      	str	r0, [r4, #8]
 80046ac:	4620      	mov	r0, r4
 80046ae:	f000 f817 	bl	80046e0 <__sfp>
 80046b2:	2200      	movs	r2, #0
 80046b4:	60e0      	str	r0, [r4, #12]
 80046b6:	2104      	movs	r1, #4
 80046b8:	6860      	ldr	r0, [r4, #4]
 80046ba:	f7ff ffa1 	bl	8004600 <std>
 80046be:	2201      	movs	r2, #1
 80046c0:	2109      	movs	r1, #9
 80046c2:	68a0      	ldr	r0, [r4, #8]
 80046c4:	f7ff ff9c 	bl	8004600 <std>
 80046c8:	2202      	movs	r2, #2
 80046ca:	2112      	movs	r1, #18
 80046cc:	68e0      	ldr	r0, [r4, #12]
 80046ce:	f7ff ff97 	bl	8004600 <std>
 80046d2:	2301      	movs	r3, #1
 80046d4:	61a3      	str	r3, [r4, #24]
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	08005204 	.word	0x08005204
 80046dc:	08004649 	.word	0x08004649

080046e0 <__sfp>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <__sfp+0x70>)
 80046e4:	681e      	ldr	r6, [r3, #0]
 80046e6:	69b3      	ldr	r3, [r6, #24]
 80046e8:	4607      	mov	r7, r0
 80046ea:	b913      	cbnz	r3, 80046f2 <__sfp+0x12>
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff ffc7 	bl	8004680 <__sinit>
 80046f2:	3648      	adds	r6, #72	; 0x48
 80046f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	d503      	bpl.n	8004704 <__sfp+0x24>
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	b133      	cbz	r3, 800470e <__sfp+0x2e>
 8004700:	6836      	ldr	r6, [r6, #0]
 8004702:	e7f7      	b.n	80046f4 <__sfp+0x14>
 8004704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004708:	b16d      	cbz	r5, 8004726 <__sfp+0x46>
 800470a:	3468      	adds	r4, #104	; 0x68
 800470c:	e7f4      	b.n	80046f8 <__sfp+0x18>
 800470e:	2104      	movs	r1, #4
 8004710:	4638      	mov	r0, r7
 8004712:	f7ff ff9f 	bl	8004654 <__sfmoreglue>
 8004716:	6030      	str	r0, [r6, #0]
 8004718:	2800      	cmp	r0, #0
 800471a:	d1f1      	bne.n	8004700 <__sfp+0x20>
 800471c:	230c      	movs	r3, #12
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4604      	mov	r4, r0
 8004722:	4620      	mov	r0, r4
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <__sfp+0x74>)
 8004728:	6665      	str	r5, [r4, #100]	; 0x64
 800472a:	e9c4 5500 	strd	r5, r5, [r4]
 800472e:	60a5      	str	r5, [r4, #8]
 8004730:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004734:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004738:	2208      	movs	r2, #8
 800473a:	4629      	mov	r1, r5
 800473c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004740:	f7ff fd3c 	bl	80041bc <memset>
 8004744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800474c:	e7e9      	b.n	8004722 <__sfp+0x42>
 800474e:	bf00      	nop
 8004750:	08005204 	.word	0x08005204
 8004754:	ffff0001 	.word	0xffff0001

08004758 <_fwalk_reent>:
 8004758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800475c:	4680      	mov	r8, r0
 800475e:	4689      	mov	r9, r1
 8004760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004764:	2600      	movs	r6, #0
 8004766:	b914      	cbnz	r4, 800476e <_fwalk_reent+0x16>
 8004768:	4630      	mov	r0, r6
 800476a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800476e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004772:	3f01      	subs	r7, #1
 8004774:	d501      	bpl.n	800477a <_fwalk_reent+0x22>
 8004776:	6824      	ldr	r4, [r4, #0]
 8004778:	e7f5      	b.n	8004766 <_fwalk_reent+0xe>
 800477a:	89ab      	ldrh	r3, [r5, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d907      	bls.n	8004790 <_fwalk_reent+0x38>
 8004780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004784:	3301      	adds	r3, #1
 8004786:	d003      	beq.n	8004790 <_fwalk_reent+0x38>
 8004788:	4629      	mov	r1, r5
 800478a:	4640      	mov	r0, r8
 800478c:	47c8      	blx	r9
 800478e:	4306      	orrs	r6, r0
 8004790:	3568      	adds	r5, #104	; 0x68
 8004792:	e7ee      	b.n	8004772 <_fwalk_reent+0x1a>

08004794 <__swhatbuf_r>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	460e      	mov	r6, r1
 8004798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479c:	2900      	cmp	r1, #0
 800479e:	b096      	sub	sp, #88	; 0x58
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	da07      	bge.n	80047b6 <__swhatbuf_r+0x22>
 80047a6:	2300      	movs	r3, #0
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	89b3      	ldrh	r3, [r6, #12]
 80047ac:	061a      	lsls	r2, r3, #24
 80047ae:	d410      	bmi.n	80047d2 <__swhatbuf_r+0x3e>
 80047b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b4:	e00e      	b.n	80047d4 <__swhatbuf_r+0x40>
 80047b6:	466a      	mov	r2, sp
 80047b8:	f000 fc6c 	bl	8005094 <_fstat_r>
 80047bc:	2800      	cmp	r0, #0
 80047be:	dbf2      	blt.n	80047a6 <__swhatbuf_r+0x12>
 80047c0:	9a01      	ldr	r2, [sp, #4]
 80047c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047ca:	425a      	negs	r2, r3
 80047cc:	415a      	adcs	r2, r3
 80047ce:	602a      	str	r2, [r5, #0]
 80047d0:	e7ee      	b.n	80047b0 <__swhatbuf_r+0x1c>
 80047d2:	2340      	movs	r3, #64	; 0x40
 80047d4:	2000      	movs	r0, #0
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	b016      	add	sp, #88	; 0x58
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <__smakebuf_r>:
 80047dc:	898b      	ldrh	r3, [r1, #12]
 80047de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80047e0:	079d      	lsls	r5, r3, #30
 80047e2:	4606      	mov	r6, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	d507      	bpl.n	80047f8 <__smakebuf_r+0x1c>
 80047e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	2301      	movs	r3, #1
 80047f2:	6163      	str	r3, [r4, #20]
 80047f4:	b002      	add	sp, #8
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	ab01      	add	r3, sp, #4
 80047fa:	466a      	mov	r2, sp
 80047fc:	f7ff ffca 	bl	8004794 <__swhatbuf_r>
 8004800:	9900      	ldr	r1, [sp, #0]
 8004802:	4605      	mov	r5, r0
 8004804:	4630      	mov	r0, r6
 8004806:	f000 f877 	bl	80048f8 <_malloc_r>
 800480a:	b948      	cbnz	r0, 8004820 <__smakebuf_r+0x44>
 800480c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004810:	059a      	lsls	r2, r3, #22
 8004812:	d4ef      	bmi.n	80047f4 <__smakebuf_r+0x18>
 8004814:	f023 0303 	bic.w	r3, r3, #3
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	81a3      	strh	r3, [r4, #12]
 800481e:	e7e3      	b.n	80047e8 <__smakebuf_r+0xc>
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <__smakebuf_r+0x7c>)
 8004822:	62b3      	str	r3, [r6, #40]	; 0x28
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	6020      	str	r0, [r4, #0]
 8004828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482c:	81a3      	strh	r3, [r4, #12]
 800482e:	9b00      	ldr	r3, [sp, #0]
 8004830:	6163      	str	r3, [r4, #20]
 8004832:	9b01      	ldr	r3, [sp, #4]
 8004834:	6120      	str	r0, [r4, #16]
 8004836:	b15b      	cbz	r3, 8004850 <__smakebuf_r+0x74>
 8004838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800483c:	4630      	mov	r0, r6
 800483e:	f000 fc3b 	bl	80050b8 <_isatty_r>
 8004842:	b128      	cbz	r0, 8004850 <__smakebuf_r+0x74>
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	431d      	orrs	r5, r3
 8004854:	81a5      	strh	r5, [r4, #12]
 8004856:	e7cd      	b.n	80047f4 <__smakebuf_r+0x18>
 8004858:	08004649 	.word	0x08004649

0800485c <_free_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4605      	mov	r5, r0
 8004860:	2900      	cmp	r1, #0
 8004862:	d045      	beq.n	80048f0 <_free_r+0x94>
 8004864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004868:	1f0c      	subs	r4, r1, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	bfb8      	it	lt
 800486e:	18e4      	addlt	r4, r4, r3
 8004870:	f000 fc44 	bl	80050fc <__malloc_lock>
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <_free_r+0x98>)
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	4610      	mov	r0, r2
 800487a:	b933      	cbnz	r3, 800488a <_free_r+0x2e>
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6014      	str	r4, [r2, #0]
 8004880:	4628      	mov	r0, r5
 8004882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004886:	f000 bc3a 	b.w	80050fe <__malloc_unlock>
 800488a:	42a3      	cmp	r3, r4
 800488c:	d90c      	bls.n	80048a8 <_free_r+0x4c>
 800488e:	6821      	ldr	r1, [r4, #0]
 8004890:	1862      	adds	r2, r4, r1
 8004892:	4293      	cmp	r3, r2
 8004894:	bf04      	itt	eq
 8004896:	681a      	ldreq	r2, [r3, #0]
 8004898:	685b      	ldreq	r3, [r3, #4]
 800489a:	6063      	str	r3, [r4, #4]
 800489c:	bf04      	itt	eq
 800489e:	1852      	addeq	r2, r2, r1
 80048a0:	6022      	streq	r2, [r4, #0]
 80048a2:	6004      	str	r4, [r0, #0]
 80048a4:	e7ec      	b.n	8004880 <_free_r+0x24>
 80048a6:	4613      	mov	r3, r2
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	b10a      	cbz	r2, 80048b0 <_free_r+0x54>
 80048ac:	42a2      	cmp	r2, r4
 80048ae:	d9fa      	bls.n	80048a6 <_free_r+0x4a>
 80048b0:	6819      	ldr	r1, [r3, #0]
 80048b2:	1858      	adds	r0, r3, r1
 80048b4:	42a0      	cmp	r0, r4
 80048b6:	d10b      	bne.n	80048d0 <_free_r+0x74>
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	4401      	add	r1, r0
 80048bc:	1858      	adds	r0, r3, r1
 80048be:	4282      	cmp	r2, r0
 80048c0:	6019      	str	r1, [r3, #0]
 80048c2:	d1dd      	bne.n	8004880 <_free_r+0x24>
 80048c4:	6810      	ldr	r0, [r2, #0]
 80048c6:	6852      	ldr	r2, [r2, #4]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	4401      	add	r1, r0
 80048cc:	6019      	str	r1, [r3, #0]
 80048ce:	e7d7      	b.n	8004880 <_free_r+0x24>
 80048d0:	d902      	bls.n	80048d8 <_free_r+0x7c>
 80048d2:	230c      	movs	r3, #12
 80048d4:	602b      	str	r3, [r5, #0]
 80048d6:	e7d3      	b.n	8004880 <_free_r+0x24>
 80048d8:	6820      	ldr	r0, [r4, #0]
 80048da:	1821      	adds	r1, r4, r0
 80048dc:	428a      	cmp	r2, r1
 80048de:	bf04      	itt	eq
 80048e0:	6811      	ldreq	r1, [r2, #0]
 80048e2:	6852      	ldreq	r2, [r2, #4]
 80048e4:	6062      	str	r2, [r4, #4]
 80048e6:	bf04      	itt	eq
 80048e8:	1809      	addeq	r1, r1, r0
 80048ea:	6021      	streq	r1, [r4, #0]
 80048ec:	605c      	str	r4, [r3, #4]
 80048ee:	e7c7      	b.n	8004880 <_free_r+0x24>
 80048f0:	bd38      	pop	{r3, r4, r5, pc}
 80048f2:	bf00      	nop
 80048f4:	20000098 	.word	0x20000098

080048f8 <_malloc_r>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	1ccd      	adds	r5, r1, #3
 80048fc:	f025 0503 	bic.w	r5, r5, #3
 8004900:	3508      	adds	r5, #8
 8004902:	2d0c      	cmp	r5, #12
 8004904:	bf38      	it	cc
 8004906:	250c      	movcc	r5, #12
 8004908:	2d00      	cmp	r5, #0
 800490a:	4606      	mov	r6, r0
 800490c:	db01      	blt.n	8004912 <_malloc_r+0x1a>
 800490e:	42a9      	cmp	r1, r5
 8004910:	d903      	bls.n	800491a <_malloc_r+0x22>
 8004912:	230c      	movs	r3, #12
 8004914:	6033      	str	r3, [r6, #0]
 8004916:	2000      	movs	r0, #0
 8004918:	bd70      	pop	{r4, r5, r6, pc}
 800491a:	f000 fbef 	bl	80050fc <__malloc_lock>
 800491e:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <_malloc_r+0xac>)
 8004920:	6814      	ldr	r4, [r2, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	b991      	cbnz	r1, 800494c <_malloc_r+0x54>
 8004926:	4c20      	ldr	r4, [pc, #128]	; (80049a8 <_malloc_r+0xb0>)
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	b91b      	cbnz	r3, 8004934 <_malloc_r+0x3c>
 800492c:	4630      	mov	r0, r6
 800492e:	f000 fb3b 	bl	8004fa8 <_sbrk_r>
 8004932:	6020      	str	r0, [r4, #0]
 8004934:	4629      	mov	r1, r5
 8004936:	4630      	mov	r0, r6
 8004938:	f000 fb36 	bl	8004fa8 <_sbrk_r>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d124      	bne.n	800498a <_malloc_r+0x92>
 8004940:	230c      	movs	r3, #12
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	4630      	mov	r0, r6
 8004946:	f000 fbda 	bl	80050fe <__malloc_unlock>
 800494a:	e7e4      	b.n	8004916 <_malloc_r+0x1e>
 800494c:	680b      	ldr	r3, [r1, #0]
 800494e:	1b5b      	subs	r3, r3, r5
 8004950:	d418      	bmi.n	8004984 <_malloc_r+0x8c>
 8004952:	2b0b      	cmp	r3, #11
 8004954:	d90f      	bls.n	8004976 <_malloc_r+0x7e>
 8004956:	600b      	str	r3, [r1, #0]
 8004958:	50cd      	str	r5, [r1, r3]
 800495a:	18cc      	adds	r4, r1, r3
 800495c:	4630      	mov	r0, r6
 800495e:	f000 fbce 	bl	80050fe <__malloc_unlock>
 8004962:	f104 000b 	add.w	r0, r4, #11
 8004966:	1d23      	adds	r3, r4, #4
 8004968:	f020 0007 	bic.w	r0, r0, #7
 800496c:	1ac3      	subs	r3, r0, r3
 800496e:	d0d3      	beq.n	8004918 <_malloc_r+0x20>
 8004970:	425a      	negs	r2, r3
 8004972:	50e2      	str	r2, [r4, r3]
 8004974:	e7d0      	b.n	8004918 <_malloc_r+0x20>
 8004976:	428c      	cmp	r4, r1
 8004978:	684b      	ldr	r3, [r1, #4]
 800497a:	bf16      	itet	ne
 800497c:	6063      	strne	r3, [r4, #4]
 800497e:	6013      	streq	r3, [r2, #0]
 8004980:	460c      	movne	r4, r1
 8004982:	e7eb      	b.n	800495c <_malloc_r+0x64>
 8004984:	460c      	mov	r4, r1
 8004986:	6849      	ldr	r1, [r1, #4]
 8004988:	e7cc      	b.n	8004924 <_malloc_r+0x2c>
 800498a:	1cc4      	adds	r4, r0, #3
 800498c:	f024 0403 	bic.w	r4, r4, #3
 8004990:	42a0      	cmp	r0, r4
 8004992:	d005      	beq.n	80049a0 <_malloc_r+0xa8>
 8004994:	1a21      	subs	r1, r4, r0
 8004996:	4630      	mov	r0, r6
 8004998:	f000 fb06 	bl	8004fa8 <_sbrk_r>
 800499c:	3001      	adds	r0, #1
 800499e:	d0cf      	beq.n	8004940 <_malloc_r+0x48>
 80049a0:	6025      	str	r5, [r4, #0]
 80049a2:	e7db      	b.n	800495c <_malloc_r+0x64>
 80049a4:	20000098 	.word	0x20000098
 80049a8:	2000009c 	.word	0x2000009c

080049ac <__sfputc_r>:
 80049ac:	6893      	ldr	r3, [r2, #8]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	b410      	push	{r4}
 80049b4:	6093      	str	r3, [r2, #8]
 80049b6:	da08      	bge.n	80049ca <__sfputc_r+0x1e>
 80049b8:	6994      	ldr	r4, [r2, #24]
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	db01      	blt.n	80049c2 <__sfputc_r+0x16>
 80049be:	290a      	cmp	r1, #10
 80049c0:	d103      	bne.n	80049ca <__sfputc_r+0x1e>
 80049c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c6:	f7ff bcab 	b.w	8004320 <__swbuf_r>
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	1c58      	adds	r0, r3, #1
 80049ce:	6010      	str	r0, [r2, #0]
 80049d0:	7019      	strb	r1, [r3, #0]
 80049d2:	4608      	mov	r0, r1
 80049d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d8:	4770      	bx	lr

080049da <__sfputs_r>:
 80049da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049dc:	4606      	mov	r6, r0
 80049de:	460f      	mov	r7, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	18d5      	adds	r5, r2, r3
 80049e4:	42ac      	cmp	r4, r5
 80049e6:	d101      	bne.n	80049ec <__sfputs_r+0x12>
 80049e8:	2000      	movs	r0, #0
 80049ea:	e007      	b.n	80049fc <__sfputs_r+0x22>
 80049ec:	463a      	mov	r2, r7
 80049ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049f2:	4630      	mov	r0, r6
 80049f4:	f7ff ffda 	bl	80049ac <__sfputc_r>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d1f3      	bne.n	80049e4 <__sfputs_r+0xa>
 80049fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a00 <_vfiprintf_r>:
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	460c      	mov	r4, r1
 8004a06:	b09d      	sub	sp, #116	; 0x74
 8004a08:	4617      	mov	r7, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	b118      	cbz	r0, 8004a18 <_vfiprintf_r+0x18>
 8004a10:	6983      	ldr	r3, [r0, #24]
 8004a12:	b90b      	cbnz	r3, 8004a18 <_vfiprintf_r+0x18>
 8004a14:	f7ff fe34 	bl	8004680 <__sinit>
 8004a18:	4b7c      	ldr	r3, [pc, #496]	; (8004c0c <_vfiprintf_r+0x20c>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d158      	bne.n	8004ad0 <_vfiprintf_r+0xd0>
 8004a1e:	6874      	ldr	r4, [r6, #4]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	0718      	lsls	r0, r3, #28
 8004a24:	d55e      	bpl.n	8004ae4 <_vfiprintf_r+0xe4>
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d05b      	beq.n	8004ae4 <_vfiprintf_r+0xe4>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a30:	2320      	movs	r3, #32
 8004a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a36:	2330      	movs	r3, #48	; 0x30
 8004a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a3c:	9503      	str	r5, [sp, #12]
 8004a3e:	f04f 0b01 	mov.w	fp, #1
 8004a42:	46b8      	mov	r8, r7
 8004a44:	4645      	mov	r5, r8
 8004a46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a4a:	b10b      	cbz	r3, 8004a50 <_vfiprintf_r+0x50>
 8004a4c:	2b25      	cmp	r3, #37	; 0x25
 8004a4e:	d154      	bne.n	8004afa <_vfiprintf_r+0xfa>
 8004a50:	ebb8 0a07 	subs.w	sl, r8, r7
 8004a54:	d00b      	beq.n	8004a6e <_vfiprintf_r+0x6e>
 8004a56:	4653      	mov	r3, sl
 8004a58:	463a      	mov	r2, r7
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff ffbc 	bl	80049da <__sfputs_r>
 8004a62:	3001      	adds	r0, #1
 8004a64:	f000 80c2 	beq.w	8004bec <_vfiprintf_r+0x1ec>
 8004a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a6a:	4453      	add	r3, sl
 8004a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6e:	f898 3000 	ldrb.w	r3, [r8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80ba 	beq.w	8004bec <_vfiprintf_r+0x1ec>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	9307      	str	r3, [sp, #28]
 8004a86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a8a:	931a      	str	r3, [sp, #104]	; 0x68
 8004a8c:	46a8      	mov	r8, r5
 8004a8e:	2205      	movs	r2, #5
 8004a90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004a94:	485e      	ldr	r0, [pc, #376]	; (8004c10 <_vfiprintf_r+0x210>)
 8004a96:	f7fb fba3 	bl	80001e0 <memchr>
 8004a9a:	9b04      	ldr	r3, [sp, #16]
 8004a9c:	bb78      	cbnz	r0, 8004afe <_vfiprintf_r+0xfe>
 8004a9e:	06d9      	lsls	r1, r3, #27
 8004aa0:	bf44      	itt	mi
 8004aa2:	2220      	movmi	r2, #32
 8004aa4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aa8:	071a      	lsls	r2, r3, #28
 8004aaa:	bf44      	itt	mi
 8004aac:	222b      	movmi	r2, #43	; 0x2b
 8004aae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ab2:	782a      	ldrb	r2, [r5, #0]
 8004ab4:	2a2a      	cmp	r2, #42	; 0x2a
 8004ab6:	d02a      	beq.n	8004b0e <_vfiprintf_r+0x10e>
 8004ab8:	9a07      	ldr	r2, [sp, #28]
 8004aba:	46a8      	mov	r8, r5
 8004abc:	2000      	movs	r0, #0
 8004abe:	250a      	movs	r5, #10
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ac6:	3b30      	subs	r3, #48	; 0x30
 8004ac8:	2b09      	cmp	r3, #9
 8004aca:	d969      	bls.n	8004ba0 <_vfiprintf_r+0x1a0>
 8004acc:	b360      	cbz	r0, 8004b28 <_vfiprintf_r+0x128>
 8004ace:	e024      	b.n	8004b1a <_vfiprintf_r+0x11a>
 8004ad0:	4b50      	ldr	r3, [pc, #320]	; (8004c14 <_vfiprintf_r+0x214>)
 8004ad2:	429c      	cmp	r4, r3
 8004ad4:	d101      	bne.n	8004ada <_vfiprintf_r+0xda>
 8004ad6:	68b4      	ldr	r4, [r6, #8]
 8004ad8:	e7a2      	b.n	8004a20 <_vfiprintf_r+0x20>
 8004ada:	4b4f      	ldr	r3, [pc, #316]	; (8004c18 <_vfiprintf_r+0x218>)
 8004adc:	429c      	cmp	r4, r3
 8004ade:	bf08      	it	eq
 8004ae0:	68f4      	ldreq	r4, [r6, #12]
 8004ae2:	e79d      	b.n	8004a20 <_vfiprintf_r+0x20>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f7ff fc6c 	bl	80043c4 <__swsetup_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d09d      	beq.n	8004a2c <_vfiprintf_r+0x2c>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	b01d      	add	sp, #116	; 0x74
 8004af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afa:	46a8      	mov	r8, r5
 8004afc:	e7a2      	b.n	8004a44 <_vfiprintf_r+0x44>
 8004afe:	4a44      	ldr	r2, [pc, #272]	; (8004c10 <_vfiprintf_r+0x210>)
 8004b00:	1a80      	subs	r0, r0, r2
 8004b02:	fa0b f000 	lsl.w	r0, fp, r0
 8004b06:	4318      	orrs	r0, r3
 8004b08:	9004      	str	r0, [sp, #16]
 8004b0a:	4645      	mov	r5, r8
 8004b0c:	e7be      	b.n	8004a8c <_vfiprintf_r+0x8c>
 8004b0e:	9a03      	ldr	r2, [sp, #12]
 8004b10:	1d11      	adds	r1, r2, #4
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	9103      	str	r1, [sp, #12]
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	db01      	blt.n	8004b1e <_vfiprintf_r+0x11e>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e004      	b.n	8004b28 <_vfiprintf_r+0x128>
 8004b1e:	4252      	negs	r2, r2
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	9207      	str	r2, [sp, #28]
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	f898 3000 	ldrb.w	r3, [r8]
 8004b2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b2e:	d10e      	bne.n	8004b4e <_vfiprintf_r+0x14e>
 8004b30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004b34:	2b2a      	cmp	r3, #42	; 0x2a
 8004b36:	d138      	bne.n	8004baa <_vfiprintf_r+0x1aa>
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	9203      	str	r2, [sp, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bfb8      	it	lt
 8004b44:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b48:	f108 0802 	add.w	r8, r8, #2
 8004b4c:	9305      	str	r3, [sp, #20]
 8004b4e:	4d33      	ldr	r5, [pc, #204]	; (8004c1c <_vfiprintf_r+0x21c>)
 8004b50:	f898 1000 	ldrb.w	r1, [r8]
 8004b54:	2203      	movs	r2, #3
 8004b56:	4628      	mov	r0, r5
 8004b58:	f7fb fb42 	bl	80001e0 <memchr>
 8004b5c:	b140      	cbz	r0, 8004b70 <_vfiprintf_r+0x170>
 8004b5e:	2340      	movs	r3, #64	; 0x40
 8004b60:	1b40      	subs	r0, r0, r5
 8004b62:	fa03 f000 	lsl.w	r0, r3, r0
 8004b66:	9b04      	ldr	r3, [sp, #16]
 8004b68:	4303      	orrs	r3, r0
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	9304      	str	r3, [sp, #16]
 8004b70:	f898 1000 	ldrb.w	r1, [r8]
 8004b74:	482a      	ldr	r0, [pc, #168]	; (8004c20 <_vfiprintf_r+0x220>)
 8004b76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b7a:	2206      	movs	r2, #6
 8004b7c:	f108 0701 	add.w	r7, r8, #1
 8004b80:	f7fb fb2e 	bl	80001e0 <memchr>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d037      	beq.n	8004bf8 <_vfiprintf_r+0x1f8>
 8004b88:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <_vfiprintf_r+0x224>)
 8004b8a:	bb1b      	cbnz	r3, 8004bd4 <_vfiprintf_r+0x1d4>
 8004b8c:	9b03      	ldr	r3, [sp, #12]
 8004b8e:	3307      	adds	r3, #7
 8004b90:	f023 0307 	bic.w	r3, r3, #7
 8004b94:	3308      	adds	r3, #8
 8004b96:	9303      	str	r3, [sp, #12]
 8004b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9a:	444b      	add	r3, r9
 8004b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9e:	e750      	b.n	8004a42 <_vfiprintf_r+0x42>
 8004ba0:	fb05 3202 	mla	r2, r5, r2, r3
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	4688      	mov	r8, r1
 8004ba8:	e78a      	b.n	8004ac0 <_vfiprintf_r+0xc0>
 8004baa:	2300      	movs	r3, #0
 8004bac:	f108 0801 	add.w	r8, r8, #1
 8004bb0:	9305      	str	r3, [sp, #20]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	250a      	movs	r5, #10
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bbc:	3a30      	subs	r2, #48	; 0x30
 8004bbe:	2a09      	cmp	r2, #9
 8004bc0:	d903      	bls.n	8004bca <_vfiprintf_r+0x1ca>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0c3      	beq.n	8004b4e <_vfiprintf_r+0x14e>
 8004bc6:	9105      	str	r1, [sp, #20]
 8004bc8:	e7c1      	b.n	8004b4e <_vfiprintf_r+0x14e>
 8004bca:	fb05 2101 	mla	r1, r5, r1, r2
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4680      	mov	r8, r0
 8004bd2:	e7f0      	b.n	8004bb6 <_vfiprintf_r+0x1b6>
 8004bd4:	ab03      	add	r3, sp, #12
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <_vfiprintf_r+0x228>)
 8004bdc:	a904      	add	r1, sp, #16
 8004bde:	4630      	mov	r0, r6
 8004be0:	f3af 8000 	nop.w
 8004be4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004be8:	4681      	mov	r9, r0
 8004bea:	d1d5      	bne.n	8004b98 <_vfiprintf_r+0x198>
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	065b      	lsls	r3, r3, #25
 8004bf0:	f53f af7e 	bmi.w	8004af0 <_vfiprintf_r+0xf0>
 8004bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bf6:	e77d      	b.n	8004af4 <_vfiprintf_r+0xf4>
 8004bf8:	ab03      	add	r3, sp, #12
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <_vfiprintf_r+0x228>)
 8004c00:	a904      	add	r1, sp, #16
 8004c02:	4630      	mov	r0, r6
 8004c04:	f000 f888 	bl	8004d18 <_printf_i>
 8004c08:	e7ec      	b.n	8004be4 <_vfiprintf_r+0x1e4>
 8004c0a:	bf00      	nop
 8004c0c:	08005228 	.word	0x08005228
 8004c10:	08005268 	.word	0x08005268
 8004c14:	08005248 	.word	0x08005248
 8004c18:	08005208 	.word	0x08005208
 8004c1c:	0800526e 	.word	0x0800526e
 8004c20:	08005272 	.word	0x08005272
 8004c24:	00000000 	.word	0x00000000
 8004c28:	080049db 	.word	0x080049db

08004c2c <_printf_common>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	4691      	mov	r9, r2
 8004c32:	461f      	mov	r7, r3
 8004c34:	688a      	ldr	r2, [r1, #8]
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	bfb8      	it	lt
 8004c40:	4613      	movlt	r3, r2
 8004c42:	f8c9 3000 	str.w	r3, [r9]
 8004c46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	b112      	cbz	r2, 8004c56 <_printf_common+0x2a>
 8004c50:	3301      	adds	r3, #1
 8004c52:	f8c9 3000 	str.w	r3, [r9]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	0699      	lsls	r1, r3, #26
 8004c5a:	bf42      	ittt	mi
 8004c5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c60:	3302      	addmi	r3, #2
 8004c62:	f8c9 3000 	strmi.w	r3, [r9]
 8004c66:	6825      	ldr	r5, [r4, #0]
 8004c68:	f015 0506 	ands.w	r5, r5, #6
 8004c6c:	d107      	bne.n	8004c7e <_printf_common+0x52>
 8004c6e:	f104 0a19 	add.w	sl, r4, #25
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	f8d9 2000 	ldr.w	r2, [r9]
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	42ab      	cmp	r3, r5
 8004c7c:	dc28      	bgt.n	8004cd0 <_printf_common+0xa4>
 8004c7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	3300      	adds	r3, #0
 8004c86:	bf18      	it	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	0692      	lsls	r2, r2, #26
 8004c8c:	d42d      	bmi.n	8004cea <_printf_common+0xbe>
 8004c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c92:	4639      	mov	r1, r7
 8004c94:	4630      	mov	r0, r6
 8004c96:	47c0      	blx	r8
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d020      	beq.n	8004cde <_printf_common+0xb2>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	68e5      	ldr	r5, [r4, #12]
 8004ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ca4:	f003 0306 	and.w	r3, r3, #6
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	bf08      	it	eq
 8004cac:	1aad      	subeq	r5, r5, r2
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	bf0c      	ite	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	2500      	movne	r5, #0
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	bfc4      	itt	gt
 8004cbe:	1a9b      	subgt	r3, r3, r2
 8004cc0:	18ed      	addgt	r5, r5, r3
 8004cc2:	f04f 0900 	mov.w	r9, #0
 8004cc6:	341a      	adds	r4, #26
 8004cc8:	454d      	cmp	r5, r9
 8004cca:	d11a      	bne.n	8004d02 <_printf_common+0xd6>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e008      	b.n	8004ce2 <_printf_common+0xb6>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	4639      	mov	r1, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d103      	bne.n	8004ce6 <_printf_common+0xba>
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce6:	3501      	adds	r5, #1
 8004ce8:	e7c3      	b.n	8004c72 <_printf_common+0x46>
 8004cea:	18e1      	adds	r1, r4, r3
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	2030      	movs	r0, #48	; 0x30
 8004cf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf4:	4422      	add	r2, r4
 8004cf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfe:	3302      	adds	r3, #2
 8004d00:	e7c5      	b.n	8004c8e <_printf_common+0x62>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4622      	mov	r2, r4
 8004d06:	4639      	mov	r1, r7
 8004d08:	4630      	mov	r0, r6
 8004d0a:	47c0      	blx	r8
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d0e6      	beq.n	8004cde <_printf_common+0xb2>
 8004d10:	f109 0901 	add.w	r9, r9, #1
 8004d14:	e7d8      	b.n	8004cc8 <_printf_common+0x9c>
	...

08004d18 <_printf_i>:
 8004d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d20:	460c      	mov	r4, r1
 8004d22:	7e09      	ldrb	r1, [r1, #24]
 8004d24:	b085      	sub	sp, #20
 8004d26:	296e      	cmp	r1, #110	; 0x6e
 8004d28:	4617      	mov	r7, r2
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	4698      	mov	r8, r3
 8004d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d30:	f000 80b3 	beq.w	8004e9a <_printf_i+0x182>
 8004d34:	d822      	bhi.n	8004d7c <_printf_i+0x64>
 8004d36:	2963      	cmp	r1, #99	; 0x63
 8004d38:	d036      	beq.n	8004da8 <_printf_i+0x90>
 8004d3a:	d80a      	bhi.n	8004d52 <_printf_i+0x3a>
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	f000 80b9 	beq.w	8004eb4 <_printf_i+0x19c>
 8004d42:	2958      	cmp	r1, #88	; 0x58
 8004d44:	f000 8083 	beq.w	8004e4e <_printf_i+0x136>
 8004d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d50:	e032      	b.n	8004db8 <_printf_i+0xa0>
 8004d52:	2964      	cmp	r1, #100	; 0x64
 8004d54:	d001      	beq.n	8004d5a <_printf_i+0x42>
 8004d56:	2969      	cmp	r1, #105	; 0x69
 8004d58:	d1f6      	bne.n	8004d48 <_printf_i+0x30>
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	0605      	lsls	r5, r0, #24
 8004d60:	f103 0104 	add.w	r1, r3, #4
 8004d64:	d52a      	bpl.n	8004dbc <_printf_i+0xa4>
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6011      	str	r1, [r2, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da03      	bge.n	8004d76 <_printf_i+0x5e>
 8004d6e:	222d      	movs	r2, #45	; 0x2d
 8004d70:	425b      	negs	r3, r3
 8004d72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d76:	486f      	ldr	r0, [pc, #444]	; (8004f34 <_printf_i+0x21c>)
 8004d78:	220a      	movs	r2, #10
 8004d7a:	e039      	b.n	8004df0 <_printf_i+0xd8>
 8004d7c:	2973      	cmp	r1, #115	; 0x73
 8004d7e:	f000 809d 	beq.w	8004ebc <_printf_i+0x1a4>
 8004d82:	d808      	bhi.n	8004d96 <_printf_i+0x7e>
 8004d84:	296f      	cmp	r1, #111	; 0x6f
 8004d86:	d020      	beq.n	8004dca <_printf_i+0xb2>
 8004d88:	2970      	cmp	r1, #112	; 0x70
 8004d8a:	d1dd      	bne.n	8004d48 <_printf_i+0x30>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	f043 0320 	orr.w	r3, r3, #32
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	e003      	b.n	8004d9e <_printf_i+0x86>
 8004d96:	2975      	cmp	r1, #117	; 0x75
 8004d98:	d017      	beq.n	8004dca <_printf_i+0xb2>
 8004d9a:	2978      	cmp	r1, #120	; 0x78
 8004d9c:	d1d4      	bne.n	8004d48 <_printf_i+0x30>
 8004d9e:	2378      	movs	r3, #120	; 0x78
 8004da0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004da4:	4864      	ldr	r0, [pc, #400]	; (8004f38 <_printf_i+0x220>)
 8004da6:	e055      	b.n	8004e54 <_printf_i+0x13c>
 8004da8:	6813      	ldr	r3, [r2, #0]
 8004daa:	1d19      	adds	r1, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6011      	str	r1, [r2, #0]
 8004db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db8:	2301      	movs	r3, #1
 8004dba:	e08c      	b.n	8004ed6 <_printf_i+0x1be>
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6011      	str	r1, [r2, #0]
 8004dc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dc4:	bf18      	it	ne
 8004dc6:	b21b      	sxthne	r3, r3
 8004dc8:	e7cf      	b.n	8004d6a <_printf_i+0x52>
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	6825      	ldr	r5, [r4, #0]
 8004dce:	1d18      	adds	r0, r3, #4
 8004dd0:	6010      	str	r0, [r2, #0]
 8004dd2:	0628      	lsls	r0, r5, #24
 8004dd4:	d501      	bpl.n	8004dda <_printf_i+0xc2>
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	e002      	b.n	8004de0 <_printf_i+0xc8>
 8004dda:	0668      	lsls	r0, r5, #25
 8004ddc:	d5fb      	bpl.n	8004dd6 <_printf_i+0xbe>
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	4854      	ldr	r0, [pc, #336]	; (8004f34 <_printf_i+0x21c>)
 8004de2:	296f      	cmp	r1, #111	; 0x6f
 8004de4:	bf14      	ite	ne
 8004de6:	220a      	movne	r2, #10
 8004de8:	2208      	moveq	r2, #8
 8004dea:	2100      	movs	r1, #0
 8004dec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004df0:	6865      	ldr	r5, [r4, #4]
 8004df2:	60a5      	str	r5, [r4, #8]
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	f2c0 8095 	blt.w	8004f24 <_printf_i+0x20c>
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	f021 0104 	bic.w	r1, r1, #4
 8004e00:	6021      	str	r1, [r4, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d13d      	bne.n	8004e82 <_printf_i+0x16a>
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	f040 808e 	bne.w	8004f28 <_printf_i+0x210>
 8004e0c:	4665      	mov	r5, ip
 8004e0e:	2a08      	cmp	r2, #8
 8004e10:	d10b      	bne.n	8004e2a <_printf_i+0x112>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	07db      	lsls	r3, r3, #31
 8004e16:	d508      	bpl.n	8004e2a <_printf_i+0x112>
 8004e18:	6923      	ldr	r3, [r4, #16]
 8004e1a:	6862      	ldr	r2, [r4, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	bfde      	ittt	le
 8004e20:	2330      	movle	r3, #48	; 0x30
 8004e22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e2a:	ebac 0305 	sub.w	r3, ip, r5
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	f8cd 8000 	str.w	r8, [sp]
 8004e34:	463b      	mov	r3, r7
 8004e36:	aa03      	add	r2, sp, #12
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7ff fef6 	bl	8004c2c <_printf_common>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d14d      	bne.n	8004ee0 <_printf_i+0x1c8>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b005      	add	sp, #20
 8004e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e4e:	4839      	ldr	r0, [pc, #228]	; (8004f34 <_printf_i+0x21c>)
 8004e50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e54:	6813      	ldr	r3, [r2, #0]
 8004e56:	6821      	ldr	r1, [r4, #0]
 8004e58:	1d1d      	adds	r5, r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6015      	str	r5, [r2, #0]
 8004e5e:	060a      	lsls	r2, r1, #24
 8004e60:	d50b      	bpl.n	8004e7a <_printf_i+0x162>
 8004e62:	07ca      	lsls	r2, r1, #31
 8004e64:	bf44      	itt	mi
 8004e66:	f041 0120 	orrmi.w	r1, r1, #32
 8004e6a:	6021      	strmi	r1, [r4, #0]
 8004e6c:	b91b      	cbnz	r3, 8004e76 <_printf_i+0x15e>
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	f022 0220 	bic.w	r2, r2, #32
 8004e74:	6022      	str	r2, [r4, #0]
 8004e76:	2210      	movs	r2, #16
 8004e78:	e7b7      	b.n	8004dea <_printf_i+0xd2>
 8004e7a:	064d      	lsls	r5, r1, #25
 8004e7c:	bf48      	it	mi
 8004e7e:	b29b      	uxthmi	r3, r3
 8004e80:	e7ef      	b.n	8004e62 <_printf_i+0x14a>
 8004e82:	4665      	mov	r5, ip
 8004e84:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e88:	fb02 3311 	mls	r3, r2, r1, r3
 8004e8c:	5cc3      	ldrb	r3, [r0, r3]
 8004e8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e92:	460b      	mov	r3, r1
 8004e94:	2900      	cmp	r1, #0
 8004e96:	d1f5      	bne.n	8004e84 <_printf_i+0x16c>
 8004e98:	e7b9      	b.n	8004e0e <_printf_i+0xf6>
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	6825      	ldr	r5, [r4, #0]
 8004e9e:	6961      	ldr	r1, [r4, #20]
 8004ea0:	1d18      	adds	r0, r3, #4
 8004ea2:	6010      	str	r0, [r2, #0]
 8004ea4:	0628      	lsls	r0, r5, #24
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	d501      	bpl.n	8004eae <_printf_i+0x196>
 8004eaa:	6019      	str	r1, [r3, #0]
 8004eac:	e002      	b.n	8004eb4 <_printf_i+0x19c>
 8004eae:	066a      	lsls	r2, r5, #25
 8004eb0:	d5fb      	bpl.n	8004eaa <_printf_i+0x192>
 8004eb2:	8019      	strh	r1, [r3, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	6123      	str	r3, [r4, #16]
 8004eb8:	4665      	mov	r5, ip
 8004eba:	e7b9      	b.n	8004e30 <_printf_i+0x118>
 8004ebc:	6813      	ldr	r3, [r2, #0]
 8004ebe:	1d19      	adds	r1, r3, #4
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	681d      	ldr	r5, [r3, #0]
 8004ec4:	6862      	ldr	r2, [r4, #4]
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7fb f989 	bl	80001e0 <memchr>
 8004ece:	b108      	cbz	r0, 8004ed4 <_printf_i+0x1bc>
 8004ed0:	1b40      	subs	r0, r0, r5
 8004ed2:	6060      	str	r0, [r4, #4]
 8004ed4:	6863      	ldr	r3, [r4, #4]
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ede:	e7a7      	b.n	8004e30 <_printf_i+0x118>
 8004ee0:	6923      	ldr	r3, [r4, #16]
 8004ee2:	462a      	mov	r2, r5
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	47c0      	blx	r8
 8004eea:	3001      	adds	r0, #1
 8004eec:	d0aa      	beq.n	8004e44 <_printf_i+0x12c>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	079b      	lsls	r3, r3, #30
 8004ef2:	d413      	bmi.n	8004f1c <_printf_i+0x204>
 8004ef4:	68e0      	ldr	r0, [r4, #12]
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	4298      	cmp	r0, r3
 8004efa:	bfb8      	it	lt
 8004efc:	4618      	movlt	r0, r3
 8004efe:	e7a3      	b.n	8004e48 <_printf_i+0x130>
 8004f00:	2301      	movs	r3, #1
 8004f02:	464a      	mov	r2, r9
 8004f04:	4639      	mov	r1, r7
 8004f06:	4630      	mov	r0, r6
 8004f08:	47c0      	blx	r8
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d09a      	beq.n	8004e44 <_printf_i+0x12c>
 8004f0e:	3501      	adds	r5, #1
 8004f10:	68e3      	ldr	r3, [r4, #12]
 8004f12:	9a03      	ldr	r2, [sp, #12]
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	42ab      	cmp	r3, r5
 8004f18:	dcf2      	bgt.n	8004f00 <_printf_i+0x1e8>
 8004f1a:	e7eb      	b.n	8004ef4 <_printf_i+0x1dc>
 8004f1c:	2500      	movs	r5, #0
 8004f1e:	f104 0919 	add.w	r9, r4, #25
 8004f22:	e7f5      	b.n	8004f10 <_printf_i+0x1f8>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ac      	bne.n	8004e82 <_printf_i+0x16a>
 8004f28:	7803      	ldrb	r3, [r0, #0]
 8004f2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f32:	e76c      	b.n	8004e0e <_printf_i+0xf6>
 8004f34:	08005279 	.word	0x08005279
 8004f38:	0800528a 	.word	0x0800528a

08004f3c <_putc_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	460d      	mov	r5, r1
 8004f40:	4614      	mov	r4, r2
 8004f42:	4606      	mov	r6, r0
 8004f44:	b118      	cbz	r0, 8004f4e <_putc_r+0x12>
 8004f46:	6983      	ldr	r3, [r0, #24]
 8004f48:	b90b      	cbnz	r3, 8004f4e <_putc_r+0x12>
 8004f4a:	f7ff fb99 	bl	8004680 <__sinit>
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <_putc_r+0x60>)
 8004f50:	429c      	cmp	r4, r3
 8004f52:	d112      	bne.n	8004f7a <_putc_r+0x3e>
 8004f54:	6874      	ldr	r4, [r6, #4]
 8004f56:	68a3      	ldr	r3, [r4, #8]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	60a3      	str	r3, [r4, #8]
 8004f5e:	da16      	bge.n	8004f8e <_putc_r+0x52>
 8004f60:	69a2      	ldr	r2, [r4, #24]
 8004f62:	4293      	cmp	r3, r2
 8004f64:	db02      	blt.n	8004f6c <_putc_r+0x30>
 8004f66:	b2eb      	uxtb	r3, r5
 8004f68:	2b0a      	cmp	r3, #10
 8004f6a:	d110      	bne.n	8004f8e <_putc_r+0x52>
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4630      	mov	r0, r6
 8004f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f76:	f7ff b9d3 	b.w	8004320 <__swbuf_r>
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <_putc_r+0x64>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d101      	bne.n	8004f84 <_putc_r+0x48>
 8004f80:	68b4      	ldr	r4, [r6, #8]
 8004f82:	e7e8      	b.n	8004f56 <_putc_r+0x1a>
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <_putc_r+0x68>)
 8004f86:	429c      	cmp	r4, r3
 8004f88:	bf08      	it	eq
 8004f8a:	68f4      	ldreq	r4, [r6, #12]
 8004f8c:	e7e3      	b.n	8004f56 <_putc_r+0x1a>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	6022      	str	r2, [r4, #0]
 8004f94:	701d      	strb	r5, [r3, #0]
 8004f96:	b2e8      	uxtb	r0, r5
 8004f98:	bd70      	pop	{r4, r5, r6, pc}
 8004f9a:	bf00      	nop
 8004f9c:	08005228 	.word	0x08005228
 8004fa0:	08005248 	.word	0x08005248
 8004fa4:	08005208 	.word	0x08005208

08004fa8 <_sbrk_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4c06      	ldr	r4, [pc, #24]	; (8004fc4 <_sbrk_r+0x1c>)
 8004fac:	2300      	movs	r3, #0
 8004fae:	4605      	mov	r5, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	f7fc f828 	bl	8001008 <_sbrk>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_sbrk_r+0x1a>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_sbrk_r+0x1a>
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	200001e4 	.word	0x200001e4

08004fc8 <__sread>:
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	460c      	mov	r4, r1
 8004fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd0:	f000 f896 	bl	8005100 <_read_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	bfab      	itete	ge
 8004fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fda:	89a3      	ldrhlt	r3, [r4, #12]
 8004fdc:	181b      	addge	r3, r3, r0
 8004fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fe2:	bfac      	ite	ge
 8004fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fe6:	81a3      	strhlt	r3, [r4, #12]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <__swrite>:
 8004fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fee:	461f      	mov	r7, r3
 8004ff0:	898b      	ldrh	r3, [r1, #12]
 8004ff2:	05db      	lsls	r3, r3, #23
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	4616      	mov	r6, r2
 8004ffa:	d505      	bpl.n	8005008 <__swrite+0x1e>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	2200      	movs	r2, #0
 8005000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005004:	f000 f868 	bl	80050d8 <_lseek_r>
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005012:	81a3      	strh	r3, [r4, #12]
 8005014:	4632      	mov	r2, r6
 8005016:	463b      	mov	r3, r7
 8005018:	4628      	mov	r0, r5
 800501a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800501e:	f000 b817 	b.w	8005050 <_write_r>

08005022 <__sseek>:
 8005022:	b510      	push	{r4, lr}
 8005024:	460c      	mov	r4, r1
 8005026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502a:	f000 f855 	bl	80050d8 <_lseek_r>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	bf15      	itete	ne
 8005034:	6560      	strne	r0, [r4, #84]	; 0x54
 8005036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800503a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800503e:	81a3      	strheq	r3, [r4, #12]
 8005040:	bf18      	it	ne
 8005042:	81a3      	strhne	r3, [r4, #12]
 8005044:	bd10      	pop	{r4, pc}

08005046 <__sclose>:
 8005046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504a:	f000 b813 	b.w	8005074 <_close_r>
	...

08005050 <_write_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4c07      	ldr	r4, [pc, #28]	; (8005070 <_write_r+0x20>)
 8005054:	4605      	mov	r5, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fb ff81 	bl	8000f66 <_write>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_write_r+0x1e>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	b103      	cbz	r3, 800506e <_write_r+0x1e>
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	200001e4 	.word	0x200001e4

08005074 <_close_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4c06      	ldr	r4, [pc, #24]	; (8005090 <_close_r+0x1c>)
 8005078:	2300      	movs	r3, #0
 800507a:	4605      	mov	r5, r0
 800507c:	4608      	mov	r0, r1
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	f7fb ff8d 	bl	8000f9e <_close>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_close_r+0x1a>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	b103      	cbz	r3, 800508e <_close_r+0x1a>
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	200001e4 	.word	0x200001e4

08005094 <_fstat_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4c07      	ldr	r4, [pc, #28]	; (80050b4 <_fstat_r+0x20>)
 8005098:	2300      	movs	r3, #0
 800509a:	4605      	mov	r5, r0
 800509c:	4608      	mov	r0, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	f7fb ff88 	bl	8000fb6 <_fstat>
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	d102      	bne.n	80050b0 <_fstat_r+0x1c>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	b103      	cbz	r3, 80050b0 <_fstat_r+0x1c>
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	bd38      	pop	{r3, r4, r5, pc}
 80050b2:	bf00      	nop
 80050b4:	200001e4 	.word	0x200001e4

080050b8 <_isatty_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4c06      	ldr	r4, [pc, #24]	; (80050d4 <_isatty_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4605      	mov	r5, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	f7fb ff87 	bl	8000fd6 <_isatty>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_isatty_r+0x1a>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_isatty_r+0x1a>
 80050d0:	602b      	str	r3, [r5, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	200001e4 	.word	0x200001e4

080050d8 <_lseek_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4c07      	ldr	r4, [pc, #28]	; (80050f8 <_lseek_r+0x20>)
 80050dc:	4605      	mov	r5, r0
 80050de:	4608      	mov	r0, r1
 80050e0:	4611      	mov	r1, r2
 80050e2:	2200      	movs	r2, #0
 80050e4:	6022      	str	r2, [r4, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f7fb ff80 	bl	8000fec <_lseek>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	d102      	bne.n	80050f6 <_lseek_r+0x1e>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	b103      	cbz	r3, 80050f6 <_lseek_r+0x1e>
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	200001e4 	.word	0x200001e4

080050fc <__malloc_lock>:
 80050fc:	4770      	bx	lr

080050fe <__malloc_unlock>:
 80050fe:	4770      	bx	lr

08005100 <_read_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4c07      	ldr	r4, [pc, #28]	; (8005120 <_read_r+0x20>)
 8005104:	4605      	mov	r5, r0
 8005106:	4608      	mov	r0, r1
 8005108:	4611      	mov	r1, r2
 800510a:	2200      	movs	r2, #0
 800510c:	6022      	str	r2, [r4, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f7fb ff0c 	bl	8000f2c <_read>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_read_r+0x1e>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	b103      	cbz	r3, 800511e <_read_r+0x1e>
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	200001e4 	.word	0x200001e4

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
